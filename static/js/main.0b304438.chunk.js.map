{"version":3,"sources":["store/round/match/participant/Avatar.ts","store/round/match/participant/Participant.ts","store/config/RandomGenerator.ts","store/config/AnimationSpeed.ts","store/config/Config.ts","util/index.tsx","store/config/i18n.ts","i18n.ts","tournament/round/match/participant/common/_partial/ParticipantAvatarView.tsx","tournament/round/match/participant/common/_partial/ParticipantAvatarView.react.tsx","tournament/round/match/participant/common/_partial/ParticipantNameView.tsx","tournament/round/match/participant/common/_partial/ParticipantNameView.react.tsx","tournament/round/match/participant/common/index.tsx","tournament/round/match/participant/common/index.react.tsx","tournament/round/match/participant/entry/ParticipantEntry.tsx","tournament/round/match/_partial/MatchWinnerView.tsx","tournament/round/match/_partial/MatchWinnerView.react.tsx","tournament/round/match/_partial/MatchFinalEntry.tsx","tournament/round/match/_partial/MatchFinalEntry.react.tsx","tournament/round/match/_partial/MatchParticipantList.tsx","tournament/round/match/_partial/MatchParticipantList.react.tsx","tournament/round/match/overlay/_partial/MatchOverlayWinner.react.tsx","tournament/round/match/overlay/_partial/MatchOverlayWinner.tsx","tournament/round/match/overlay/_partial/MatchOverlayInterim.tsx","tournament/round/match/overlay/_partial/MatchOverlayInterim.react.tsx","tournament/round/match/participant/card/ParticipantCard.tsx","tournament/round/match/overlay/_partial/MatchOverlayParticipants.tsx","tournament/round/match/overlay/_partial/MatchOverlayParticipants.react.tsx","tournament/round/match/overlay/MatchOverlay.tsx","tournament/round/match/overlay/MatchOverlay.react.tsx","tournament/round/match/MatchView.tsx","tournament/round/match/MatchView.react.tsx","tournament/round/_partial/RoundMatchListView.tsx","tournament/round/_partial/RoundMatchListView.react.tsx","tournament/round/_partial/RoundTitle.tsx","tournament/round/_partial/RoundTitle.react.tsx","tournament/round/_partial/RoundDetails.tsx","tournament/round/_partial/RoundDetails.react.tsx","tournament/round/RoundView.react.tsx","tournament/round/RoundView.tsx","tournament/winner-overlay/_partial/WinnerInfo.tsx","tournament/winner-overlay/_partial/WinnerInfo.react.tsx","tournament/winner-overlay/_partial/WinnerOverlayView.tsx","tournament/winner-overlay/_partial/WinnerOverlayView.react.tsx","tournament/winner-overlay/WinnerOverlay.tsx","tournament/winner-overlay/WinnerOverlay.react.tsx","tournament/speed/_partial/SpeedOption.tsx","tournament/speed/_partial/SpeedOption.react.tsx","tournament/speed/SpeedControl.react.tsx","tournament/speed/SpeedControl.tsx","tournament/_partial/AppDevTools.tsx","tournament/_partial/AppDevTools.react.tsx","tournament/loser-overlay/_partial/LoserInfo.tsx","tournament/loser-overlay/_partial/LoserInfo.react.tsx","tournament/loser-overlay/_partial/LoserOverlayView.tsx","tournament/loser-overlay/_partial/LoserOverlayView.react.tsx","tournament/loser-overlay/LoserOverlay.tsx","tournament/loser-overlay/LoserOverlay.react.tsx","tournament/_partial/LoserOverlayView.tsx","tournament/_partial/LoserOverlayView.react.tsx","tournament/_partial/TournamentTitle.react.tsx","tournament/_partial/TournamentTitle.tsx","tournament/language/_partial/LanguageOption.tsx","tournament/language/_partial/LanguageOption.react.tsx","tournament/language/LanguageControl.tsx","tournament/language/LanguageControl.react.tsx","service-worker/ServiceWorkerUpdateAlert.react.tsx","service-worker/ServiceWorkerUpdateAlert.tsx","service-worker/ServiceWorkerAddAlert.react.tsx","service-worker/ServiceWorkerAddAlert.tsx","tournament/TournamentView.react.tsx","tournament/TournamentView.tsx","AppRouter.react.tsx","AppRouter.tsx","serviceWorker.ts","store/config/ServiceWorkerAlertsConfig.ts","store/round/match/Match.ts","store/round/Round.ts","index.tsx","store/Tournament.ts"],"names":["Avatar","constructor","url","altText","_url","_altText","_isSameUrl","url1","url2","_isSameAltText","altText1","altText2","equals","otherAvatar","this","inflect","require","Participant","name","avatar","weight","_id","_name","_avatar","_weight","_getOrCreateAvatar","createAvatarImage","_isSameName","name1","name2","_isSameAvatar","avatar1","avatar2","otherParticipant","counter","titleize","randomEngine","Random","engines","mt19937","seed","configJson","AnimationSpeed","_SPEED_MAP","Map","get","key","getValues","Array","from","values","getKeys","keys","hasKey","has","hasValue","value","indexOf","getEntries","entries","Config","_messages","_allParticipants","_participantsPerMatch","_languages","_unusedMessages","_getName","ConfigJson","_getMessages","messages","_createParticipant","user","_getParticipants","users","map","_getParticipantsPerMatch","participantsPerMatch","_getlLanguages","lang","_getSpeed","_shouldPrepend","index","participantSize","_prependToLastParticipant","stringToPrepend","_formatLosers","names","length","join","getFormattedMessage","message","winnerName","loserNames","replace","getMessageIndex","RandomGenerator","shuffle","_currentLanguage","_speed","_instance","getRandomMessage","pick","splice","setCurrentLanguage","i18n","changeLanguage","console","error","setSpeed","observable","computed","action","identifier","isInRange","num","start","end","runOnDelay","delay","delayId","setTimeout","clearTimeout","useAnimationState","useState","currentState","setState","updateState","getNormalizedSpeed","time","getInstance","speed","runOnPredicate","predicate","undefined","getMatchRedirect","roundId","matchId","to","createObserver","Component","props","resources","en","translation","lng","fallbackLng","debug","process","interpolation","escapeValue","react","wait","configLanguages","resourceLanguages","Object","i18nConfig","filter","language","forEach","Error","use","detector","initReactI18next","init","ParticipantAvatarView","participant","className","classNames","src","alt","ParticipantNameView","properName","ParticipantView","invert","createParticipantView","MatchWinnerView","useEffect","in","timeout","enter","enterActive","enterDone","exit","exitActive","exitDone","mountOnEnter","unmountOnExit","style","transition","winner","MatchFinalEntry","updateStateDelay","match","participants","isCurrentMatch","isActualMatch","id","onEntered","onExited","MatchParticipantList","inject","withTranslation","withRouter","document","hidden","setHidden","shouldNotStopOnEnd","URLSearchParams","location","search","log","updateHidden","addEventListener","removeEventListener","translatedMessagesList","t","useTranslation","returnObjects","count","currentMatch","losers","matchMessage","messageIndex","config","isArray","loser","onWinnerComplete","show","i18nKey","onInterimComplete","sizeUnit","size","flatMap","slice","onOverlayComplete","onMatchComplete","matchRef","useRef","onEntering","current","scrollIntoView","behavior","block","inline","ref","RoundMatchListView","currentMatchIndex","round","matches","findIndex","_","fullId","onCurrentMatchComplete","onCurrentComplete","getRoundRedirectIfRequired","required","matchIndex","shouldNextRedirect","onRoundComplete","WinnerOverlayView","observer","onClick","allAnimationValues","SpeedControl","AppDevTools","onInfoComplete","onViewComplete","LoserOverlayView","isString","translatedTournamentName","tournamentName","currentLanguage","languages","SweetAlert","setShow","title","default","serviceWorkerAlertsConfig","updated","type","text","onConfirm","setIsUpdated","added","setIsAdded","tournament","roundIndex","rounds","TournamentView","currentRoundIndex","isLastRound","lastRound","showOverlay","setShowOverlay","Math","max","ServiceWorkerAddAlert","ServiceWorkerUpdateAlert","AppRedirect","firstMatchId","firstRoundId","AppRouter","_getParams","routeProps","params","_getApplicationRoute","exact","path","render","_getTournament","_getPartialRoute","_getPartialAppRedirect","_getCurrentRoundDetails","_getFirstMatchIdOfCurrentRound","_getUnknownAppRedirect","_getUnknownRoute","_getFirstRoundId","firstRound","_getIsCurrentRoundFilter","find","firstMatch","Boolean","window","hostname","ServiceWorkerAlertsConfig","_added","_updated","gcd","Match","_roundId","_participants","_winner","_message","_participantWeightGcd","_config","_getParticipantWeight","_getParticipantWeightsGcd","reduce","prevGcd","_cloneParticipantByWeight","i","push","_getWinner","_getMessage","_getMatchId","_isNotWinner","Round","_matches","_shuffleParticipants","_createMatch","_getMatches","chunk","_getMatchParticipants","_getMatchWinner","_getMatchLosers","last","navigator","serviceWorker","ready","then","registration","unregister","store","_rounds","_createRound","_getRounds","allParticipants","_hasWinner","winners","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.0b304438.chunk.js","sourcesContent":["/**\n * Class containing the details of a participants' avatar.\n */\nexport default class Avatar {\n  /** The URL of the avatar image. */\n  private _url: string;\n  /** The alternate text for the image. */\n  private _altText: string;\n\n  public constructor(url: string, altText: string) {\n    this._url = url;\n    this._altText = altText;\n  }\n\n  /**\n   * Gets the avatar URL.\n   * @return {string} The avatar URL.\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Gets the avatar image alternate text.\n   * @return {string} The avatar image alternate text.\n   */\n  public get altText(): string {\n    return this._altText;\n  }\n\n  /**\n   * Returns whether the two given URLs are equal.\n   * @param {string} url1 The first URL to compare.\n   * @param {string} url2 The second URL to compare.\n   * @return {boolean} Whether the two URLs are equal.\n   */\n  private _isSameUrl = (url1: string, url2: string): boolean => url1 === url2;\n\n  /**\n   * Returns whether the two alternate texts are equal.\n   * @param {string} altText1 The first alternate text to compare.\n   * @param {string} altText2 The second alternate text to compare.\n   * @return {boolean} Whether the two alternate texts are equal.\n   */\n  private _isSameAltText = (altText1: string, altText2: string): boolean =>\n    altText1 === altText2;\n\n  /**\n   * Determines whether another avatar is identical to the current one.\n   * @param  {Avatar} otherAvatar The other avatar to compare against.\n   * @return {boolean} Whether the other avatar is equal to the current one.\n   */\n  public equals = (otherAvatar: Avatar): boolean =>\n    this._isSameUrl(this._url, otherAvatar._url) &&\n    this._isSameAltText(this._altText, otherAvatar._altText);\n}\n","import { createAvatarImage } from \"../../../../util\";\nimport Avatar from \"./Avatar\";\nconst inflect = require(\"i\")();\n\ninterface AvatarJson {\n  url: string;\n  altText: string;\n}\n\n/**\n * Class containing the details of a participant.\n */\nexport default class Participant {\n  /** The ID of the participant. */\n  private _id: string;\n  /** The name of the participant. */\n  private _name: string;\n  /** The avatar of the participant. */\n  private _avatar: Avatar;\n  /** The weight of the participant. */\n  private _weight: number;\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: number = 1;\n\n  /**\n   * Gets the avatar of the participant if present, or creates a random one,\n   * @param  {string} name The name of the participant.\n   * @param  {AvatarJson} avatar The avatar details of the participant, if available.\n   * @return {Avatar} The generated avatar of the participant.\n   */\n  private _getOrCreateAvatar = (name: string, avatar?: AvatarJson): Avatar => {\n    return avatar\n      ? new Avatar(avatar.url, avatar.altText)\n      : new Avatar(createAvatarImage(name), name);\n  };\n\n  public constructor(name: string, avatar?: AvatarJson, weight: number = 1) {\n    this._id = `${Participant.counter++}`;\n    this._name = name;\n    this._avatar = this._getOrCreateAvatar(name, avatar);\n    this._weight = weight;\n  }\n\n  /**\n   * Get the participant ID.\n   * @return {string} The unique ID of the participant.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Gets the participant name.\n   * @return {string} The participant name.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Gets the capitalized name of the participant.\n   * @return {string} The capitalized name.\n   */\n  public get properName(): string {\n    return inflect.titleize(this._name);\n  }\n\n  /**\n   * Gets the participant avatar, if it exists.\n   * @return {string} The participant avatar.\n   */\n  public get avatar(): Avatar {\n    return this._avatar;\n  }\n\n  /**\n   * Gets the participant weight.\n   * @return {number} The participant weight.\n   */\n  public get weight(): number {\n    return this._weight;\n  }\n\n  /**\n   * Returns whether the two names are equal.\n   * @param {string} name1 The first name to compare.\n   * @param {string} name2 The second name to compare.\n   * @return {boolean} Whether the two names are equal.\n   */\n  private _isSameName = (name1: string, name2: string): boolean =>\n    name1 === name2;\n\n  /**\n   * Returns whether the two avatars are equal.\n   * @param {Avatar} avatar1 The first avatar to compare.\n   * @param {Avatar} avatar2 The second avatar to compare.\n   * @return {boolean} Whether the two avatars are equal.\n   */\n  private _isSameAvatar = (avatar1: Avatar, avatar2: Avatar): boolean =>\n    avatar1.equals(avatar2);\n\n  /**\n   * Determines whether another participant is identical to the current one.\n   * @param  {Participant} otherParticipant The other participant to compare against.\n   * @return {boolean} Whether the other participant is equal to the current one.\n   */\n  public equals = (otherParticipant: Participant): boolean =>\n    this._isSameName(this._name, otherParticipant._name) &&\n    this._isSameAvatar(this._avatar, otherParticipant._avatar);\n}\n","import Random, { Engine } from \"random-js\";\nimport configJson from \"../../config/config.json\";\n\n// Create a mersenne twister engine.\nconst randomEngine: Engine = Random.engines.mt19937().seed(configJson.seed);\n// Export a randomizer using the created engine.\nexport default new Random(randomEngine);\n","/**\n * Class the provides possible animation speeds.\n */\nexport default class AnimationSpeed {\n  /** A map of possible speeds, and their multiplier values. */\n  private static _SPEED_MAP: Map<string, number> = new Map([\n    [\"HALF\", 0.5],\n    [\"ONE\", 1],\n    [\"TWO\", 2],\n    // [\"FIVE\", 5],\n    // [\"TEN\", 10],\n  ]);\n\n  /**\n   * Returns the speed multiplier of the given key.\n   * @param  {string} key The key whose speed multiplier to return.\n   * @return {number | undefined} The speed multiplier, or undefined if it doesn't exist.\n   */\n  public static get = (key: string): number | undefined =>\n    AnimationSpeed._SPEED_MAP.get(key);\n\n  /**\n   * Returns the list of possible speed multiplier values.\n   * @return {number[]} The list of speed multiplier values.\n   */\n  public static getValues = (): number[] =>\n    Array.from(AnimationSpeed._SPEED_MAP.values());\n\n  /**\n   * Returns the list of possible speed multiplier keys.\n   * @return {string[]} The list of speed multiplier keys.\n   */\n  public static getKeys = (): string[] =>\n    Array.from(AnimationSpeed._SPEED_MAP.keys());\n\n  /**\n   * Returns whether the speed multiplier key exists.\n   * @param  {string} key The key to check.\n   * @return {boolean} Whether the speed multiplier key exists or not.\n   */\n  public static hasKey = (key: string): boolean =>\n    AnimationSpeed._SPEED_MAP.has(key);\n\n  /**\n   * Returns whether the speed multiplier value exists.\n   * @param  {number} value The value to check.\n   * @return {boolean} Whether the speed multiplier value exists or not.\n   */\n  public static hasValue = (value: number): boolean =>\n    AnimationSpeed.getValues().indexOf(value) !== -1;\n\n  /**\n   * Returns the list of possible speed multiplier keys and values.\n   * @return {[string, number][]} Returns the list of speed multiplier keys and values.\n   */\n  public static getEntries = (): [string, number][] =>\n    Array.from(AnimationSpeed._SPEED_MAP.entries());\n}\n","import Participant from \"../round/match/participant/Participant\";\nimport ConfigJson from \"../../config/config.json\";\nimport i18n from \"../../i18n\";\nimport { observable, computed, action } from \"mobx\";\nimport RandomGenerator from \"./RandomGenerator\";\nimport AnimationSpeed from \"./AnimationSpeed\";\n\n/**\n * Interface for JSON object representing avatar details.\n */\ninterface AvatarJson {\n  /** The URL of the avatar. */\n  url: string;\n  /** The alternate text of the avatar image. */\n  altText: string;\n}\n\n/**\n * Interface for JSON object representing participant details.\n */\ninterface ParticipantJson {\n  /** The name of the participant. */\n  name: string;\n  /** The avatar of the participant (if present). */\n  avatar?: AvatarJson;\n  /** The weight of the participant (if present). */\n  weight?: number;\n}\n\n/**\n * Class representing the basic configuration of the application.\n */\nexport default class Config {\n  /** The name of the tournament. */\n  private _name: string;\n  /** A list of all messages. */\n  private _messages: string[];\n  /** The list of participants in the tournament. */\n  private _allParticipants: Participant[];\n  /** The number of participants per match. */\n  private _participantsPerMatch: number;\n  /** The languages supported by the application. */\n  private _languages: string[];\n  /** The current language. */\n  @observable private _currentLanguage: string;\n  /** The animation speed multiplier. */\n  @observable private _speed: number;\n  /** The list of unused messages. */\n  private _unusedMessages: string[];\n\n  /** The singleton instance of the class, or null if not yet created. */\n  private static _instance: Config | null = null;\n\n  /**\n   * Returns the name of the tournament.\n   * @return {string} The tournament name.\n   */\n  private _getName = (): string => ConfigJson.name;\n\n  /**\n   * Returns the match conclusion messages that can be used for the tournament.\n   * @return {string[]} The tournament match conclusion messages.\n   */\n  private _getMessages = (): string[] => ConfigJson.messages;\n\n  /**\n   * Returns a created participant for the given JSON details.\n   * @param {string | ParticipantJson} user The participants details.\n   * @return {Participant} The created participant.\n   */\n  private _createParticipant = (user: string | ParticipantJson): Participant =>\n    typeof user === \"string\"\n      ? new Participant(user)\n      : new Participant(\n          (user as ParticipantJson).name,\n          (user as ParticipantJson).avatar,\n          (user as ParticipantJson).weight,\n        );\n\n  /**\n   * Returns a created list of participants using the given participant details.\n   * @return {Participant[]} The created participants list.\n   */\n  private _getParticipants = (): Participant[] =>\n    ConfigJson.users.map(this._createParticipant);\n\n  /**\n   * Returns the max. number of participants that are to be present per match in the tournament.\n   * @return {number} The max. number of participants per match.\n   */\n  private _getParticipantsPerMatch = (): number =>\n    ConfigJson.participantsPerMatch;\n\n  /**\n   * Returns the list of languages supported by the application.\n   * @return {string[]} The list of languages.\n   */\n  private _getlLanguages = (): string[] => ConfigJson.lang;\n\n  /**\n   * Returns the animation speed multiplier of the application.\n   * @return {number} The animation speed multiplier.\n   */\n  private _getSpeed = (): number => AnimationSpeed.get(\"ONE\") as number;\n\n  /**\n   * Returns whether a string should be prepended to a participants' name.\n   * @param {number} index The index of the participant.\n   * @param {number} participantSize The total number of participants.\n   * @return {boolean} Whether the string should be prepended.\n   */\n  private _shouldPrepend = (index: number, participantSize: number): boolean =>\n    index === participantSize - 1 && participantSize > 1;\n\n  /**\n   * Returns a function that can returns the participant name prepended with a string if it's the last participant, or just the name.\n   * @param {number} participantSize The total number of participants.\n   * @param {string} stringToPrepend The string to prepend.\n   * @return {(name: string, index: number) => string} The function that will return the participants' name\n   */\n  private _prependToLastParticipant = (\n    participantSize: number,\n    stringToPrepend: string,\n  ): ((name: string, index: number) => string) => (\n    name: string,\n    index: number,\n  ): string =>\n    this._shouldPrepend(index, participantSize)\n      ? `${stringToPrepend} ${name}`\n      : name;\n\n  /**\n   * Returns a formatted losers list.\n   * @param {string[]} names The list of loser names.\n   * @return {string} The formatted string.\n   */\n  private _formatLosers = (names: string[]): string =>\n    names.map(this._prependToLastParticipant(names.length, \"and\")).join(\", \");\n\n  private constructor() {\n    this._name = this._getName();\n    this._messages = this._getMessages();\n    this._unusedMessages = RandomGenerator.shuffle([...this._messages]);\n    this._allParticipants = this._getParticipants();\n    this._participantsPerMatch = this._getParticipantsPerMatch();\n    this._languages = this._getlLanguages();\n    this._currentLanguage = \"en\";\n    this._speed = this._getSpeed();\n  }\n\n  /**\n   * Get an instance of the config, which is a singleton.\n   * @return {Config} The instance of a config.\n   */\n  public static getInstance(): Config {\n    return Config._instance\n      ? Config._instance\n      : (Config._instance = new Config());\n  }\n\n  /**\n   * Get the name of the tournament.\n   * @return {string} The tournament name.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the list of winner/loser messages.\n   * @return {string[]} The list of mesasges.\n   */\n  public get messages(): string[] {\n    return [...this._messages];\n  }\n\n  /**\n   * Returns the formatted version of the given message.\n   * @param {string} message The message to format.\n   * @param {string} winnerName The name of the winner.\n   * @param {string[]} loserNames The names of the losers.\n   * @return {string} The formatted message.\n   */\n  public getFormattedMessage = (\n    message: string,\n    winnerName: string,\n    loserNames: string[],\n  ): string =>\n    message\n      .replace(\"#winner\", winnerName)\n      .replace(\"#loser\", this._formatLosers(loserNames));\n\n  /**\n   * Gets a random message with the winner and loser.\n   * @return {string} The formatted message.\n   */\n  public getRandomMessage(): string {\n    if (this._unusedMessages.length === 0) {\n      this._unusedMessages = RandomGenerator.shuffle([...this._messages]);\n    }\n    const message = RandomGenerator.pick(this._unusedMessages);\n    this._unusedMessages.splice(this._unusedMessages.indexOf(message), 1);\n    return message;\n  }\n\n  /**\n   * Gets the index of the given message.\n   * @param {string} message The message.\n   * @return {number} The index of the message.\n   */\n  public getMessageIndex = (message: string): number =>\n    this._messages.indexOf(message);\n\n  /**\n   * Get the list of all participants in the tournament.\n   * @return {Participant[]} The list of all participants.\n   */\n  public get allParticipants(): Participant[] {\n    return this._allParticipants;\n  }\n\n  /**\n   * Get the number of participants per match.\n   * @return {number} The number of participants per match.\n   */\n  public get participantsPerMatch(): number {\n    return this._participantsPerMatch;\n  }\n\n  /**\n   * Get the list of languages supported by the application.\n   * @return {string[]} The list of languages.\n   */\n  public get languages(): string[] {\n    return this._languages;\n  }\n\n  /**\n   * Get the current application language.\n   * @return {string} The current language.\n   */\n  @computed public get currentLanguage(): string {\n    return this._currentLanguage;\n  }\n\n  /**\n   * Set the current language of the application.\n   * @param {string} value The new current language.\n   */\n  @action public setCurrentLanguage(value: string): void {\n    if (this._languages.indexOf(value) !== -1) {\n      this._currentLanguage = value;\n      i18n.changeLanguage(value);\n    } else {\n      console.error(`Illegal value '${value}' for current language.`);\n    }\n  }\n\n  /**\n   * Get the speed multiplier for animations.\n   * @return {number} The speed multiplier value.\n   */\n  @computed public get speed(): number {\n    return this._speed;\n  }\n\n  /**\n   * Set the speed multiplier for animations.\n   * @param {number} value The new speed multiplier value.\n   */\n  @action public setSpeed(value: number): void {\n    if (AnimationSpeed.hasValue(value)) {\n      this._speed = value;\n    } else {\n      console.error(`Illegal value '${value}' for speed.`);\n    }\n  }\n}\n","import React, { ComponentType, Dispatch, useState } from \"react\";\nimport Config from \"../store/config/Config\";\nimport { Redirect } from \"react-router\";\nimport { Observer } from \"mobx-react\";\n\n/**\n * Returns if it is currently a dev environment.\n */\nexport const isDevEnvironment: boolean = process.env.NODE_ENV === \"development\";\n\n/**\n * Returns a random avatar image URL.\n * @param {string} identifier The identifier to generate the avatar URL against.\n * @return {string} The avatar URL.\n */\nexport const createAvatarImage = (identifier: string): string => {\n  return `https://api.adorable.io/avatars/480/${identifier}`;\n};\n\n/**\n * Checks if the number is within the range.\n * @param {number} num The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @return {boolean} Whether the number is within the range.\n */\nexport const isInRange = (num: number, start: number, end: number): boolean =>\n  end >= start && num >= start && num <= end;\n\n/**\n * Type for custom animation state hook.\n */\nexport type AnimationStateHook = [\n  number,\n  () => void,\n  Dispatch<number>,\n  Dispatch<number>,\n];\n\n/**\n * Type for show overlay state hook.\n */\nexport type ShowOverlayHook = [boolean, Dispatch<boolean>];\n\n/**\n * Type for void function.\n */\nexport type VoidFunction = () => void;\n\n/**\n * Runs the given action at least after the given delay.\n * @param {Function} action The action to run.\n * @param {number} delay The minimum delay to wait for.\n */\nexport const runOnDelay = (action: Function, delay: number): VoidFunction => {\n  const delayId: number = setTimeout(action, delay);\n  return () => clearTimeout(delayId);\n};\n\n/**\n * Create an animation state hook.\n * @return {AnimationStateHook} The current animation state, a state update method, and a delayed state update method.\n */\nexport const useAnimationState = (start: number = 0): AnimationStateHook => {\n  const [currentState, setState]: [number, Dispatch<number>] = useState(start);\n\n  const updateState = (): void => setState(currentState + 1);\n  const updateStateDelay = (delay: number): VoidFunction =>\n    runOnDelay(updateState, delay);\n\n  return [currentState, updateState, updateStateDelay, setState];\n};\n\n/**\n * Normalize the given animation time by the animation speed multiplier.\n * @param {number} time The animation time to normalize.\n * @return {number} The normalized animation speed\n */\nexport const getNormalizedSpeed = (time: number): number =>\n  time / Config.getInstance().speed;\n\n/**\n * Returns function that runs the given action if the provided predicate is true.\n * @param {boolean} predicate The predicate to check.\n * @param {Function} action The action to run.\n */\nexport const runOnPredicate = (\n  predicate: boolean,\n  action: Function,\n): VoidFunction | (() => VoidFunction) => (): void | VoidFunction =>\n  predicate ? action() : undefined;\n\n/**\n * Returns a redirect component for a given round and match.\n * @param {string} roundId The ID of the round to redirect to.\n * @param {string} matchId The ID of the match to redirect to.\n * @return {JSX.Element} The redirect element.\n */\nexport const getMatchRedirect = (roundId?: string, matchId?: string) => (\n  <Redirect to={`/round/${roundId}/match/${matchId}`} />\n);\n\n/**\n * Returns a HOC with the given component wrapped by a MobX Observer component.\n * @param {ComponentType<T>} Component The component that should be under an observer.\n * @returns {(props: T) => JSX.Element} A HOC that wraps the given component under an observer.\n */\nexport const createObserver = <T extends {}>(\n  Component: ComponentType<T>,\n): ((props: T) => JSX.Element) => (props: T): JSX.Element => (\n  <Observer>{() => <Component {...props} />}</Observer>\n);\n","import { isDevEnvironment } from \"../../util\"\nimport i18next from \"i18next\"\nimport EnTranslation from \"../../i18n/en/translation.json\"\n\n// Update this to include all translation resources.\nconst defaultLanguage: string = \"en\"\nconst fallbackLanguage: string = \"en\"\nconst resources: i18next.Resource = {\n  en: {\n    translation: EnTranslation,\n  },\n}\n\n// Don't modify anything from this point\nexport default {\n  resources,\n  lng: defaultLanguage,\n  fallbackLng: fallbackLanguage,\n  debug: isDevEnvironment,\n  interpolation: {\n    escapeValue: false,\n  },\n  react: {\n    wait: true,\n  },\n}\n","import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport ConfigJson from \"./config/config.json\";\nimport i18nConfig from \"./store/config/i18n\";\n\n// No need to modify anything from this point.\nconst configLanguages: string[] = ConfigJson.lang;\nconst resourceLanguages: string[] = Object.keys(i18nConfig.resources);\nresourceLanguages\n  .filter(\n    (language: string): boolean => configLanguages.indexOf(language) === -1,\n  )\n  .forEach(\n    (language: string): void => {\n      throw new Error(`Language \"${language}\" is not added in config.`);\n    },\n  );\nconfigLanguages\n  .filter(\n    (language: string): boolean => resourceLanguages.indexOf(language) === -1,\n  )\n  .forEach(\n    (language: string): void => {\n      throw new Error(`Language \"${language}\" is not added in resources.`);\n    },\n  );\n\ni18n\n  .use(detector)\n  .use(initReactI18next)\n  .init(i18nConfig);\n\nexport default i18n;\n","import ParticipantAvatarView from \"./ParticipantAvatarView.react\";\n\nexport default ParticipantAvatarView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the participant avatar React component.\n */\nexport interface ParticipantAvatarViewProps {\n  /** CSS class */\n  className: string;\n  /** The participant details. */\n  participant: Participant;\n}\n\n/**\n * Function that returns a React component for the participant avatar.\n */\nexport default (props: ParticipantAvatarViewProps): JSX.Element | null => {\n  if (props.participant.avatar === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(`${props.className}__avatar`)}>\n      <img\n        src={props.participant.avatar.url}\n        alt={props.participant.avatar.altText}\n      />\n    </div>\n  );\n};\n","import ParticipantNameView from \"./ParticipantNameView.react\";\n\nexport default ParticipantNameView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the participant name React component.\n */\nexport interface ParticipantNameViewProps {\n  /** CSS class */\n  className: string;\n  /** The participant details. */\n  participant: Participant;\n}\n\n/**\n * Function that returns a React component for the participant name.\n */\nexport default (props: ParticipantNameViewProps): JSX.Element => (\n  <div className={classNames(`${props.className}__name`)}>\n    <strong>{props.participant.properName}</strong>\n  </div>\n);\n","import ParticipantView from \"./index.react\";\n\nexport default ParticipantView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\nimport ParticipantAvatarView from \"./_partial/ParticipantAvatarView\";\nimport ParticipantNameView from \"./_partial/ParticipantNameView\";\n\n/**\n * Properties of the participant view React component.\n */\nexport interface ParticipantViewProps {\n  /** The participant details. */\n  participant: Participant;\n  /** Whether to invert the color of the participant view or not. */\n  invert?: boolean;\n}\n\n/**\n * Function that returns a React component for the participant view.\n */\nexport default (className: string) => (\n  props: ParticipantViewProps,\n): JSX.Element => {\n  const rootClassName: string = \"participant\";\n\n  return (\n    <div\n      className={classNames(rootClassName, className, {\n        [`${rootClassName}--invert`]: props.invert,\n      })}\n    >\n      <ParticipantAvatarView className={className} {...props} />\n      <ParticipantNameView className={className} {...props} />\n    </div>\n  );\n};\n","import \"./ParticipantEntry.scss\";\nimport createParticipantView from \"../common\";\n\n/**\n * A entry-style participant view React component\n */\nexport default createParticipantView(\"participant-entry\");\n","import MatchWinnerView from \"./MatchWinnerView.react\";\n\nexport default MatchWinnerView;\n","import React, { useEffect } from \"react\";\nimport \"./MatchWinnerView.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\nimport { getNormalizedSpeed } from \"../../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../../../util\";\n\n/**\n * Properties of the match winner view React component.\n */\nexport interface MatchWinnerViewProps {\n  /** CSS class */\n  className: string;\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** The details of the match winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the match winner view.\n */\nexport default (props: MatchWinnerViewProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0}\n      timeout={getNormalizedSpeed(200)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__winner--entering`,\n        enterDone: `${props.className}__winner--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__winner--exiting`,\n        exitDone: `${props.className}__winner--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(`${props.className}__winner`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(200)}ms ease-in-out`,\n        }}\n      >\n        <ParticipantEntry participant={props.winner} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import MatchFinalEntry from \"./MatchFinalEntry.react\";\n\n/**\n * React component for the match final entry.\n */\nexport default MatchFinalEntry;\n","import React, { useEffect, Fragment } from \"react\";\nimport \"./MatchFinalEntry.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\nimport { getNormalizedSpeed, isInRange } from \"../../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../../../util\";\nimport Match from \"../../../../store/round/match/Match\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport MatchWinnerView from \"./MatchWinnerView\";\n\n/**\n * Properties of the match final entry React component.\n */\nexport interface MatchFinalEntryProps {\n  /** CSS class */\n  className: string;\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** Whether it is an actual match. */\n  isActualMatch: boolean;\n  /** The details of the current match. */\n  match: Match;\n}\n\n/**\n * React component for the match final entry.\n */\nexport default (props: MatchFinalEntryProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n    setState,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate((currentState + 1) % 3 === 0, () =>\n      updateStateDelay(getNormalizedSpeed(200)),\n    ),\n  );\n  useEffect(\n    runOnPredicate(\n      currentState === props.match.participants.length * 3 + 1,\n      () => setState(1),\n    ),\n  );\n\n  return (\n    <Fragment>\n      {props.isCurrentMatch && props.isActualMatch ? (\n        props.match.participants.map(\n          (participant: Participant, index: number): JSX.Element => (\n            <CSSTransition\n              key={participant.id}\n              in={isInRange(currentState, index * 3 + 1, index * 3 + 2)}\n              timeout={getNormalizedSpeed(200)}\n              classNames={{\n                enter: \"\",\n                enterActive: `${props.className}__interim--entering`,\n                enterDone: `${props.className}__interim--entered`,\n                exit: \"\",\n                exitActive: `${props.className}__interim--exiting`,\n                exitDone: `${props.className}__interim--exited`,\n              }}\n              mountOnEnter={true}\n              unmountOnExit={true}\n              onEntered={updateState}\n              onExited={updateState}\n            >\n              <div\n                className={classNames(`${props.className}__interim`)}\n                style={{\n                  transition: `opacity ${getNormalizedSpeed(\n                    200,\n                  )}ms ease-in-out`,\n                }}\n              >\n                <ParticipantEntry participant={participant} />\n              </div>\n            </CSSTransition>\n          ),\n        )\n      ) : (\n        <MatchWinnerView\n          className={props.className}\n          isCurrentMatch={props.isCurrentMatch}\n          winner={props.match.winner}\n        />\n      )}\n    </Fragment>\n  );\n};\n","import MatchParticipantList from \"./MatchParticipantList.react\";\n\n/**\n * React component for the match participant list.\n */\nexport default MatchParticipantList;\n","import React from \"react\";\nimport \"./MatchParticipantList.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../store/round/match/Match\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\n\n/**\n * Properties of the match participant list React component.\n */\nexport interface MatchParticipantListProps {\n  /** CSS class */\n  className: string;\n  /** The details of the current match. */\n  match: Match;\n}\n\n/**\n * React component for the match participant list.\n */\nexport default (props: MatchParticipantListProps): JSX.Element => (\n  <div className={classNames(`${props.className}__list`)}>\n    {props.match.participants.map(\n      (participant: Participant): JSX.Element => (\n        <ParticipantEntry key={participant.id} participant={participant} />\n      ),\n    )}\n  </div>\n);\n","import React, { useEffect, useState } from \"react\";\nimport \"./MatchOverlayWinner.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../../participant/entry/ParticipantEntry\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  runOnDelay,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  isInRange,\n} from \"../../../../../util/index\";\nimport { RouteComponentProps } from \"react-router\";\nimport Match from \"../../../../../store/round/match/Match\";\nimport {\n  Trans,\n  useTranslation,\n  UseTranslationResponse,\n  WithTranslation,\n} from \"react-i18next\";\nimport Config from \"../../../../../store/config/Config\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the match overlay winner React component.\n */\nexport interface MatchOverlayWinnerProps\n  extends RouteComponentProps,\n    WithTranslation {\n  /** @ignore The application config. */\n  config?: Config;\n  /** CSS class */\n  className: string;\n  /** The current match details. */\n  currentMatch: Match;\n  /** Whether to show the winner or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the winner. */\n  onWinnerComplete: () => void;\n}\n\nconst STOP_QUERY_FLAG: string = \"stop\";\n\n/**\n * React component for the match overlay winner.\n */\nexport default (props: MatchOverlayWinnerProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const [hidden, setHidden]: [boolean, (hidden: boolean) => void] = useState(\n    document.hidden,\n  );\n  const shouldNotStopOnEnd: boolean = !new URLSearchParams(\n    props.location.search,\n  ).has(STOP_QUERY_FLAG);\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  useEffect(() => {\n    console.log(document.hidden);\n    const updateHidden = () => {\n      console.log(document.hidden);\n      setHidden(document.hidden);\n    };\n    document.addEventListener(\"visibilitychange\", updateHidden);\n    return () => document.removeEventListener(\"visibilitychange\", updateHidden);\n  });\n\n  const { t }: UseTranslationResponse = useTranslation();\n  const translatedMessagesList: string = t(\"matchOverlay.messages\", {\n    returnObjects: true,\n    count: props.currentMatch.losers.length,\n  });\n  let matchMessage: string = props.currentMatch.message;\n\n  const messageIndex: number = props.config!.getMessageIndex(\n    props.currentMatch.message,\n  );\n  if (\n    messageIndex !== -1 &&\n    Array.isArray(translatedMessagesList) &&\n    isInRange(messageIndex, 0, translatedMessagesList.length - 1)\n  ) {\n    matchMessage = translatedMessagesList[messageIndex];\n  }\n\n  const winnerName: string = props.currentMatch.winner.properName;\n  const loserNames: string[] = props.currentMatch.losers.map(\n    (loser: Participant): string => loser.properName,\n  );\n\n  useEffect(\n    runOnPredicate(currentState === 2 && shouldNotStopOnEnd && !hidden, () =>\n      runOnDelay(() => {\n        props.onWinnerComplete();\n      }, getNormalizedSpeed(4000)),\n    ),\n  );\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__winner--entering`,\n        enterDone: `${props.className}__winner--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__winner--exiting`,\n        exitDone: `${props.className}__winner--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n    >\n      <div\n        className={classNames(`${props.className}__winner`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <Trans i18nKey=\"matchOverlay.winnerTitle\">\n          <ParticipantEntry participant={props.currentMatch.winner} />\n          <h3>Won The Match!</h3>\n        </Trans>\n        <h5>\n          <strong>\n            <em>\n              {props.config!.getFormattedMessage(\n                matchMessage,\n                winnerName,\n                loserNames,\n              )}\n            </em>\n          </strong>\n        </h5>\n      </div>\n    </CSSTransition>\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withRouter } from \"react-router\";\nimport { withTranslation } from \"react-i18next\";\nimport MatchOverlayWinner from \"./MatchOverlayWinner.react\";\nimport { createObserver } from \"../../../../../util\";\n\n/**\n * React component for the match overlay winner.\n */\nexport default inject(\"config\")(\n  withTranslation()(withRouter(createObserver(MatchOverlayWinner))),\n);\n","import MatchOverlayInterim from \"./MatchOverlayInterim.react\";\nimport { withTranslation } from \"react-i18next\";\nimport { createObserver } from \"../../../../../util\";\n\n/**\n * React component for the match overlay interim.\n */\nexport default withTranslation()(createObserver(MatchOverlayInterim));\n","import React, { useEffect } from \"react\";\nimport \"./MatchOverlayInterim.scss\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  isInRange,\n} from \"../../../../../util/index\";\nimport { ClipLoader } from \"react-spinners\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the match overlay interim React component.\n */\nexport interface MatchOverlayInterimProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** Whether to show the interim text or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the interim text. */\n  onInterimComplete: () => void;\n}\n\n/**\n * React component for the match overlay interim.\n */\nexport default (props: MatchOverlayInterimProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(currentState === 2, () =>\n      updateStateDelay(getNormalizedSpeed(4000)),\n    ),\n    [currentState],\n  );\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__interim--entering`,\n        enterDone: `${props.className}__interim--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__interim--exiting`,\n        exitDone: `${props.className}__interim--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n      onExited={props.onInterimComplete}\n    >\n      <div\n        className={classNames(`${props.className}__interim`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <h3>\n          <Trans i18nKey=\"matchOverlay.interimText\">Selecting Winner</Trans>\n        </h3>\n        <ClipLoader sizeUnit={\"rem\"} size={3} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import \"./ParticipantCard.scss\";\nimport createParticipantView from \"../common\";\n\n/**\n * A card-style participant view React component\n */\nexport default createParticipantView(\"participant-card\");\n","import { withTranslation } from \"react-i18next\";\nimport MatchOverlayParticipants from \"./MatchOverlayParticipants.react\";\n\n/**\n * React component for the match overlay participants.\n */\nexport default withTranslation()(MatchOverlayParticipants);\n","import React from \"react\";\nimport \"./MatchOverlayParticipants.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../../store/round/match/Match\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../participant/card/ParticipantCard\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the match overlay participants React component.\n */\nexport interface MatchOverlayParticipantsProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The current match details. */\n  currentMatch: Match;\n}\n\n/**\n * React component for the match overlay participants.\n */\nexport default (props: MatchOverlayParticipantsProps): JSX.Element => (\n  <div className={classNames(`${props.className}__list`)}>\n    {props.currentMatch.participants\n      .flatMap(\n        (participant: Participant): [JSX.Element, JSX.Element] => [\n          <div key={participant.id}>\n            <ParticipantCard invert={true} participant={participant} />\n          </div>,\n          <h3\n            className={classNames(\"versus-text\")}\n            key={`${participant.id} versus`}\n          >\n            <Trans\n              i18nKey=\"matchOverlay.versus\"\n              count={props.currentMatch.participants.length}\n            >\n              VS\n            </Trans>\n          </h3>,\n        ],\n      )\n      .slice(0, -1)}\n  </div>\n);\n","import MatchOverlay from \"./MatchOverlay.react\";\nimport { createObserver } from \"../../../../util\";\n\n/**\n * React component for the match overlay.\n */\nexport default createObserver(MatchOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./MatchOverlay.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../store/round/match/Match\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  isInRange,\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../../util/index\";\nimport MatchOverlayWinner from \"./_partial/MatchOverlayWinner\";\nimport MatchOverlayInterim from \"./_partial/MatchOverlayInterim\";\nimport MatchOverlayParticipants from \"./_partial/MatchOverlayParticipants\";\n\n/**\n * Properties of the match overlay React component.\n */\nexport interface MatchOverlayProps {\n  /** The match details. */\n  currentMatch: Match;\n  /** Whether to show the match overlay or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the match. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the match overlay.\n */\nexport default (props: MatchOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"match-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0 && props.show, updateState));\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onExited={props.onOverlayComplete}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <div className={classNames(className)}>\n          <MatchOverlayParticipants\n            className={className}\n            currentMatch={props.currentMatch}\n          />\n          <MatchOverlayInterim\n            className={className}\n            show={currentState === 1}\n            onInterimComplete={updateState}\n          />\n          <MatchOverlayWinner\n            currentMatch={props.currentMatch}\n            className={className}\n            show={currentState === 2}\n            onWinnerComplete={updateState}\n          />\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n","import { createObserver } from \"../../../util\";\nimport MatchView from \"./MatchView.react\";\n\nexport default createObserver(MatchView);\n","import React, { useEffect, useRef, MutableRefObject } from \"react\";\nimport \"./MatchView.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../store/round/match/Match\";\nimport {\n  getNormalizedSpeed,\n  runOnDelay,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport MatchFinalEntry from \"./_partial/MatchFinalEntry\";\nimport MatchParticipantList from \"./_partial/MatchParticipantList\";\nimport MatchOverlay from \"./overlay/MatchOverlay\";\n\n/**\n * Properties of the match view React component.\n */\nexport interface MatchViewProps {\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** The details of the current match. */\n  match: Match;\n  /** Action to call when the view has finished showing the match. */\n  onMatchComplete: () => void;\n}\n\n/**\n * React component for the match view.\n */\nexport default (props: MatchViewProps): JSX.Element | null => {\n  if (props.match === undefined) {\n    return null;\n  }\n\n  const className: string = \"match\";\n  const isActualMatch: boolean = props.match.participants.length > 1;\n\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n    setState,\n  ]: AnimationStateHook = useAnimationState(props.isCurrentMatch ? 0 : 3);\n\n  const onMatchComplete = () => {\n    setState(3);\n    runOnPredicate(props.isCurrentMatch, () =>\n      runOnDelay(() => props.onMatchComplete(), getNormalizedSpeed(1000)),\n    )();\n  };\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(\n      currentState === 1 && isActualMatch && props.isCurrentMatch,\n      () => updateStateDelay(getNormalizedSpeed(200)),\n    ),\n  );\n  useEffect(\n    runOnPredicate(currentState === 1 && !isActualMatch, onMatchComplete),\n  );\n\n  const matchRef: MutableRefObject<HTMLDivElement> = useRef(null as any);\n\n  return (\n    <CSSTransition\n      in={currentState > 0}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}--entering`,\n        enterDone: `${className}--entered`,\n        exit: \"\",\n        exitActive: `${className}--exiting`,\n        exitDone: `${className}--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntering={() =>\n        matchRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"nearest\",\n          inline: \"center\",\n        })\n      }\n      onExited={props.onMatchComplete}\n    >\n      <div\n        ref={matchRef}\n        className={classNames(className, {\n          [`${className}--completed`]: !props.isCurrentMatch,\n        })}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <MatchParticipantList className={className} match={props.match} />\n        <MatchFinalEntry\n          className={className}\n          isCurrentMatch={props.isCurrentMatch && currentState < 3}\n          isActualMatch={isActualMatch}\n          match={props.match}\n        />\n        <MatchOverlay\n          currentMatch={props.match}\n          show={currentState === 2 && props.isCurrentMatch}\n          onOverlayComplete={onMatchComplete}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import RoundMatchListView from \"./RoundMatchListView.react\";\n\nexport default RoundMatchListView;\n","import React from \"react\";\nimport { Observer } from \"mobx-react\";\nimport \"./RoundMatchListView.scss\";\nimport classNames from \"classnames\";\nimport Round from \"../../../store/round/Round\";\nimport Match from \"../../../store/round/match/Match\";\nimport MatchView from \"../match/MatchView\";\n\n/**\n * Properties of the round match list view React component.\n */\nexport interface RoundMatchListViewProps {\n  /** CSS class */\n  className: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round;\n  /** Action to call when the current match is completed. */\n  onCurrentMatchComplete: () => void;\n}\n\n/**\n * React component for the round match list view.\n */\nexport default (props: RoundMatchListViewProps): JSX.Element => {\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n\n  return (\n    <Observer>\n      {() => (\n        <div className={classNames(`${props.className}__list`)}>\n          {props.round.matches\n            .filter(\n              (_: Match, index: number): boolean => index <= currentMatchIndex,\n            )\n            .map(\n              (match: Match): JSX.Element => (\n                <MatchView\n                  key={match.fullId}\n                  match={match}\n                  isCurrentMatch={match.id === props.matchId}\n                  onMatchComplete={props.onCurrentMatchComplete}\n                />\n              ),\n            )}\n        </div>\n      )}\n    </Observer>\n  );\n};\n","import { withTranslation } from \"react-i18next\";\nimport RoundTitle from \"./RoundTitle.react\";\n/**\n * React component for the round title.\n */\nexport default withTranslation()(RoundTitle);\n","import React from \"react\";\nimport \"./RoundTitle.scss\";\nimport Round from \"../../../store/round/Round\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the round title React component.\n */\nexport interface RoundTitleProps extends WithTranslation {\n  /** The details of the current round. */\n  round: Round;\n}\n\n/**\n * React component for the round title.\n */\nexport default (props: RoundTitleProps): JSX.Element => {\n  const roundId: string = props.round.id;\n  return (\n    <h2>\n      <Trans i18nKey=\"roundView.title\">Round {{ roundId }}</Trans>\n    </h2>\n  );\n};\n","import { createObserver } from \"../../../util\";\nimport RoundDetails from \"./RoundDetails.react\";\n\nexport default createObserver(RoundDetails);\n","import React, { useEffect } from \"react\";\nimport \"./RoundDetails.scss\";\nimport classNames from \"classnames\";\nimport Round from \"../../../store/round/Round\";\nimport Match from \"../../../store/round/match/Match\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport RoundMatchListView from \"./RoundMatchListView\";\nimport RoundTitle from \"./RoundTitle\";\n\n/**\n * Properties of the round details React component.\n */\nexport interface RoundDetailsProps {\n  /** CSS class */\n  className: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round;\n  /** Whether to show the round details or not. */\n  show: boolean;\n  /** Action to call when the current match is completed. */\n  onCurrentComplete: () => void;\n}\n\n/**\n * React component for the round details.\n */\nexport default (props: RoundDetailsProps): JSX.Element => {\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n  const [currentState, updateState]: AnimationStateHook = useAnimationState(\n    currentMatchIndex,\n  );\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && currentMatchIndex !== -1 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}--entering`,\n        enterDone: `${props.className}--entered`,\n        exit: \"\",\n        exitActive: `${props.className}--exiting`,\n        exitDone: `${props.className}--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(props.className)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <RoundTitle round={props.round} />\n        <RoundMatchListView\n          key={`${props.round.id}:${props.matchId}`}\n          className={props.className}\n          round={props.round}\n          matchId={props.matchId}\n          onCurrentMatchComplete={props.onCurrentComplete}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import React, { useEffect, Fragment } from \"react\";\nimport \"./RoundView.scss\";\nimport Round from \"../../store/round/Round\";\nimport Match from \"../../store/round/match/Match\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  runOnDelay,\n  getNormalizedSpeed,\n  getMatchRedirect,\n} from \"../../util/index\";\nimport RoundDetails from \"./_partial/RoundDetails\";\nimport { CSSTransition } from \"react-transition-group\";\n\n/**\n * Properties of the round view React component.\n */\nexport interface RoundViewProps {\n  /** Whether to show the round or not. */\n  show: boolean;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round | undefined;\n  /** Action to call when the view has finished showing the round. */\n  onRoundComplete: () => void;\n}\n\n/**\n * Returns a redirect to the given round and match if required.\n * @param {boolean} required Whether the redirect is required or not.\n * @param {Round} round The details of the round.\n * @param {number} matchIndex The index of the match to redirect to.\n * @return {JSX.Element | null} The redirect if it is required, or null if it is not.\n */\nexport const getRoundRedirectIfRequired = (\n  required: boolean = false,\n  round: Round,\n  matchIndex: number,\n): JSX.Element | null =>\n  required ? getMatchRedirect(round.id, round.matches[matchIndex].id) : null;\n\n/**\n * React component for the round view.\n */\nexport default (props: RoundViewProps): JSX.Element | null => {\n  if (props.round === undefined) {\n    return null;\n  }\n\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n  const className: string = \"round\";\n\n  const [\n    currentState,\n    updateState,\n    ,\n    setState,\n  ]: AnimationStateHook = useAnimationState(currentMatchIndex);\n  const shouldNextRedirect: boolean =\n    currentState > 0 &&\n    currentMatchIndex !== currentState &&\n    currentMatchIndex !== -1 &&\n    currentState < props.round.matches.length;\n\n  useEffect(\n    runOnPredicate(currentState === props.round.matches.length, () =>\n      runOnDelay(props.onRoundComplete, getNormalizedSpeed(500)),\n    ),\n    [currentState],\n  );\n\n  useEffect(() => setState(currentMatchIndex), [currentMatchIndex, props.matchId, setState]);\n\n  return (\n    <CSSTransition\n      in={props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: \"round--entering\",\n        enterDone: \"round--entered\",\n        exit: \"\",\n        exitActive: \"round--exiting\",\n        exitDone: \"round--exited\",\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <Fragment>\n        <RoundDetails\n          className={className}\n          round={props.round}\n          show={currentState !== props.round.matches.length}\n          matchId={props.matchId}\n          onCurrentComplete={updateState}\n        />\n        {getRoundRedirectIfRequired(currentMatchIndex === -1, props.round, 0)}\n        {getRoundRedirectIfRequired(\n          shouldNextRedirect,\n          props.round,\n          currentState,\n        )}\n      </Fragment>\n    </CSSTransition>\n  );\n};\n","import { createObserver } from \"../../util\";\nimport RoundView from \"./RoundView.react\";\n\nexport default createObserver(RoundView);\n","import { withTranslation } from \"react-i18next\";\nimport WinnerInfo from \"./WinnerInfo.react\";\n\nexport default withTranslation()(WinnerInfo);\n","import React from \"react\";\nimport \"./WinnerInfo.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../round/match/participant/card/ParticipantCard\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the winner info React component.\n */\nexport interface WinnerInfoProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner info.\n */\nexport default (props: WinnerInfoProps): JSX.Element => (\n  <div className={classNames(`${props.className}__winner`)}>\n    <Trans i18nKey=\"winnerOverlay.message\">\n      <ParticipantCard participant={props.winner} />\n      <h3>Won The Tournament!</h3>\n    </Trans>\n  </div>\n);\n","import WinnerOverlayView from \"./WinnerOverlayView.react\";\n\nexport default WinnerOverlayView;\n","import React from \"react\";\nimport \"./WinnerOverlayView.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport WinnerInfo from \"./WinnerInfo\";\n\n/**\n * Properties of the winner overlay main view React component.\n */\nexport interface WinnerOverlayViewProps {\n  /** CSS class */\n  className: string;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner overlay main view wrapper.\n */\nexport default (props: WinnerOverlayViewProps): JSX.Element => (\n  <div className={classNames(props.className)}>\n    <WinnerInfo {...props} />\n  </div>\n);\n","import WinnerOverlay from \"./WinnerOverlay.react\";\nimport { createObserver } from \"../../util\";\n\nexport default createObserver(WinnerOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./WinnerOverlay.scss\";\nimport Participant from \"../../store/round/match/participant/Participant\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  getNormalizedSpeed,\n  runOnPredicate,\n} from \"../../util\";\nimport WinnerOverlayView from \"./_partial/WinnerOverlayView\";\n\n/**\n * Properties of the winner overlay React component.\n */\nexport interface WinnerOverlayProps {\n  /** Whether to show the overlay or not. */\n  show: boolean;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner overlay.\n */\nexport default (props: WinnerOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"winner-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <WinnerOverlayView className={className} winner={props.winner} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import { observer, inject } from \"mobx-react\";\nimport SpeedOption from \"./SpeedOption.react\";\n\n/**\n * React component for the animation speed option.\n */\nexport default inject(\"config\")(observer(SpeedOption));\n","import React from \"react\";\nimport \"./SpeedOption.scss\";\nimport classNames from \"classnames\";\nimport Config from \"../../../store/config/Config\";\n\n/**\n * Properties of the animation speed option React component.\n */\nexport interface SpeedOptionProps {\n  /** CSS class */\n  className: string;\n  /** @ignore The application config. */\n  config?: Config;\n  /** The animation speed option value. */\n  speed: number;\n}\n\n/**\n * React component for the animation speed option.\n */\nexport default (props: SpeedOptionProps): JSX.Element => (\n  <button\n    key={props.speed}\n    className={classNames(`${props.className}__option`, {\n      \"button-primary\": props.speed === props.config!.speed,\n    })}\n    onClick={() => props.config!.setSpeed(props.speed)}\n  >\n    {`${props.speed}x`}\n  </button>\n);\n","import React from \"react\";\nimport \"./SpeedControl.scss\";\nimport classNames from \"classnames\";\nimport AnimationSpeed from \"../../store/config/AnimationSpeed\";\nimport SpeedOption from \"./_partial/SpeedOption\";\n\nconst allAnimationValues = AnimationSpeed.getValues();\n\n/**\n * React component for the animation speed controller.\n */\nexport default (props: {}): JSX.Element => {\n  const className: string = \"speed-control\";\n\n  return (\n    <div className={classNames(className)}>\n      {allAnimationValues.map(\n        (speed: number): JSX.Element => (\n          <SpeedOption\n            className={className}\n            key={`${speed}-speed`}\n            speed={speed}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import SpeedControl from \"./SpeedControl.react\";\n\nexport default SpeedControl;\n","import AppDevTools from \"./AppDevTools.react\";\n\nexport default AppDevTools;\n","import React, { Fragment } from \"react\";\nimport { isDevEnvironment } from \"../../util\";\nimport DevTools from \"mobx-react-devtools\";\n\n/**\n * React component for the tournament application devtools.\n */\nexport default (): JSX.Element | null =>\n  isDevEnvironment ? (\n    <Fragment>\n      <DevTools />\n    </Fragment>\n  ) : null;\n","import { createObserver } from \"../../../util\";\nimport LoserInfo from \"./LoserInfo.react\";\n\nexport default createObserver(LoserInfo);\n","import React, { useEffect } from \"react\";\nimport \"./LoserInfo.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../round/match/participant/card/ParticipantCard\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  getNormalizedSpeed,\n  runOnPredicate,\n  isInRange,\n} from \"../../../util\";\n\n/**\n * Properties of the loser info React component.\n */\nexport interface LoserInfoProps {\n  /** CSS class */\n  className: string;\n  /** The loser details. */\n  loser: Participant;\n  /** Whether to show the entry or not. */\n  show: boolean;\n  /** Action to call when the info has finished showing the list of losers. */\n  onInfoComplete: () => void;\n}\n\n/**\n * React component for the loser info.\n */\nexport default (props: LoserInfoProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(currentState === 2, () =>\n      updateStateDelay(getNormalizedSpeed(1000)),\n    ),\n    [currentState],\n  );\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(200)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__loser--entering`,\n        enterDone: `${props.className}__loser--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__loser--exiting`,\n        exitDone: `${props.className}__loser--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n      onExited={props.onInfoComplete}\n    >\n      <div\n        className={classNames(`${props.className}__loser`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(200)}ms ease-in-out`,\n        }}\n      >\n        <ParticipantCard participant={props.loser} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import { withTranslation } from \"react-i18next\";\nimport LoserOverlayView from \"./LoserOverlayView.react\";\n\nexport default withTranslation()(LoserOverlayView);\n","import React, { useEffect } from \"react\";\nimport \"./LoserOverlayView.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport LoserInfo from \"./LoserInfo\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the loser overlay view React component.\n */\nexport interface LoserOverlayViewProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The losers of a round. */\n  losers: Participant[];\n  /** Action to call when the overlay has finished showing the list of losers. */\n  onViewComplete: () => void;\n}\n\n/**\n * React component for the loser overlay view.\n */\nexport default (props: LoserOverlayViewProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n\n  useEffect(\n    runOnPredicate(currentState === props.losers.length, props.onViewComplete),\n  );\n\n  return (\n    <div className={classNames(props.className)}>\n      <h2>\n        <Trans i18nKey=\"loserOverlay.title\" count={props.losers.length}>\n          Losers\n        </Trans>\n      </h2>\n      {props.losers.map(\n        (loser: Participant, index: number): JSX.Element => (\n          <LoserInfo\n            key={loser.name}\n            className={props.className}\n            show={currentState === index}\n            loser={loser}\n            onInfoComplete={updateState}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import { createObserver } from \"../../util\";\nimport LoserOverlay from \"./LoserOverlay.react\";\n\nexport default createObserver(LoserOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./LoserOverlay.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../store/round/match/participant/Participant\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../util/index\";\nimport LoserOverlayView from \"./_partial/LoserOverlayView\";\n\n/**\n * Properties of the loser overlay React component.\n */\nexport interface LoserOverlayProps {\n  /** The losers of a round. */\n  losers: Participant[];\n  /** Action to call when the overlay has finished showing the list of losers. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the loser overlay.\n */\nexport default (props: LoserOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"loser-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState === 1}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onExited={props.onOverlayComplete}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <LoserOverlayView\n          losers={props.losers}\n          className={className}\n          onViewComplete={updateState}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import LoserOverlayView from \"./LoserOverlayView.react\";\n\nexport default LoserOverlayView;\n","import React from \"react\";\nimport Round from \"../../store/round/Round\";\nimport LoserOverlay from \"../loser-overlay/LoserOverlay\";\n\n/**\n * Properties of the tournament loser overlay view React component.\n */\nexport interface LoserOverlayViewProps {\n  /** The details of the current round. */\n  round: Round;\n  /** Whether to show the loser overlay or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the losers. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the loser overlay view.\n */\nexport default (props: LoserOverlayViewProps): JSX.Element | null => {\n  return props.show ? (\n    <LoserOverlay\n      losers={props.round.losers}\n      onOverlayComplete={props.onOverlayComplete}\n    />\n  ) : null;\n};\n","import React from \"react\";\nimport \"./TournamentTitle.scss\";\nimport {\n  Trans,\n  useTranslation,\n  UseTranslationResponse,\n  WithTranslation,\n} from \"react-i18next\";\nimport Config from \"../../store/config/Config\";\nconst isString = require(\"is-string\");\n\n/**\n * Properties of the tournament title React component.\n */\nexport interface TournamentTitleProps extends WithTranslation {\n  /** @ignore The application config. */\n  config?: Config;\n}\n\n/**\n * React component for the tournament title.\n */\nexport default (props: TournamentTitleProps): JSX.Element => {\n  const { t }: UseTranslationResponse = useTranslation();\n  const translatedTournamentName: string = t(\"tournamentView.name\");\n\n  let tournamentName: string = isString(translatedTournamentName) && !!translatedTournamentName\n    ? translatedTournamentName\n    : props.config!.name;\n\n  return (\n    <h1>\n      <Trans i18nKey=\"tournamentView.title\">\n        {{ tournamentName }} Tournament\n      </Trans>\n    </h1>\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport TournamentTitle from \"./TournamentTitle.react\";\n\n/**\n * React component for the tournament title.\n */\nexport default withTranslation()(inject(\"config\")(TournamentTitle));\n","import { observer, inject } from \"mobx-react\";\nimport LanguageOption from \"./LanguageOption.react\";\n\n/**\n * React component for the language option.\n */\nexport default inject(\"config\")(observer(LanguageOption));\n","import React from \"react\";\nimport \"./LanguageOption.scss\";\nimport classNames from \"classnames\";\nimport Config from \"../../../store/config/Config\";\n\n/**\n * Properties of the language option React component.\n */\nexport interface LanguageOptionProps {\n  /** CSS class */\n  className: string;\n  /** @ignore The application config. */\n  config?: Config;\n  /** The language option value. */\n  language: string;\n}\n\n/**\n * React component for the language option.\n */\nexport default (props: LanguageOptionProps): JSX.Element => (\n  <button\n    key={props.language}\n    className={classNames(`${props.className}__option`, {\n      \"button-primary\": props.language === props.config!.currentLanguage,\n    })}\n    onClick={() => props.config!.setCurrentLanguage(props.language)}\n  >\n    {props.language}\n  </button>\n);\n","import { inject } from \"mobx-react\";\nimport LanguageControl from \"./LanguageControl.react\";\n\n/**\n * React component for the language controller.\n */\nexport default inject(\"config\")(LanguageControl);\n","import React from \"react\";\nimport \"./LanguageControl.scss\";\nimport classNames from \"classnames\";\nimport LanguageOption from \"./_partial/LanguageOption\";\nimport Config from \"../../store/config/Config\";\n\n/**\n * Properties of the language controller React component.\n */\nexport interface LanguageControlProps {\n  /** @ignore The application config. */\n  config?: Config;\n}\n\n/**\n * React component for the language controller.\n */\nexport default (props: LanguageControlProps): JSX.Element => {\n  const className: string = \"language-control\";\n\n  return (\n    <div className={classNames(className)}>\n      {props.config!.languages.map(\n        (language: string): JSX.Element => (\n          <LanguageOption\n            key={`${language}-language`}\n            className={className}\n            language={language}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { WithTranslation } from \"react-i18next\";\nimport ServiceWorkerAlertsConfig from \"../store/config/ServiceWorkerAlertsConfig\";\nconst SweetAlert = require(\"sweetalert2-react\");\n\n/**\n * Properties of the service worker update alert React component.\n */\nexport interface ServiceWorkerUpdateAlertProps extends WithTranslation {\n  /** @ignore The service worker alerts config. */\n  serviceWorkerAlertsConfig?: ServiceWorkerAlertsConfig;\n}\n\n/**\n * React component for the service worker update alert.\n */\nexport default (props: ServiceWorkerUpdateAlertProps): JSX.Element => {\n  const [show, setShow] = useState(true);\n\n  const title: string = props.t(\"serviceWorker.updateMessage.title\");\n  const message: string = props.t(\"serviceWorker.updateMessage.message\");\n\n  return (\n    <SweetAlert.default\n      show={show && props.serviceWorkerAlertsConfig!.updated}\n      type=\"warning\"\n      title={title}\n      text={message}\n      onConfirm={() => {\n        setShow(false);\n        props.serviceWorkerAlertsConfig!.setIsUpdated(false);\n      }}\n    />\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ServiceWorkerUpdateAlert from \"./ServiceWorkerUpdateAlert.react\";\nimport { createObserver } from \"../util\";\n\n/**\n * React component for the service worker add alert.\n */\nexport default withTranslation()(\n  inject(\"serviceWorkerAlertsConfig\")(createObserver(ServiceWorkerUpdateAlert)),\n);\n","import React, { useState } from \"react\";\nimport { WithTranslation } from \"react-i18next\";\nimport ServiceWorkerAlertsConfig from \"../store/config/ServiceWorkerAlertsConfig\";\nconst SweetAlert = require(\"sweetalert2-react\");\n\n/**\n * Properties of the service worker add alert React component.\n */\nexport interface ServiceWorkerAddAlertProps extends WithTranslation {\n  /** @ignore The service worker alerts config. */\n  serviceWorkerAlertsConfig?: ServiceWorkerAlertsConfig;\n}\n\n/**\n * React component for the service worker add alert.\n */\nexport default (props: ServiceWorkerAddAlertProps): JSX.Element => {\n  const [show, setShow] = useState(true);\n\n  const title: string = props.t(\"serviceWorker.offlineMessage.title\");\n  const message: string = props.t(\"serviceWorker.offlineMessage.message\");\n\n  return (\n    <SweetAlert.default\n      show={show && props.serviceWorkerAlertsConfig!.added}\n      type=\"success\"\n      title={title}\n      text={message}\n      onConfirm={() => {\n        setShow(false);\n        props.serviceWorkerAlertsConfig!.setIsAdded(false);\n      }}\n    />\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ServiceWorkerAddAlert from \"./ServiceWorkerAddAlert.react\";\nimport { createObserver } from \"../util\";\n\n/**\n * React component for the service worker add alert.\n */\nexport default withTranslation()(\n  inject(\"serviceWorkerAlertsConfig\")(createObserver(ServiceWorkerAddAlert)),\n);\n","import React, { useState, useEffect } from \"react\";\nimport \"./TournamentView.scss\";\nimport classNames from \"classnames\";\nimport Tournament from \"../store/Tournament\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  ShowOverlayHook,\n  runOnPredicate,\n  getMatchRedirect,\n} from \"../util\";\nimport RoundView from \"./round/RoundView\";\nimport Round from \"../store/round/Round\";\nimport WinnerOverlay from \"./winner-overlay/WinnerOverlay\";\nimport SpeedControl from \"./speed/SpeedControl\";\nimport AppDevTools from \"./_partial/AppDevTools\";\nimport LoserOverlayView from \"./_partial/LoserOverlayView\";\nimport TournamentTitle from \"./_partial/TournamentTitle\";\nimport LanguageControl from \"./language/LanguageControl\";\nimport ServiceWorkerUpdateAlert from \"../service-worker/ServiceWorkerUpdateAlert\";\nimport ServiceWorkerAddAlert from \"../service-worker/ServiceWorkerAddAlert\";\n\n/**\n * Properties of the tournament view React component.\n */\nexport interface TournamentViewProps {\n  /** The ID of the current round. */\n  roundId: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the tournament. */\n  tournament: Tournament;\n}\n\n/**\n * Returns a redirect to the given round and match if required.\n * @param {boolean} required Whether the redirect is required or not.\n * @param {Tournament} tournament The details of the tournament.\n * @param {number} roundIndex The index of the round to redirect to.\n * @param {number} matchIndex The index of the match to redirect to.\n * @return {JSX.Element | null} The redirect if it is required, or null if it is not.\n */\nexport const getRoundRedirectIfRequired = (\n  required: boolean = false,\n  tournament: Tournament,\n  roundIndex: number,\n  matchIndex: number,\n): JSX.Element | null =>\n  required\n    ? getMatchRedirect(\n        tournament.rounds[roundIndex].id,\n        tournament.rounds[roundIndex].matches[matchIndex].id,\n      )\n    : null;\n\n/**\n * React component for the tournament view.\n */\nexport default (props: TournamentViewProps): JSX.Element => {\n  const currentRoundIndex: number = props.tournament.rounds.findIndex(\n    (round: Round): boolean => round.id === props.roundId,\n  );\n  const isLastRound: boolean = props.tournament.lastRound.id === props.roundId;\n\n  const [showOverlay, setShowOverlay]: ShowOverlayHook = useState(\n    false as boolean,\n  );\n\n  const [\n    currentState,\n    updateState,\n    ,\n    setState,\n  ]: AnimationStateHook = useAnimationState();\n  const shouldNextRedirect: boolean =\n    currentState > 0 &&\n    currentRoundIndex + 1 !== currentState &&\n    currentState <= props.tournament.rounds.length;\n\n  useEffect(\n    runOnPredicate(currentState === 0, () => setState(currentRoundIndex + 1)),\n  );\n\n  return (\n    <div\n      key={`round-${currentRoundIndex}`}\n      className={classNames(\"tournament\")}\n    >\n      <TournamentTitle />\n      <RoundView\n        key={`${props.roundId}`}\n        show={currentState === currentRoundIndex + 1}\n        round={props.tournament.rounds[currentRoundIndex]}\n        matchId={props.matchId}\n        onRoundComplete={() => setShowOverlay(true)}\n      />\n      <LoserOverlayView\n        show={showOverlay && !isLastRound}\n        round={props.tournament.rounds[currentRoundIndex]}\n        onOverlayComplete={() => {\n          setShowOverlay(false);\n          updateState();\n        }}\n      />\n      <WinnerOverlay\n        show={showOverlay && isLastRound}\n        winner={props.tournament.winner}\n      />\n      {getRoundRedirectIfRequired(\n        currentRoundIndex === -1,\n        props.tournament,\n        0,\n        0,\n      )}\n      {getRoundRedirectIfRequired(\n        shouldNextRedirect,\n        props.tournament,\n        Math.max(currentRoundIndex, currentState - 1),\n        0,\n      )}\n      <SpeedControl />\n      <LanguageControl />\n      <ServiceWorkerAddAlert />\n      <ServiceWorkerUpdateAlert />\n      <AppDevTools />\n    </div>\n  );\n};\n","import TournamentView from \"./TournamentView.react\";\n\nexport default TournamentView;\n","import React, { Component } from \"react\";\nimport { Switch, Route, RouteComponentProps } from \"react-router\";\nimport { observer } from \"mobx-react\";\nimport Tournament from \"./store/Tournament\";\nimport Round from \"./store/round/Round\";\nimport TournamentView from \"./tournament/TournamentView\";\nimport { getMatchRedirect } from \"./util\";\n\n/**\n * Route related properties of the application redirect React component.\n */\nexport interface AppRedirectProps {\n  /** The ID of the current round. */\n  roundId?: string;\n  /** The ID of the current match. */\n  matchId?: string;\n  /** The ID of the first round of the tournament. */\n  firstRoundId?: string;\n  /** The ID of the first match of the tournament. */\n  firstMatchId?: string;\n}\n\n/**\n * Properties of the application router React component.\n */\nexport interface AppRouterProps extends RouteComponentProps<AppRedirectProps> {\n  /** The details of the tournament. */\n  tournament: Tournament;\n}\n\n/**\n * React component that returns a redirect depending upon what route properties are present.\n */\nconst AppRedirect = (props: AppRedirectProps): JSX.Element =>\n  props.roundId\n    ? getMatchRedirect(props.roundId, props.firstMatchId)\n    : getMatchRedirect(props.firstRoundId, props.firstMatchId);\n\n/**\n * React component for the application router.\n */\n@observer\nexport default class AppRouter extends Component<AppRouterProps> {\n  /**\n   * Returns the route params.\n   * @return {AppRedirectProps} The route params.\n   */\n  private _getParams = (\n    routeProps: RouteComponentProps<AppRedirectProps>,\n  ): AppRedirectProps => routeProps.match.params;\n\n  /**\n   * Returns the route for the application.\n   * @return {JSX.Element} The application route.\n   */\n  private _getApplicationRoute = (): JSX.Element => (\n    <Route\n      exact\n      path=\"/round/:roundId/match/:matchId\"\n      render={this._getTournament}\n    />\n  );\n\n  /**\n   * Returns the main tournament.\n   * @return {JSX.Element} The main tournament.\n   */\n  private _getTournament = (\n    props: RouteComponentProps<AppRedirectProps>,\n  ): JSX.Element => (\n    <TournamentView\n      key={this._getParams(props).roundId as string}\n      tournament={this.props.tournament}\n      roundId={this._getParams(props).roundId as string}\n      matchId={this._getParams(props).matchId as string}\n    />\n  );\n\n  /**\n   * Returns the route for a partial redirect.\n   * @return {JSX.Element} The partial redirect route.\n   */\n  private _getPartialRoute = (): JSX.Element => (\n    <Route exact path=\"/round/:roundId\" render={this._getPartialAppRedirect} />\n  );\n\n  /**\n   * Returns the application redirect for the partial redirect.\n   * @return {JSX.Element} The application redirect.\n   */\n  private _getPartialAppRedirect = (\n    props: RouteComponentProps<AppRedirectProps>,\n  ): JSX.Element =>\n    this._getCurrentRoundDetails(this._getParams(props).roundId as string) ? (\n      <AppRedirect\n        roundId={this._getParams(props).roundId as string}\n        firstMatchId={this._getFirstMatchIdOfCurrentRound(this._getParams(props)\n          .roundId as string)}\n      />\n    ) : (\n      this._getUnknownAppRedirect()\n    );\n\n  /**\n   * Returns the route for an unknown redirect.\n   * @return {JSX.Element} The unknown redirect route.\n   */\n  private _getUnknownRoute = (): JSX.Element => (\n    <Route exact path=\"*\" render={this._getUnknownAppRedirect} />\n  );\n\n  /**\n   * Returns the application redirect for the unknown redirect.\n   * @return {JSX.Element} The application redirect.\n   */\n  private _getUnknownAppRedirect = (): JSX.Element => (\n    <AppRedirect\n      roundId={this._getFirstRoundId()}\n      firstMatchId={this._getFirstMatchIdOfCurrentRound(\n        this._getFirstRoundId(),\n      )}\n    />\n  );\n\n  /**\n   * Returns the ID of the first round.\n   * @return {string} The first round ID.\n   */\n  private _getFirstRoundId = (): string => this.props.tournament.firstRound.id;\n\n  /**\n   * Returns a filter for finding the current round.\n   * @param {string} roundId The ID of the current round.\n   * @return {(round: Round) => boolean} The filter function.\n   */\n  private _getIsCurrentRoundFilter = (\n    roundId: string,\n  ): ((round: Round) => boolean) => (round: Round): boolean =>\n    round.id === roundId;\n\n  /**\n   * Returns the details of the round of the given ID.\n   * @param {string} roundId The ID of the round.\n   * @return {Round} The round details.\n   */\n  private _getCurrentRoundDetails = (roundId: string): Round =>\n    this.props.tournament.rounds.find(\n      this._getIsCurrentRoundFilter(roundId),\n    ) as Round;\n\n  /**\n   * Returns the ID of the first match of the given round.\n   * @param {string} roundId The ID of the round.\n   * @return {string} The first match ID.\n   */\n  private _getFirstMatchIdOfCurrentRound = (roundId: string): string =>\n    this._getCurrentRoundDetails(roundId).firstMatch.id;\n\n  /**\n   * Renders the component.\n   * @return {JSX.Element} The rendered component.\n   */\n  public render = (): JSX.Element => (\n    <Switch>\n      {this._getApplicationRoute()}\n      {this._getPartialRoute()}\n      {this._getUnknownRoute()}\n    </Switch>\n  );\n}\n","import { withRouter } from \"react-router\";\nimport AppRouter from \"./AppRouter.react\";\n\nexport default withRouter(AppRouter);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nlet status = 0;\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        if (status > 0) {\n          return;\n        }\n        ++status;\n\n        const installingWorker =\n          registration.installing || registration.waiting;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (status > 1) {\n            return;\n          }\n          ++status;\n\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n        if (installingWorker.state === \"installed\") {\n          installingWorker.onstatechange(new Event(\"unknown\"));\n        }\n      };\n      if (registration.waiting || registration.installing) {\n        registration.onupdatefound(new Event(\"unknown\"));\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed, action } from \"mobx\";\n\n/**\n * Class representing the basic configuration for the service worker alerts.\n */\nexport default class ServiceWorkerAlertsConfig {\n  /** Whether to show the added message. */\n  @observable private _added: boolean;\n  /** Whether to show the updated message. */\n  @observable private _updated: boolean;\n\n  /** The singleton instance of the class, or null if not yet created. */\n  private static _instance: ServiceWorkerAlertsConfig | null = null;\n\n  private constructor() {\n    this._added = false;\n    this._updated = false;\n  }\n\n  /**\n   * Get an instance of the service worker config, which is a singleton.\n   * @return {ServiceWorkerAlertsConfig} The instance of a service worker config.\n   */\n  public static getInstance(): ServiceWorkerAlertsConfig {\n    return ServiceWorkerAlertsConfig._instance\n      ? ServiceWorkerAlertsConfig._instance\n      : (ServiceWorkerAlertsConfig._instance = new ServiceWorkerAlertsConfig());\n  }\n\n  /**\n   * Get whether the service worker was added.\n   * @return {boolean} Whether the service worker was added or not.\n   */\n  @computed public get added(): boolean {\n    return this._added;\n  }\n\n  /**\n   * Get whether the service worker was updated.\n   * @return {boolean} Whether the service worker was updated or not.\n   */\n  @computed public get updated(): boolean {\n    return this._updated;\n  }\n\n  /**\n   * Set whether the service worker was added.\n   * @param {boolean} value Whether the service worker was added.\n   */\n  @action public setIsAdded(value: boolean): void {\n    this._added = value;\n  }\n\n  /**\n   * Set whether the service worker was updated.\n   * @param {boolean} value Whether the service worker was updated.\n   */\n  @action public setIsUpdated(value: boolean): void {\n    this._updated = value;\n  }\n}\n","import Participant from \"./participant/Participant\";\nimport RandomGenerator from \"../../config/RandomGenerator\";\nimport Config from \"../../config/Config\";\nconst gcd = require(\"gcd\");\n\n/**\n * Class containing details of a match.\n */\nexport default class Match {\n  /** The ID of the match. */\n  private _id: string;\n  /** The ID of the round the match is a part of. */\n  private _roundId: string;\n  /** The list of participants of the match. */\n  private _participants: Participant[];\n  /** The winner of the match. */\n  private _winner: Participant;\n  /** The match conclusion message. */\n  private _message: string;\n  /** The GCD of all participant weights. */\n  private _participantWeightGcd: number;\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: { [k: string]: number } = {};\n\n  /**\n   * Returns the weight of the given participant.\n   * @param {Participant} participant The participant to get the weight of.\n   * @return {number} The participant weight.\n   */\n  private _getParticipantWeight = (participant: Participant): number =>\n    participant.weight;\n\n  /**\n   * Returns the GCD of the weights of all participants of the match.\n   * @return {number} The GCD of the participant weights.\n   */\n  private _getParticipantWeightsGcd = (): number =>\n    this._participants\n      .map(this._getParticipantWeight)\n      .reduce(\n        (prevGcd: number, weight: number): number => gcd(prevGcd, weight),\n      );\n\n  /**\n   * Returns a list of cloned participants whose count is the weight of the participant divided by the GCD of weights of all participants in the list.\n   * @param {Participant} participant The participant to clone.\n   * @return {Participant[]} The list of cloned participants.\n   */\n  private _cloneParticipantByWeight = (\n    participant: Participant,\n  ): Participant[] => {\n    const participants: Participant[] = [];\n    for (let i = 0; i < participant.weight / this._participantWeightGcd; i++) {\n      participants.push(participant);\n    }\n    return participants;\n  };\n\n  /**\n   * Picks and returns a winner of the match from the list of participants at random, with participant weight factored in.\n   * @return {Participant} The participant selected as the winner.\n   */\n  private _getWinner = (): Participant =>\n    RandomGenerator.pick(\n      this._participants.flatMap(this._cloneParticipantByWeight),\n    );\n\n  /**\n   * Returns a random conclusion message for the match.\n   * @return {string} The conclusion message.\n   */\n  private _getMessage = (): string => this._config.getRandomMessage();\n\n  /**\n   * Returns a unique ID for the match based on the round it belongs to.\n   * @param {string} roundId The ID of the round the match belongs to.\n   * @return {string} The unique match ID.\n   */\n  private _getMatchId = (roundId: string): string => {\n    if (!Match.counter[roundId]) {\n      Match.counter[roundId] = 1;\n    }\n    return `${Match.counter[roundId]++}`;\n  };\n\n  public constructor(\n    config: Config,\n    participants: Participant[],\n    roundId: string,\n  ) {\n    this._config = config;\n\n    this._id = `${this._getMatchId(roundId)}`;\n    this._roundId = roundId;\n    this._participants = participants;\n    this._participantWeightGcd = this._getParticipantWeightsGcd();\n    this._winner = this._getWinner();\n    this._message = this._getMessage();\n  }\n\n  /**\n   * Returns whether the participant is the winner of the match or not.\n   * @param  {Participant} participant The participant to check.\n   * @return {boolean} Whether the participant is the winner of the match or not.\n   */\n  private _isNotWinner = (participant: Participant): boolean =>\n    !participant.equals(this._winner);\n\n  /**\n   * Get the match ID.\n   * @return {string} The unique ID of the match within the context of the round it belongs to.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the complete match ID (prepended with round ID).\n   * @return {string} The unique complete ID of the match.\n   */\n  public get fullId(): string {\n    return `${this._roundId}:${this._id}`;\n  }\n\n  /**\n   * Get the list of losers of the match.\n   * @return {Participant[]} The list of losers.\n   */\n  public get losers(): Participant[] {\n    return this._participants.filter(this._isNotWinner);\n  }\n\n  /**\n   * Get the list of participants in the match.\n   * @return {Participant[]} The list of participants.\n   */\n  public get participants(): Participant[] {\n    return this._participants;\n  }\n\n  /**\n   * Get the winner of the match.\n   * @return {Participant} The winner.\n   */\n  public get winner(): Participant {\n    return this._winner;\n  }\n\n  /**\n   * Get the conslusion message of the match.\n   * @return {string} The message.\n   */\n  public get message(): string {\n    return this._message;\n  }\n}\n","import Participant from \"./match/participant/Participant\";\nimport Config from \"../config/Config\";\nimport chunk from \"lodash.chunk\";\nimport Match from \"./match/Match\";\nimport last from \"lodash.last\";\nimport RandomGenerator from \"../config/RandomGenerator\";\n\n/**\n * Class containing the details of a round.\n */\nexport default class Round {\n  /** The ID of the round. */\n  private _id: string;\n  /** The list of matches of the round. */\n  private _matches: Match[];\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: number = 1;\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /**\n   * Returns a shuffled list of the given participants.\n   * @param  {Participant[]} participants The list of participants to shuffle.\n   * @return {Participant[]} The shuffled list.\n   */\n  private _shuffleParticipants = (participants: Participant[]): Participant[] =>\n    RandomGenerator.shuffle(participants);\n\n  /**\n   * Creates a match with the given list of participants\n   * @param  {Participant[]} participants The list of participants to create the match with.\n   * @return {Match} The created match.\n   */\n  private _createMatch = (participants: Participant[]): Match =>\n    new Match(this._config, participants, this._id);\n\n  /**\n   * Returns a list of matches with all the participants of the round.\n   * @param  {Participant[]} participants The list of participants to create the matches with.\n   * @return {Match[]} The list of created matches.\n   */\n  private _getMatches = (participants: Participant[]): Match[] =>\n    chunk(\n      this._shuffleParticipants(participants),\n      this._config.participantsPerMatch,\n    ).map(this._createMatch);\n\n  public constructor(config: Config, participants: Participant[]) {\n    this._config = config;\n\n    this._id = `${Round.counter++}`;\n    this._matches = this._getMatches(participants);\n  }\n\n  /**\n   * Returns the list of participants of a given match.\n   * @param  {Match} match The match whose participants to get.\n   * @return {Participant[]} The list of participants of the match.\n   */\n  private _getMatchParticipants = (match: Match): Participant[] =>\n    match.participants;\n\n  /**\n   * Returns the winner of a given match.\n   * @param  {Match} match The match whose winner to get.\n   * @return {Participant[]} The winner of the match.\n   */\n  private _getMatchWinner = (match: Match): Participant => match.winner;\n\n  /**\n   * Returns the list of losers of a given match.\n   * @param  {Match} match The match whose losers to get.\n   * @return {Participant[]} The list of losers of the match.\n   */\n  private _getMatchLosers = (match: Match): Participant[] => match.losers;\n\n  /**\n   * Get the round ID.\n   * @return {string} The unique ID of the round.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the list of matches in the round.\n   * @return {Match[]} The list of matches.\n   */\n  public get matches(): Match[] {\n    return this._matches;\n  }\n\n  /**\n   * Get the first match of the round.\n   * @return {Match} The first match.\n   */\n  public get firstMatch(): Match {\n    return this._matches[0];\n  }\n\n  /**\n   * Get the last match of the round.\n   * @return {Match} The last match.\n   */\n  public get lastMatch(): Match {\n    return last(this._matches) as Match;\n  }\n\n  /**\n   * Get the list of participants in the round.\n   * @return {Participant[]} The list of participants.\n   */\n  public get participants(): Participant[] {\n    return this._matches.flatMap(this._getMatchParticipants);\n  }\n\n  /**\n   * Get the list of winners in the round.\n   * @return {Participant[]} The list of winners.\n   */\n  public get winners(): Participant[] {\n    return this._matches.map(this._getMatchWinner);\n  }\n\n  /**\n   * Get the list of losers in the round.\n   * @return {Participant[]} The list of losers.\n   */\n  public get losers(): Participant[] {\n    return this._matches.flatMap(this._getMatchLosers);\n  }\n}\n","import \"./i18n\"\nimport \"./index.scss\"\nimport \"skeleton-css/css/skeleton.css\"\n\nimport { Provider } from \"mobx-react\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { HashRouter } from \"react-router-dom\"\n\nimport AppRouter from \"./AppRouter\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport Config from \"./store/config/Config\"\nimport ServiceWorkerAlertsConfig from \"./store/config/ServiceWorkerAlertsConfig\"\nimport Tournament from \"./store/Tournament\"\n\nconst config: Config = Config.getInstance();\nconst serviceWorkerAlertsConfig: ServiceWorkerAlertsConfig = ServiceWorkerAlertsConfig.getInstance();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.register({\n//   onSuccess: () => serviceWorkerAlertsConfig.setIsAdded(true),\n//   onUpdate: () => serviceWorkerAlertsConfig.setIsUpdated(true),\n// });\nserviceWorker.unregister();\n\n// Create the tournament store\nconst store: Tournament = new Tournament(config);\n\n// Set the webpage title.\ndocument.title = `${config.name} Tournament`;\n\n// Render the application! :D\nReactDOM.render(\n  <HashRouter>\n    <Provider\n      config={config}\n      serviceWorkerAlertsConfig={serviceWorkerAlertsConfig}\n    >\n      <AppRouter tournament={store} />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n","import Participant from \"./round/match/participant/Participant\";\nimport last from \"lodash.last\";\nimport Config from \"./config/Config\";\nimport Round from \"./round/Round\";\n\n/**\n * Class containing the details of a tournament.\n */\nexport default class Tournament {\n  /** The list of rounds of the tournament. */\n  private _rounds: Round[];\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /**\n   * Creates a round with the given list of participants.\n   * @param  {Participant[]} participants The list of participants to create the round with.\n   * @return {Round} The created round.\n   */\n  private _createRound = (participants: Participant[]): Round =>\n    new Round(this._config, participants);\n\n  /**\n   * Returns a list of rounds with all the participants of the tournament.\n   * @return {Round[]} The list of created rounds.\n   */\n  private _getRounds = (): Round[] => {\n    this._rounds = [this._createRound(this._config.allParticipants)];\n    while (!this._hasWinner) {\n      this._rounds.push(this._createRound(this.lastRound.winners));\n    }\n    return this._rounds;\n  };\n\n  public constructor(config: Config) {\n    this._config = config;\n\n    this._rounds = this._getRounds();\n  }\n\n  /**\n   * Returns whether the tournament has a final winner or not.\n   * @return {boolean} Whether the tournament has a final winner or not.\n   */\n  private get _hasWinner(): boolean {\n    return this.lastRound.winners.length === 1;\n  }\n\n  /**\n   * Get the first round of the tournament.\n   * @return {Round} The first round.\n   */\n  public get firstRound(): Round {\n    return this._rounds[0];\n  }\n\n  /**\n   * Get the last round of the tournament.\n   * @return {Round} The last round.\n   */\n  public get lastRound(): Round {\n    return last(this._rounds) as Round;\n  }\n\n  /**\n   * Gets the list of rounds in the tournament.\n   * @return {Round[]} The rounds in the tournament.\n   */\n  public get rounds(): Round[] {\n    return this._rounds;\n  }\n\n  /**\n   * Gets the final winner of the tournament.\n   * @return {Participant} The final winner, or null if there is none.\n   */\n  public get winner(): Participant {\n    return this.lastRound.winners[0];\n  }\n}\n"],"sourceRoot":""}