{"version":3,"sources":["store/round/match/participant/Avatar.ts","store/round/match/participant/Participant.ts","store/config/RandomGenerator.ts","store/config/AnimationSpeed.ts","store/config/Config.ts","util/index.tsx","store/config/i18n.ts","i18n.ts","tournament/round/match/participant/common/_partial/ParticipantAvatarView.tsx","tournament/round/match/participant/common/_partial/ParticipantAvatarView.react.tsx","tournament/round/match/participant/common/_partial/ParticipantNameView.tsx","tournament/round/match/participant/common/_partial/ParticipantNameView.react.tsx","tournament/round/match/participant/common/index.tsx","tournament/round/match/participant/common/index.react.tsx","tournament/round/match/participant/entry/ParticipantEntry.tsx","tournament/round/match/_partial/MatchWinnerView.tsx","tournament/round/match/_partial/MatchWinnerView.react.tsx","tournament/round/match/_partial/MatchFinalEntry.tsx","tournament/round/match/_partial/MatchFinalEntry.react.tsx","tournament/round/match/_partial/MatchParticipantList.tsx","tournament/round/match/_partial/MatchParticipantList.react.tsx","tournament/round/match/overlay/_partial/MatchOverlayWinner.tsx","tournament/round/match/overlay/_partial/MatchOverlayWinner.react.tsx","tournament/round/match/overlay/_partial/MatchOverlayInterim.tsx","tournament/round/match/overlay/_partial/MatchOverlayInterim.react.tsx","tournament/round/match/participant/card/ParticipantCard.tsx","tournament/round/match/overlay/_partial/MatchOverlayParticipants.tsx","tournament/round/match/overlay/_partial/MatchOverlayParticipants.react.tsx","tournament/round/match/overlay/MatchOverlay.tsx","tournament/round/match/overlay/MatchOverlay.react.tsx","tournament/round/match/MatchView.tsx","tournament/round/match/MatchView.react.tsx","tournament/round/_partial/RoundMatchListView.tsx","tournament/round/_partial/RoundMatchListView.react.tsx","tournament/round/_partial/RoundTitle.tsx","tournament/round/_partial/RoundTitle.react.tsx","tournament/round/_partial/RoundDetails.tsx","tournament/round/_partial/RoundDetails.react.tsx","tournament/round/RoundView.react.tsx","tournament/round/RoundView.tsx","tournament/winner-overlay/_partial/WinnerInfo.tsx","tournament/winner-overlay/_partial/WinnerInfo.react.tsx","tournament/winner-overlay/_partial/WinnerOverlayView.tsx","tournament/winner-overlay/_partial/WinnerOverlayView.react.tsx","tournament/winner-overlay/WinnerOverlay.tsx","tournament/winner-overlay/WinnerOverlay.react.tsx","tournament/speed/_partial/SpeedOption.tsx","tournament/speed/_partial/SpeedOption.react.tsx","tournament/speed/SpeedControl.react.tsx","tournament/speed/SpeedControl.tsx","tournament/_partial/AppDevTools.tsx","tournament/_partial/AppDevTools.react.tsx","tournament/loser-overlay/_partial/LoserInfo.tsx","tournament/loser-overlay/_partial/LoserInfo.react.tsx","tournament/loser-overlay/_partial/LoserOverlayView.tsx","tournament/loser-overlay/_partial/LoserOverlayView.react.tsx","tournament/loser-overlay/LoserOverlay.tsx","tournament/loser-overlay/LoserOverlay.react.tsx","tournament/_partial/LoserOverlayView.tsx","tournament/_partial/LoserOverlayView.react.tsx","tournament/_partial/TournamentTitle.react.tsx","tournament/_partial/TournamentTitle.tsx","tournament/language/_partial/LanguageOption.tsx","tournament/language/_partial/LanguageOption.react.tsx","tournament/language/LanguageControl.tsx","tournament/language/LanguageControl.react.tsx","service-worker/ServiceWorkerUpdateAlert.react.tsx","service-worker/ServiceWorkerUpdateAlert.tsx","service-worker/ServiceWorkerAddAlert.react.tsx","service-worker/ServiceWorkerAddAlert.tsx","tournament/TournamentView.react.tsx","tournament/TournamentView.tsx","AppRouter.react.tsx","AppRouter.tsx","serviceWorker.ts","store/config/ServiceWorkerAlertsConfig.ts","store/round/match/Match.ts","store/round/Round.ts","store/Tournament.ts","index.tsx"],"names":["Avatar","url","altText","_url","_altText","_isSameUrl","url1","url2","_isSameAltText","altText1","altText2","equals","otherAvatar","this","inflect","require","Participant","name","avatar","weight","_id","_name","_avatar","_weight","_getOrCreateAvatar","createAvatarImage","_isSameName","name1","name2","_isSameAvatar","avatar1","avatar2","otherParticipant","counter","titleize","randomEngine","Random","engines","mt19937","seed","configJson","AnimationSpeed","_SPEED_MAP","Map","get","key","getValues","Array","from","values","getKeys","keys","hasKey","has","hasValue","value","indexOf","getEntries","entries","Config","_messages","_allParticipants","_participantsPerMatch","_languages","_unusedMessages","_getName","ConfigJson","_getMessages","messages","_createParticipant","user","_getParticipants","users","map","_getParticipantsPerMatch","participantsPerMatch","_getlLanguages","lang","_getSpeed","_shouldPrepend","index","participantSize","_prependToLastParticipant","stringToPrepend","_formatLosers","names","length","join","getFormattedMessage","message","winnerName","loserNames","replace","getMessageIndex","RandomGenerator","shuffle","_currentLanguage","_speed","pick","splice","i18n","changeLanguage","console","error","_instance","observable","computed","action","identifier","isInRange","num","start","end","runOnDelay","delay","delayId","setTimeout","clearTimeout","useAnimationState","useState","currentState","setState","updateState","updateStateDelay","getNormalizedSpeed","time","getInstance","speed","runOnPredicate","predicate","undefined","getMatchRedirect","roundId","matchId","to","createObserver","Component","props","resources","en","translation","lng","fallbackLng","debug","process","interpolation","escapeValue","react","wait","configLanguages","resourceLanguages","Object","i18nConfig","filter","language","forEach","Error","use","detector","initReactI18next","init","ParticipantAvatarView","participant","className","classNames","src","alt","ParticipantNameView","properName","ParticipantView","invert","createParticipantView","MatchWinnerView","useEffect","in","timeout","enter","enterActive","enterDone","exit","exitActive","exitDone","mountOnEnter","unmountOnExit","style","transition","winner","MatchFinalEntry","match","participants","isCurrentMatch","isActualMatch","id","onEntered","onExited","MatchParticipantList","inject","withTranslation","withRouter","document","hidden","setHidden","shouldNotStopOnEnd","URLSearchParams","location","search","log","updateHidden","addEventListener","removeEventListener","translatedMessagesList","t","useTranslation","returnObjects","count","currentMatch","losers","matchMessage","messageIndex","config","isArray","loser","onWinnerComplete","show","i18nKey","onInterimComplete","sizeUnit","size","flatMap","slice","onOverlayComplete","onMatchComplete","matchRef","useRef","onEntering","current","scrollIntoView","behavior","block","inline","ref","RoundMatchListView","currentMatchIndex","round","matches","findIndex","_","fullId","onCurrentMatchComplete","onCurrentComplete","getRoundRedirectIfRequired","required","matchIndex","shouldNextRedirect","onRoundComplete","WinnerOverlayView","observer","onClick","setSpeed","allAnimationValues","SpeedControl","AppDevTools","onInfoComplete","onViewComplete","LoserOverlayView","isString","translatedTournamentName","tournamentName","currentLanguage","setCurrentLanguage","languages","SweetAlert","setShow","title","default","serviceWorkerAlertsConfig","updated","type","text","onConfirm","setIsUpdated","added","setIsAdded","tournament","roundIndex","rounds","TournamentView","currentRoundIndex","isLastRound","lastRound","showOverlay","setShowOverlay","Math","max","ServiceWorkerAddAlert","ServiceWorkerUpdateAlert","AppRedirect","firstMatchId","firstRoundId","AppRouter","_getParams","routeProps","params","_getApplicationRoute","exact","path","render","_getTournament","_getPartialRoute","_getPartialAppRedirect","_getCurrentRoundDetails","_getFirstMatchIdOfCurrentRound","_getUnknownAppRedirect","_getUnknownRoute","_getFirstRoundId","firstRound","_getIsCurrentRoundFilter","find","firstMatch","Boolean","window","hostname","ServiceWorkerAlertsConfig","_added","_updated","gcd","Match","_roundId","_participants","_winner","_message","_participantWeightGcd","_config","_getParticipantWeight","_getParticipantWeightsGcd","reduce","prevGcd","_cloneParticipantByWeight","i","push","_getWinner","_getMessage","getRandomMessage","_getMatchId","_isNotWinner","Round","_matches","_shuffleParticipants","_createMatch","_getMatches","chunk","_getMatchParticipants","_getMatchWinner","_getMatchLosers","last","Tournament","_rounds","_createRound","_getRounds","allParticipants","_hasWinner","winners","navigator","serviceWorker","ready","then","registration","unregister","store","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.6da660fd.chunk.js","sourcesContent":["/**\n * Class containing the details of a participants' avatar.\n */\nexport default class Avatar {\n  /** The URL of the avatar image. */\n  private _url: string;\n  /** The alternate text for the image. */\n  private _altText: string;\n\n  public constructor(url: string, altText: string) {\n    this._url = url;\n    this._altText = altText;\n  }\n\n  /**\n   * Gets the avatar URL.\n   * @return {string} The avatar URL.\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Gets the avatar image alternate text.\n   * @return {string} The avatar image alternate text.\n   */\n  public get altText(): string {\n    return this._altText;\n  }\n\n  /**\n   * Returns whether the two given URLs are equal.\n   * @param {string} url1 The first URL to compare.\n   * @param {string} url2 The second URL to compare.\n   * @return {boolean} Whether the two URLs are equal.\n   */\n  private _isSameUrl = (url1: string, url2: string): boolean => url1 === url2;\n\n  /**\n   * Returns whether the two alternate texts are equal.\n   * @param {string} altText1 The first alternate text to compare.\n   * @param {string} altText2 The second alternate text to compare.\n   * @return {boolean} Whether the two alternate texts are equal.\n   */\n  private _isSameAltText = (altText1: string, altText2: string): boolean =>\n    altText1 === altText2;\n\n  /**\n   * Determines whether another avatar is identical to the current one.\n   * @param  {Avatar} otherAvatar The other avatar to compare against.\n   * @return {boolean} Whether the other avatar is equal to the current one.\n   */\n  public equals = (otherAvatar: Avatar): boolean =>\n    this._isSameUrl(this._url, otherAvatar._url) &&\n    this._isSameAltText(this._altText, otherAvatar._altText);\n}\n","import { createAvatarImage } from \"../../../../util\";\nimport Avatar from \"./Avatar\";\nconst inflect = require(\"i\")();\n\ninterface AvatarJson {\n  url: string;\n  altText: string;\n}\n\n/**\n * Class containing the details of a participant.\n */\nexport default class Participant {\n  /** The ID of the participant. */\n  private _id: string;\n  /** The name of the participant. */\n  private _name: string;\n  /** The avatar of the participant. */\n  private _avatar: Avatar;\n  /** The weight of the participant. */\n  private _weight: number;\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: number = 1;\n\n  /**\n   * Gets the avatar of the participant if present, or creates a random one,\n   * @param  {string} name The name of the participant.\n   * @param  {AvatarJson} avatar The avatar details of the participant, if available.\n   * @return {Avatar} The generated avatar of the participant.\n   */\n  private _getOrCreateAvatar = (name: string, avatar?: AvatarJson): Avatar => {\n    return avatar\n      ? new Avatar(avatar.url, avatar.altText)\n      : new Avatar(createAvatarImage(name), name);\n  };\n\n  public constructor(name: string, avatar?: AvatarJson, weight: number = 1) {\n    this._id = `${Participant.counter++}`;\n    this._name = name;\n    this._avatar = this._getOrCreateAvatar(name, avatar);\n    this._weight = weight;\n  }\n\n  /**\n   * Get the participant ID.\n   * @return {string} The unique ID of the participant.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Gets the participant name.\n   * @return {string} The participant name.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Gets the capitalized name of the participant.\n   * @return {string} The capitalized name.\n   */\n  public get properName(): string {\n    return inflect.titleize(this._name);\n  }\n\n  /**\n   * Gets the participant avatar, if it exists.\n   * @return {string} The participant avatar.\n   */\n  public get avatar(): Avatar {\n    return this._avatar;\n  }\n\n  /**\n   * Gets the participant weight.\n   * @return {number} The participant weight.\n   */\n  public get weight(): number {\n    return this._weight;\n  }\n\n  /**\n   * Returns whether the two names are equal.\n   * @param {string} name1 The first name to compare.\n   * @param {string} name2 The second name to compare.\n   * @return {boolean} Whether the two names are equal.\n   */\n  private _isSameName = (name1: string, name2: string): boolean =>\n    name1 === name2;\n\n  /**\n   * Returns whether the two avatars are equal.\n   * @param {Avatar} avatar1 The first avatar to compare.\n   * @param {Avatar} avatar2 The second avatar to compare.\n   * @return {boolean} Whether the two avatars are equal.\n   */\n  private _isSameAvatar = (avatar1: Avatar, avatar2: Avatar): boolean =>\n    avatar1.equals(avatar2);\n\n  /**\n   * Determines whether another participant is identical to the current one.\n   * @param  {Participant} otherParticipant The other participant to compare against.\n   * @return {boolean} Whether the other participant is equal to the current one.\n   */\n  public equals = (otherParticipant: Participant): boolean =>\n    this._isSameName(this._name, otherParticipant._name) &&\n    this._isSameAvatar(this._avatar, otherParticipant._avatar);\n}\n","import Random, { Engine } from \"random-js\";\nimport configJson from \"../../config/config.json\";\n\n// Create a mersenne twister engine.\nconst randomEngine: Engine = Random.engines.mt19937().seed(configJson.seed);\n// Export a randomizer using the created engine.\nexport default new Random(randomEngine);\n","/**\n * Class the provides possible animation speeds.\n */\nexport default class AnimationSpeed {\n  /** A map of possible speeds, and their multiplier values. */\n  private static _SPEED_MAP: Map<string, number> = new Map([\n    [\"HALF\", 0.5],\n    [\"ONE\", 1],\n    [\"TWO\", 2],\n    // [\"FIVE\", 5],\n    // [\"TEN\", 10],\n  ]);\n\n  /**\n   * Returns the speed multiplier of the given key.\n   * @param  {string} key The key whose speed multiplier to return.\n   * @return {number | undefined} The speed multiplier, or undefined if it doesn't exist.\n   */\n  public static get = (key: string): number | undefined =>\n    AnimationSpeed._SPEED_MAP.get(key);\n\n  /**\n   * Returns the list of possible speed multiplier values.\n   * @return {number[]} The list of speed multiplier values.\n   */\n  public static getValues = (): number[] =>\n    Array.from(AnimationSpeed._SPEED_MAP.values());\n\n  /**\n   * Returns the list of possible speed multiplier keys.\n   * @return {string[]} The list of speed multiplier keys.\n   */\n  public static getKeys = (): string[] =>\n    Array.from(AnimationSpeed._SPEED_MAP.keys());\n\n  /**\n   * Returns whether the speed multiplier key exists.\n   * @param  {string} key The key to check.\n   * @return {boolean} Whether the speed multiplier key exists or not.\n   */\n  public static hasKey = (key: string): boolean =>\n    AnimationSpeed._SPEED_MAP.has(key);\n\n  /**\n   * Returns whether the speed multiplier value exists.\n   * @param  {number} value The value to check.\n   * @return {boolean} Whether the speed multiplier value exists or not.\n   */\n  public static hasValue = (value: number): boolean =>\n    AnimationSpeed.getValues().indexOf(value) !== -1;\n\n  /**\n   * Returns the list of possible speed multiplier keys and values.\n   * @return {[string, number][]} Returns the list of speed multiplier keys and values.\n   */\n  public static getEntries = (): [string, number][] =>\n    Array.from(AnimationSpeed._SPEED_MAP.entries());\n}\n","import Participant from \"../round/match/participant/Participant\";\nimport ConfigJson from \"../../config/config.json\";\nimport i18n from \"../../i18n\";\nimport { observable, computed, action } from \"mobx\";\nimport RandomGenerator from \"./RandomGenerator\";\nimport AnimationSpeed from \"./AnimationSpeed\";\n\n/**\n * Interface for JSON object representing avatar details.\n */\ninterface AvatarJson {\n  /** The URL of the avatar. */\n  url: string;\n  /** The alternate text of the avatar image. */\n  altText: string;\n}\n\n/**\n * Interface for JSON object representing participant details.\n */\ninterface ParticipantJson {\n  /** The name of the participant. */\n  name: string;\n  /** The avatar of the participant (if present). */\n  avatar?: AvatarJson;\n  /** The weight of the participant (if present). */\n  weight?: number;\n}\n\n/**\n * Class representing the basic configuration of the application.\n */\nexport default class Config {\n  /** The name of the tournament. */\n  private _name: string;\n  /** A list of all messages. */\n  private _messages: string[];\n  /** The list of participants in the tournament. */\n  private _allParticipants: Participant[];\n  /** The number of participants per match. */\n  private _participantsPerMatch: number;\n  /** The languages supported by the application. */\n  private _languages: string[];\n  /** The current language. */\n  @observable private _currentLanguage: string;\n  /** The animation speed multiplier. */\n  @observable private _speed: number;\n  /** The list of unused messages. */\n  private _unusedMessages: string[];\n\n  /** The singleton instance of the class, or null if not yet created. */\n  private static _instance: Config | null = null;\n\n  /**\n   * Returns the name of the tournament.\n   * @return {string} The tournament name.\n   */\n  private _getName = (): string => ConfigJson.name;\n\n  /**\n   * Returns the match conclusion messages that can be used for the tournament.\n   * @return {string[]} The tournament match conclusion messages.\n   */\n  private _getMessages = (): string[] => ConfigJson.messages;\n\n  /**\n   * Returns a created participant for the given JSON details.\n   * @param {string | ParticipantJson} user The participants details.\n   * @return {Participant} The created participant.\n   */\n  private _createParticipant = (user: string | ParticipantJson): Participant =>\n    typeof user === \"string\"\n      ? new Participant(user)\n      : new Participant(\n          (user as ParticipantJson).name,\n          (user as ParticipantJson).avatar,\n          (user as ParticipantJson).weight,\n        );\n\n  /**\n   * Returns a created list of participants using the given participant details.\n   * @return {Participant[]} The created participants list.\n   */\n  private _getParticipants = (): Participant[] =>\n    ConfigJson.users.map(this._createParticipant);\n\n  /**\n   * Returns the max. number of participants that are to be present per match in the tournament.\n   * @return {number} The max. number of participants per match.\n   */\n  private _getParticipantsPerMatch = (): number =>\n    ConfigJson.participantsPerMatch;\n\n  /**\n   * Returns the list of languages supported by the application.\n   * @return {string[]} The list of languages.\n   */\n  private _getlLanguages = (): string[] => ConfigJson.lang;\n\n  /**\n   * Returns the animation speed multiplier of the application.\n   * @return {number} The animation speed multiplier.\n   */\n  private _getSpeed = (): number => AnimationSpeed.get(\"ONE\") as number;\n\n  /**\n   * Returns whether a string should be prepended to a participants' name.\n   * @param {number} index The index of the participant.\n   * @param {number} participantSize The total number of participants.\n   * @return {boolean} Whether the string should be prepended.\n   */\n  private _shouldPrepend = (index: number, participantSize: number): boolean =>\n    index === participantSize - 1 && participantSize > 1;\n\n  /**\n   * Returns a function that can returns the participant name prepended with a string if it's the last participant, or just the name.\n   * @param {number} participantSize The total number of participants.\n   * @param {string} stringToPrepend The string to prepend.\n   * @return {(name: string, index: number) => string} The function that will return the participants' name\n   */\n  private _prependToLastParticipant = (\n    participantSize: number,\n    stringToPrepend: string,\n  ): ((name: string, index: number) => string) => (\n    name: string,\n    index: number,\n  ): string =>\n    this._shouldPrepend(index, participantSize)\n      ? `${stringToPrepend} ${name}`\n      : name;\n\n  /**\n   * Returns a formatted losers list.\n   * @param {string[]} names The list of loser names.\n   * @return {string} The formatted string.\n   */\n  private _formatLosers = (names: string[]): string =>\n    names.map(this._prependToLastParticipant(names.length, \"and\")).join(\", \");\n\n  private constructor() {\n    this._name = this._getName();\n    this._messages = this._getMessages();\n    this._unusedMessages = RandomGenerator.shuffle([...this._messages]);\n    this._allParticipants = this._getParticipants();\n    this._participantsPerMatch = this._getParticipantsPerMatch();\n    this._languages = this._getlLanguages();\n    this._currentLanguage = \"en\";\n    this._speed = this._getSpeed();\n  }\n\n  /**\n   * Get an instance of the config, which is a singleton.\n   * @return {Config} The instance of a config.\n   */\n  public static getInstance(): Config {\n    return Config._instance\n      ? Config._instance\n      : (Config._instance = new Config());\n  }\n\n  /**\n   * Get the name of the tournament.\n   * @return {string} The tournament name.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the list of winner/loser messages.\n   * @return {string[]} The list of mesasges.\n   */\n  public get messages(): string[] {\n    return [...this._messages];\n  }\n\n  /**\n   * Returns the formatted version of the given message.\n   * @param {string} message The message to format.\n   * @param {string} winnerName The name of the winner.\n   * @param {string[]} loserNames The names of the losers.\n   * @return {string} The formatted message.\n   */\n  public getFormattedMessage = (\n    message: string,\n    winnerName: string,\n    loserNames: string[],\n  ): string =>\n    message\n      .replace(\"#winner\", winnerName)\n      .replace(\"#loser\", this._formatLosers(loserNames));\n\n  /**\n   * Gets a random message with the winner and loser.\n   * @return {string} The formatted message.\n   */\n  public getRandomMessage(): string {\n    if (this._unusedMessages.length === 0) {\n      this._unusedMessages = RandomGenerator.shuffle([...this._messages]);\n    }\n    const message = RandomGenerator.pick(this._unusedMessages);\n    this._unusedMessages.splice(this._unusedMessages.indexOf(message), 1);\n    return message;\n  }\n\n  /**\n   * Gets the index of the given message.\n   * @param {string} message The message.\n   * @return {number} The index of the message.\n   */\n  public getMessageIndex = (message: string): number =>\n    this._messages.indexOf(message);\n\n  /**\n   * Get the list of all participants in the tournament.\n   * @return {Participant[]} The list of all participants.\n   */\n  public get allParticipants(): Participant[] {\n    return this._allParticipants;\n  }\n\n  /**\n   * Get the number of participants per match.\n   * @return {number} The number of participants per match.\n   */\n  public get participantsPerMatch(): number {\n    return this._participantsPerMatch;\n  }\n\n  /**\n   * Get the list of languages supported by the application.\n   * @return {string[]} The list of languages.\n   */\n  public get languages(): string[] {\n    return this._languages;\n  }\n\n  /**\n   * Get the current application language.\n   * @return {string} The current language.\n   */\n  @computed public get currentLanguage(): string {\n    return this._currentLanguage;\n  }\n\n  /**\n   * Set the current language of the application.\n   * @param {string} value The new current language.\n   */\n  @action public setCurrentLanguage(value: string): void {\n    if (this._languages.indexOf(value) !== -1) {\n      this._currentLanguage = value;\n      i18n.changeLanguage(value);\n    } else {\n      console.error(`Illegal value '${value}' for current language.`);\n    }\n  }\n\n  /**\n   * Get the speed multiplier for animations.\n   * @return {number} The speed multiplier value.\n   */\n  @computed public get speed(): number {\n    return this._speed;\n  }\n\n  /**\n   * Set the speed multiplier for animations.\n   * @param {number} value The new speed multiplier value.\n   */\n  @action public setSpeed(value: number): void {\n    if (AnimationSpeed.hasValue(value)) {\n      this._speed = value;\n    } else {\n      console.error(`Illegal value '${value}' for speed.`);\n    }\n  }\n}\n","import React, { ComponentType, Dispatch, useState } from \"react\";\nimport Config from \"../store/config/Config\";\nimport { Redirect } from \"react-router\";\nimport { Observer } from \"mobx-react\";\n\n/**\n * Returns if it is currently a dev environment.\n */\nexport const isDevEnvironment: boolean = process.env.NODE_ENV === \"development\";\n\n/**\n * Returns a random avatar image URL.\n * @param {string} identifier The identifier to generate the avatar URL against.\n * @return {string} The avatar URL.\n */\nexport const createAvatarImage = (identifier: string): string => {\n  return `https://api.adorable.io/avatars/480/${identifier}`;\n};\n\n/**\n * Checks if the number is within the range.\n * @param {number} num The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @return {boolean} Whether the number is within the range.\n */\nexport const isInRange = (num: number, start: number, end: number): boolean =>\n  end >= start && num >= start && num <= end;\n\n/**\n * Type for custom animation state hook.\n */\nexport type AnimationStateHook = [\n  number,\n  () => void,\n  Dispatch<number>,\n  Dispatch<number>,\n];\n\n/**\n * Type for show overlay state hook.\n */\nexport type ShowOverlayHook = [boolean, Dispatch<boolean>];\n\n/**\n * Type for void function.\n */\nexport type VoidFunction = () => void;\n\n/**\n * Runs the given action at least after the given delay.\n * @param {Function} action The action to run.\n * @param {number} delay The minimum delay to wait for.\n */\nexport const runOnDelay = (action: Function, delay: number): VoidFunction => {\n  const delayId: number = setTimeout(action, delay);\n  return () => clearTimeout(delayId);\n};\n\n/**\n * Create an animation state hook.\n * @return {AnimationStateHook} The current animation state, a state update method, and a delayed state update method.\n */\nexport const useAnimationState = (start: number = 0): AnimationStateHook => {\n  const [currentState, setState]: [number, Dispatch<number>] = useState(start);\n\n  const updateState = (): void => setState(currentState + 1);\n  const updateStateDelay = (delay: number): VoidFunction =>\n    runOnDelay(updateState, delay);\n\n  return [currentState, updateState, updateStateDelay, setState];\n};\n\n/**\n * Normalize the given animation time by the animation speed multiplier.\n * @param {number} time The animation time to normalize.\n * @return {number} The normalized animation speed\n */\nexport const getNormalizedSpeed = (time: number): number =>\n  time / Config.getInstance().speed;\n\n/**\n * Returns function that runs the given action if the provided predicate is true.\n * @param {boolean} predicate The predicate to check.\n * @param {Function} action The action to run.\n */\nexport const runOnPredicate = (\n  predicate: boolean,\n  action: Function,\n): VoidFunction | (() => VoidFunction) => (): void | VoidFunction =>\n  predicate ? action() : undefined;\n\n/**\n * Returns a redirect component for a given round and match.\n * @param {string} roundId The ID of the round to redirect to.\n * @param {string} matchId The ID of the match to redirect to.\n * @return {JSX.Element} The redirect element.\n */\nexport const getMatchRedirect = (roundId?: string, matchId?: string) => (\n  <Redirect to={`/round/${roundId}/match/${matchId}`} />\n);\n\n/**\n * Returns a HOC with the given component wrapped by a MobX Observer component.\n * @param {ComponentType<T>} Component The component that should be under an observer.\n * @returns {(props: T) => JSX.Element} A HOC that wraps the given component under an observer.\n */\nexport const createObserver = <T extends {}>(\n  Component: ComponentType<T>,\n): ((props: T) => JSX.Element) => (props: T): JSX.Element => (\n  <Observer>{() => <Component {...props} />}</Observer>\n);\n","import { isDevEnvironment } from \"../../util\"\nimport i18next from \"i18next\"\nimport EnTranslation from \"../../i18n/en/translation.json\"\n\n// Update this to include all translation resources.\nconst defaultLanguage: string = \"en\"\nconst fallbackLanguage: string = \"en\"\nconst resources: i18next.Resource = {\n  en: {\n    translation: EnTranslation,\n  },\n}\n\n// Don't modify anything from this point\nexport default {\n  resources,\n  lng: defaultLanguage,\n  fallbackLng: fallbackLanguage,\n  debug: isDevEnvironment,\n  interpolation: {\n    escapeValue: false,\n  },\n  react: {\n    wait: true,\n  },\n}\n","import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport ConfigJson from \"./config/config.json\";\nimport i18nConfig from \"./store/config/i18n\";\n\n// No need to modify anything from this point.\nconst configLanguages: string[] = ConfigJson.lang;\nconst resourceLanguages: string[] = Object.keys(i18nConfig.resources);\nresourceLanguages\n  .filter(\n    (language: string): boolean => configLanguages.indexOf(language) === -1,\n  )\n  .forEach(\n    (language: string): void => {\n      throw new Error(`Language \"${language}\" is not added in config.`);\n    },\n  );\nconfigLanguages\n  .filter(\n    (language: string): boolean => resourceLanguages.indexOf(language) === -1,\n  )\n  .forEach(\n    (language: string): void => {\n      throw new Error(`Language \"${language}\" is not added in resources.`);\n    },\n  );\n\ni18n\n  .use(detector)\n  .use(initReactI18next)\n  .init(i18nConfig);\n\nexport default i18n;\n","import ParticipantAvatarView from \"./ParticipantAvatarView.react\";\n\nexport default ParticipantAvatarView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the participant avatar React component.\n */\nexport interface ParticipantAvatarViewProps {\n  /** CSS class */\n  className: string;\n  /** The participant details. */\n  participant: Participant;\n}\n\n/**\n * Function that returns a React component for the participant avatar.\n */\nexport default (props: ParticipantAvatarViewProps): JSX.Element | null => {\n  if (props.participant.avatar === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(`${props.className}__avatar`)}>\n      <img\n        src={props.participant.avatar.url}\n        alt={props.participant.avatar.altText}\n      />\n    </div>\n  );\n};\n","import ParticipantNameView from \"./ParticipantNameView.react\";\n\nexport default ParticipantNameView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the participant name React component.\n */\nexport interface ParticipantNameViewProps {\n  /** CSS class */\n  className: string;\n  /** The participant details. */\n  participant: Participant;\n}\n\n/**\n * Function that returns a React component for the participant name.\n */\nexport default (props: ParticipantNameViewProps): JSX.Element => (\n  <div className={classNames(`${props.className}__name`)}>\n    <strong>{props.participant.properName}</strong>\n  </div>\n);\n","import ParticipantView from \"./index.react\";\n\nexport default ParticipantView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\nimport ParticipantAvatarView from \"./_partial/ParticipantAvatarView\";\nimport ParticipantNameView from \"./_partial/ParticipantNameView\";\n\n/**\n * Properties of the participant view React component.\n */\nexport interface ParticipantViewProps {\n  /** The participant details. */\n  participant: Participant;\n  /** Whether to invert the color of the participant view or not. */\n  invert?: boolean;\n}\n\n/**\n * Function that returns a React component for the participant view.\n */\nexport default (className: string) => (\n  props: ParticipantViewProps,\n): JSX.Element => {\n  const rootClassName: string = \"participant\";\n\n  return (\n    <div\n      className={classNames(rootClassName, className, {\n        [`${rootClassName}--invert`]: props.invert,\n      })}\n    >\n      <ParticipantAvatarView className={className} {...props} />\n      <ParticipantNameView className={className} {...props} />\n    </div>\n  );\n};\n","import \"./ParticipantEntry.scss\";\nimport createParticipantView from \"../common\";\n\n/**\n * A entry-style participant view React component\n */\nexport default createParticipantView(\"participant-entry\");\n","import MatchWinnerView from \"./MatchWinnerView.react\";\n\nexport default MatchWinnerView;\n","import React, { useEffect } from \"react\";\nimport \"./MatchWinnerView.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\nimport { getNormalizedSpeed } from \"../../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../../../util\";\n\n/**\n * Properties of the match winner view React component.\n */\nexport interface MatchWinnerViewProps {\n  /** CSS class */\n  className: string;\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** The details of the match winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the match winner view.\n */\nexport default (props: MatchWinnerViewProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0}\n      timeout={getNormalizedSpeed(200)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__winner--entering`,\n        enterDone: `${props.className}__winner--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__winner--exiting`,\n        exitDone: `${props.className}__winner--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(`${props.className}__winner`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(200)}ms ease-in-out`,\n        }}\n      >\n        <ParticipantEntry participant={props.winner} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import MatchFinalEntry from \"./MatchFinalEntry.react\";\n\n/**\n * React component for the match final entry.\n */\nexport default MatchFinalEntry;\n","import React, { useEffect, Fragment } from \"react\";\nimport \"./MatchFinalEntry.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\nimport { getNormalizedSpeed, isInRange } from \"../../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../../../util\";\nimport Match from \"../../../../store/round/match/Match\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport MatchWinnerView from \"./MatchWinnerView\";\n\n/**\n * Properties of the match final entry React component.\n */\nexport interface MatchFinalEntryProps {\n  /** CSS class */\n  className: string;\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** Whether it is an actual match. */\n  isActualMatch: boolean;\n  /** The details of the current match. */\n  match: Match;\n}\n\n/**\n * React component for the match final entry.\n */\nexport default (props: MatchFinalEntryProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n    setState,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate((currentState + 1) % 3 === 0, () =>\n      updateStateDelay(getNormalizedSpeed(200)),\n    ),\n  );\n  useEffect(\n    runOnPredicate(\n      currentState === props.match.participants.length * 3 + 1,\n      () => setState(1),\n    ),\n  );\n\n  return (\n    <Fragment>\n      {props.isCurrentMatch && props.isActualMatch ? (\n        props.match.participants.map(\n          (participant: Participant, index: number): JSX.Element => (\n            <CSSTransition\n              key={participant.id}\n              in={isInRange(currentState, index * 3 + 1, index * 3 + 2)}\n              timeout={getNormalizedSpeed(200)}\n              classNames={{\n                enter: \"\",\n                enterActive: `${props.className}__interim--entering`,\n                enterDone: `${props.className}__interim--entered`,\n                exit: \"\",\n                exitActive: `${props.className}__interim--exiting`,\n                exitDone: `${props.className}__interim--exited`,\n              }}\n              mountOnEnter={true}\n              unmountOnExit={true}\n              onEntered={updateState}\n              onExited={updateState}\n            >\n              <div\n                className={classNames(`${props.className}__interim`)}\n                style={{\n                  transition: `opacity ${getNormalizedSpeed(\n                    200,\n                  )}ms ease-in-out`,\n                }}\n              >\n                <ParticipantEntry participant={participant} />\n              </div>\n            </CSSTransition>\n          ),\n        )\n      ) : (\n        <MatchWinnerView\n          className={props.className}\n          isCurrentMatch={props.isCurrentMatch}\n          winner={props.match.winner}\n        />\n      )}\n    </Fragment>\n  );\n};\n","import MatchParticipantList from \"./MatchParticipantList.react\";\n\n/**\n * React component for the match participant list.\n */\nexport default MatchParticipantList;\n","import React from \"react\";\nimport \"./MatchParticipantList.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../store/round/match/Match\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\n\n/**\n * Properties of the match participant list React component.\n */\nexport interface MatchParticipantListProps {\n  /** CSS class */\n  className: string;\n  /** The details of the current match. */\n  match: Match;\n}\n\n/**\n * React component for the match participant list.\n */\nexport default (props: MatchParticipantListProps): JSX.Element => (\n  <div className={classNames(`${props.className}__list`)}>\n    {props.match.participants.map(\n      (participant: Participant): JSX.Element => (\n        <ParticipantEntry key={participant.id} participant={participant} />\n      ),\n    )}\n  </div>\n);\n","import { inject } from \"mobx-react\";\nimport { withRouter } from \"react-router\";\nimport { withTranslation } from \"react-i18next\";\nimport MatchOverlayWinner from \"./MatchOverlayWinner.react\";\nimport { createObserver } from \"../../../../../util\";\n\n/**\n * React component for the match overlay winner.\n */\nexport default inject(\"config\")(\n  withTranslation()(withRouter(createObserver(MatchOverlayWinner))),\n);\n","import React, { useEffect, useState } from \"react\";\nimport \"./MatchOverlayWinner.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../../participant/entry/ParticipantEntry\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  runOnDelay,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  isInRange,\n} from \"../../../../../util/index\";\nimport { RouteComponentProps } from \"react-router\";\nimport Match from \"../../../../../store/round/match/Match\";\nimport {\n  Trans,\n  useTranslation,\n  UseTranslationResponse,\n  WithTranslation,\n} from \"react-i18next\";\nimport Config from \"../../../../../store/config/Config\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the match overlay winner React component.\n */\nexport interface MatchOverlayWinnerProps\n  extends RouteComponentProps,\n    WithTranslation {\n  /** @ignore The application config. */\n  config?: Config;\n  /** CSS class */\n  className: string;\n  /** The current match details. */\n  currentMatch: Match;\n  /** Whether to show the winner or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the winner. */\n  onWinnerComplete: () => void;\n}\n\nconst STOP_QUERY_FLAG: string = \"stop\";\n\n/**\n * React component for the match overlay winner.\n */\nexport default (props: MatchOverlayWinnerProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const [hidden, setHidden]: [boolean, (hidden: boolean) => void] = useState(\n    document.hidden,\n  );\n  const shouldNotStopOnEnd: boolean = !new URLSearchParams(\n    props.location.search,\n  ).has(STOP_QUERY_FLAG);\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  useEffect(() => {\n    console.log(document.hidden);\n    const updateHidden = () => {\n      console.log(document.hidden);\n      setHidden(document.hidden);\n    };\n    document.addEventListener(\"visibilitychange\", updateHidden);\n    return () => document.removeEventListener(\"visibilitychange\", updateHidden);\n  });\n\n  const { t }: UseTranslationResponse = useTranslation();\n  const translatedMessagesList: string = t(\"matchOverlay.messages\", {\n    returnObjects: true,\n    count: props.currentMatch.losers.length,\n  });\n  let matchMessage: string = props.currentMatch.message;\n\n  const messageIndex: number = props.config!.getMessageIndex(\n    props.currentMatch.message,\n  );\n  if (\n    messageIndex !== -1 &&\n    Array.isArray(translatedMessagesList) &&\n    isInRange(messageIndex, 0, translatedMessagesList.length - 1)\n  ) {\n    matchMessage = translatedMessagesList[messageIndex];\n  }\n\n  const winnerName: string = props.currentMatch.winner.properName;\n  const loserNames: string[] = props.currentMatch.losers.map(\n    (loser: Participant): string => loser.properName,\n  );\n\n  useEffect(\n    runOnPredicate(currentState === 2 && shouldNotStopOnEnd && !hidden, () =>\n      runOnDelay(() => {\n        props.onWinnerComplete();\n      }, getNormalizedSpeed(4000)),\n    ),\n  );\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__winner--entering`,\n        enterDone: `${props.className}__winner--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__winner--exiting`,\n        exitDone: `${props.className}__winner--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n    >\n      <div\n        className={classNames(`${props.className}__winner`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <Trans i18nKey=\"matchOverlay.winnerTitle\">\n          <ParticipantEntry participant={props.currentMatch.winner} />\n          <h3>Won The Match!</h3>\n        </Trans>\n        <h5>\n          <strong>\n            <em>\n              {props.config!.getFormattedMessage(\n                matchMessage,\n                winnerName,\n                loserNames,\n              )}\n            </em>\n          </strong>\n        </h5>\n      </div>\n    </CSSTransition>\n  );\n};\n","import MatchOverlayInterim from \"./MatchOverlayInterim.react\";\nimport { withTranslation } from \"react-i18next\";\nimport { createObserver } from \"../../../../../util\";\n\n/**\n * React component for the match overlay interim.\n */\nexport default withTranslation()(createObserver(MatchOverlayInterim));\n","import React, { useEffect } from \"react\";\nimport \"./MatchOverlayInterim.scss\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  isInRange,\n} from \"../../../../../util/index\";\nimport { ClipLoader } from \"react-spinners\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the match overlay interim React component.\n */\nexport interface MatchOverlayInterimProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** Whether to show the interim text or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the interim text. */\n  onInterimComplete: () => void;\n}\n\n/**\n * React component for the match overlay interim.\n */\nexport default (props: MatchOverlayInterimProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(currentState === 2, () =>\n      updateStateDelay(getNormalizedSpeed(4000)),\n    ),\n    [currentState],\n  );\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__interim--entering`,\n        enterDone: `${props.className}__interim--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__interim--exiting`,\n        exitDone: `${props.className}__interim--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n      onExited={props.onInterimComplete}\n    >\n      <div\n        className={classNames(`${props.className}__interim`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <h3>\n          <Trans i18nKey=\"matchOverlay.interimText\">Selecting Winner</Trans>\n        </h3>\n        <ClipLoader sizeUnit={\"rem\"} size={3} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import \"./ParticipantCard.scss\";\nimport createParticipantView from \"../common\";\n\n/**\n * A card-style participant view React component\n */\nexport default createParticipantView(\"participant-card\");\n","import { withTranslation } from \"react-i18next\";\nimport MatchOverlayParticipants from \"./MatchOverlayParticipants.react\";\n\n/**\n * React component for the match overlay participants.\n */\nexport default withTranslation()(MatchOverlayParticipants);\n","import React from \"react\";\nimport \"./MatchOverlayParticipants.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../../store/round/match/Match\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../participant/card/ParticipantCard\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the match overlay participants React component.\n */\nexport interface MatchOverlayParticipantsProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The current match details. */\n  currentMatch: Match;\n}\n\n/**\n * React component for the match overlay participants.\n */\nexport default (props: MatchOverlayParticipantsProps): JSX.Element => (\n  <div className={classNames(`${props.className}__list`)}>\n    {props.currentMatch.participants\n      .flatMap(\n        (participant: Participant): [JSX.Element, JSX.Element] => [\n          <div key={participant.id}>\n            <ParticipantCard invert={true} participant={participant} />\n          </div>,\n          <h3\n            className={classNames(\"versus-text\")}\n            key={`${participant.id} versus`}\n          >\n            <Trans\n              i18nKey=\"matchOverlay.versus\"\n              count={props.currentMatch.participants.length}\n            >\n              VS\n            </Trans>\n          </h3>,\n        ],\n      )\n      .slice(0, -1)}\n  </div>\n);\n","import MatchOverlay from \"./MatchOverlay.react\";\nimport { createObserver } from \"../../../../util\";\n\n/**\n * React component for the match overlay.\n */\nexport default createObserver(MatchOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./MatchOverlay.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../store/round/match/Match\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  isInRange,\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../../util/index\";\nimport MatchOverlayWinner from \"./_partial/MatchOverlayWinner\";\nimport MatchOverlayInterim from \"./_partial/MatchOverlayInterim\";\nimport MatchOverlayParticipants from \"./_partial/MatchOverlayParticipants\";\n\n/**\n * Properties of the match overlay React component.\n */\nexport interface MatchOverlayProps {\n  /** The match details. */\n  currentMatch: Match;\n  /** Whether to show the match overlay or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the match. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the match overlay.\n */\nexport default (props: MatchOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"match-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0 && props.show, updateState));\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onExited={props.onOverlayComplete}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <div className={classNames(className)}>\n          <MatchOverlayParticipants\n            className={className}\n            currentMatch={props.currentMatch}\n          />\n          <MatchOverlayInterim\n            className={className}\n            show={currentState === 1}\n            onInterimComplete={updateState}\n          />\n          <MatchOverlayWinner\n            currentMatch={props.currentMatch}\n            className={className}\n            show={currentState === 2}\n            onWinnerComplete={updateState}\n          />\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n","import { createObserver } from \"../../../util\";\nimport MatchView from \"./MatchView.react\";\n\nexport default createObserver(MatchView);\n","import React, { useEffect, useRef, MutableRefObject } from \"react\";\nimport \"./MatchView.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../store/round/match/Match\";\nimport {\n  getNormalizedSpeed,\n  runOnDelay,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport MatchFinalEntry from \"./_partial/MatchFinalEntry\";\nimport MatchParticipantList from \"./_partial/MatchParticipantList\";\nimport MatchOverlay from \"./overlay/MatchOverlay\";\n\n/**\n * Properties of the match view React component.\n */\nexport interface MatchViewProps {\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** The details of the current match. */\n  match: Match;\n  /** Action to call when the view has finished showing the match. */\n  onMatchComplete: () => void;\n}\n\n/**\n * React component for the match view.\n */\nexport default (props: MatchViewProps): JSX.Element | null => {\n  if (props.match === undefined) {\n    return null;\n  }\n\n  const className: string = \"match\";\n  const isActualMatch: boolean = props.match.participants.length > 1;\n\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n    setState,\n  ]: AnimationStateHook = useAnimationState(props.isCurrentMatch ? 0 : 3);\n\n  const onMatchComplete = () => {\n    setState(3);\n    runOnPredicate(props.isCurrentMatch, () =>\n      runOnDelay(() => props.onMatchComplete(), getNormalizedSpeed(1000)),\n    )();\n  };\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(\n      currentState === 1 && isActualMatch && props.isCurrentMatch,\n      () => updateStateDelay(getNormalizedSpeed(200)),\n    ),\n  );\n  useEffect(\n    runOnPredicate(currentState === 1 && !isActualMatch, onMatchComplete),\n  );\n\n  const matchRef: MutableRefObject<HTMLDivElement> = useRef(null as any);\n\n  return (\n    <CSSTransition\n      in={currentState > 0}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}--entering`,\n        enterDone: `${className}--entered`,\n        exit: \"\",\n        exitActive: `${className}--exiting`,\n        exitDone: `${className}--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntering={() =>\n        matchRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"nearest\",\n          inline: \"center\",\n        })\n      }\n      onExited={props.onMatchComplete}\n    >\n      <div\n        ref={matchRef}\n        className={classNames(className, {\n          [`${className}--completed`]: !props.isCurrentMatch,\n        })}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <MatchParticipantList className={className} match={props.match} />\n        <MatchFinalEntry\n          className={className}\n          isCurrentMatch={props.isCurrentMatch && currentState < 3}\n          isActualMatch={isActualMatch}\n          match={props.match}\n        />\n        <MatchOverlay\n          currentMatch={props.match}\n          show={currentState === 2 && props.isCurrentMatch}\n          onOverlayComplete={onMatchComplete}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import RoundMatchListView from \"./RoundMatchListView.react\";\n\nexport default RoundMatchListView;\n","import React from \"react\";\nimport { Observer } from \"mobx-react\";\nimport \"./RoundMatchListView.scss\";\nimport classNames from \"classnames\";\nimport Round from \"../../../store/round/Round\";\nimport Match from \"../../../store/round/match/Match\";\nimport MatchView from \"../match/MatchView\";\n\n/**\n * Properties of the round match list view React component.\n */\nexport interface RoundMatchListViewProps {\n  /** CSS class */\n  className: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round;\n  /** Action to call when the current match is completed. */\n  onCurrentMatchComplete: () => void;\n}\n\n/**\n * React component for the round match list view.\n */\nexport default (props: RoundMatchListViewProps): JSX.Element => {\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n\n  return (\n    <Observer>\n      {() => (\n        <div className={classNames(`${props.className}__list`)}>\n          {props.round.matches\n            .filter(\n              (_: Match, index: number): boolean => index <= currentMatchIndex,\n            )\n            .map(\n              (match: Match): JSX.Element => (\n                <MatchView\n                  key={match.fullId}\n                  match={match}\n                  isCurrentMatch={match.id === props.matchId}\n                  onMatchComplete={props.onCurrentMatchComplete}\n                />\n              ),\n            )}\n        </div>\n      )}\n    </Observer>\n  );\n};\n","import { withTranslation } from \"react-i18next\";\nimport RoundTitle from \"./RoundTitle.react\";\n/**\n * React component for the round title.\n */\nexport default withTranslation()(RoundTitle);\n","import React from \"react\";\nimport \"./RoundTitle.scss\";\nimport Round from \"../../../store/round/Round\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the round title React component.\n */\nexport interface RoundTitleProps extends WithTranslation {\n  /** The details of the current round. */\n  round: Round;\n}\n\n/**\n * React component for the round title.\n */\nexport default (props: RoundTitleProps): JSX.Element => {\n  const roundId: string = props.round.id;\n  return (\n    <h2>\n      <Trans i18nKey=\"roundView.title\">Round {{ roundId }}</Trans>\n    </h2>\n  );\n};\n","import { createObserver } from \"../../../util\";\nimport RoundDetails from \"./RoundDetails.react\";\n\nexport default createObserver(RoundDetails);\n","import React, { useEffect } from \"react\";\nimport \"./RoundDetails.scss\";\nimport classNames from \"classnames\";\nimport Round from \"../../../store/round/Round\";\nimport Match from \"../../../store/round/match/Match\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport RoundMatchListView from \"./RoundMatchListView\";\nimport RoundTitle from \"./RoundTitle\";\n\n/**\n * Properties of the round details React component.\n */\nexport interface RoundDetailsProps {\n  /** CSS class */\n  className: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round;\n  /** Whether to show the round details or not. */\n  show: boolean;\n  /** Action to call when the current match is completed. */\n  onCurrentComplete: () => void;\n}\n\n/**\n * React component for the round details.\n */\nexport default (props: RoundDetailsProps): JSX.Element => {\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n  const [currentState, updateState]: AnimationStateHook = useAnimationState(\n    currentMatchIndex,\n  );\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && currentMatchIndex !== -1 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}--entering`,\n        enterDone: `${props.className}--entered`,\n        exit: \"\",\n        exitActive: `${props.className}--exiting`,\n        exitDone: `${props.className}--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(props.className)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <RoundTitle round={props.round} />\n        <RoundMatchListView\n          key={`${props.round.id}:${props.matchId}`}\n          className={props.className}\n          round={props.round}\n          matchId={props.matchId}\n          onCurrentMatchComplete={props.onCurrentComplete}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import React, { useEffect, Fragment } from \"react\";\nimport \"./RoundView.scss\";\nimport Round from \"../../store/round/Round\";\nimport Match from \"../../store/round/match/Match\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  runOnDelay,\n  getNormalizedSpeed,\n  getMatchRedirect,\n} from \"../../util/index\";\nimport RoundDetails from \"./_partial/RoundDetails\";\nimport { CSSTransition } from \"react-transition-group\";\n\n/**\n * Properties of the round view React component.\n */\nexport interface RoundViewProps {\n  /** Whether to show the round or not. */\n  show: boolean;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round | undefined;\n  /** Action to call when the view has finished showing the round. */\n  onRoundComplete: () => void;\n}\n\n/**\n * Returns a redirect to the given round and match if required.\n * @param {boolean} required Whether the redirect is required or not.\n * @param {Round} round The details of the round.\n * @param {number} matchIndex The index of the match to redirect to.\n * @return {JSX.Element | null} The redirect if it is required, or null if it is not.\n */\nexport const getRoundRedirectIfRequired = (\n  required: boolean = false,\n  round: Round,\n  matchIndex: number,\n): JSX.Element | null =>\n  required ? getMatchRedirect(round.id, round.matches[matchIndex].id) : null;\n\n/**\n * React component for the round view.\n */\nexport default (props: RoundViewProps): JSX.Element | null => {\n  if (props.round === undefined) {\n    return null;\n  }\n\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n  const className: string = \"round\";\n\n  const [\n    currentState,\n    updateState,\n    ,\n    setState,\n  ]: AnimationStateHook = useAnimationState(currentMatchIndex);\n  const shouldNextRedirect: boolean =\n    currentState > 0 &&\n    currentMatchIndex !== currentState &&\n    currentMatchIndex !== -1 &&\n    currentState < props.round.matches.length;\n\n  useEffect(\n    runOnPredicate(currentState === props.round.matches.length, () =>\n      runOnDelay(props.onRoundComplete, getNormalizedSpeed(500)),\n    ),\n    [currentState],\n  );\n\n  useEffect(() => setState(currentMatchIndex), [currentMatchIndex, props.matchId, setState]);\n\n  return (\n    <CSSTransition\n      in={props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: \"round--entering\",\n        enterDone: \"round--entered\",\n        exit: \"\",\n        exitActive: \"round--exiting\",\n        exitDone: \"round--exited\",\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <Fragment>\n        <RoundDetails\n          className={className}\n          round={props.round}\n          show={currentState !== props.round.matches.length}\n          matchId={props.matchId}\n          onCurrentComplete={updateState}\n        />\n        {getRoundRedirectIfRequired(currentMatchIndex === -1, props.round, 0)}\n        {getRoundRedirectIfRequired(\n          shouldNextRedirect,\n          props.round,\n          currentState,\n        )}\n      </Fragment>\n    </CSSTransition>\n  );\n};\n","import { createObserver } from \"../../util\";\nimport RoundView from \"./RoundView.react\";\n\nexport default createObserver(RoundView);\n","import { withTranslation } from \"react-i18next\";\nimport WinnerInfo from \"./WinnerInfo.react\";\n\nexport default withTranslation()(WinnerInfo);\n","import React from \"react\";\nimport \"./WinnerInfo.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../round/match/participant/card/ParticipantCard\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the winner info React component.\n */\nexport interface WinnerInfoProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner info.\n */\nexport default (props: WinnerInfoProps): JSX.Element => (\n  <div className={classNames(`${props.className}__winner`)}>\n    <Trans i18nKey=\"winnerOverlay.message\">\n      <ParticipantCard participant={props.winner} />\n      <h3>Won The Tournament!</h3>\n    </Trans>\n  </div>\n);\n","import WinnerOverlayView from \"./WinnerOverlayView.react\";\n\nexport default WinnerOverlayView;\n","import React from \"react\";\nimport \"./WinnerOverlayView.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport WinnerInfo from \"./WinnerInfo\";\n\n/**\n * Properties of the winner overlay main view React component.\n */\nexport interface WinnerOverlayViewProps {\n  /** CSS class */\n  className: string;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner overlay main view wrapper.\n */\nexport default (props: WinnerOverlayViewProps): JSX.Element => (\n  <div className={classNames(props.className)}>\n    <WinnerInfo {...props} />\n  </div>\n);\n","import WinnerOverlay from \"./WinnerOverlay.react\";\nimport { createObserver } from \"../../util\";\n\nexport default createObserver(WinnerOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./WinnerOverlay.scss\";\nimport Participant from \"../../store/round/match/participant/Participant\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  getNormalizedSpeed,\n  runOnPredicate,\n} from \"../../util\";\nimport WinnerOverlayView from \"./_partial/WinnerOverlayView\";\n\n/**\n * Properties of the winner overlay React component.\n */\nexport interface WinnerOverlayProps {\n  /** Whether to show the overlay or not. */\n  show: boolean;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner overlay.\n */\nexport default (props: WinnerOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"winner-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <WinnerOverlayView className={className} winner={props.winner} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import { observer, inject } from \"mobx-react\";\nimport SpeedOption from \"./SpeedOption.react\";\n\n/**\n * React component for the animation speed option.\n */\nexport default inject(\"config\")(observer(SpeedOption));\n","import React from \"react\";\nimport \"./SpeedOption.scss\";\nimport classNames from \"classnames\";\nimport Config from \"../../../store/config/Config\";\n\n/**\n * Properties of the animation speed option React component.\n */\nexport interface SpeedOptionProps {\n  /** CSS class */\n  className: string;\n  /** @ignore The application config. */\n  config?: Config;\n  /** The animation speed option value. */\n  speed: number;\n}\n\n/**\n * React component for the animation speed option.\n */\nexport default (props: SpeedOptionProps): JSX.Element => (\n  <button\n    key={props.speed}\n    className={classNames(`${props.className}__option`, {\n      \"button-primary\": props.speed === props.config!.speed,\n    })}\n    onClick={() => props.config!.setSpeed(props.speed)}\n  >\n    {`${props.speed}x`}\n  </button>\n);\n","import React from \"react\";\nimport \"./SpeedControl.scss\";\nimport classNames from \"classnames\";\nimport AnimationSpeed from \"../../store/config/AnimationSpeed\";\nimport SpeedOption from \"./_partial/SpeedOption\";\n\nconst allAnimationValues = AnimationSpeed.getValues();\n\n/**\n * React component for the animation speed controller.\n */\nexport default (props: {}): JSX.Element => {\n  const className: string = \"speed-control\";\n\n  return (\n    <div className={classNames(className)}>\n      {allAnimationValues.map(\n        (speed: number): JSX.Element => (\n          <SpeedOption\n            className={className}\n            key={`${speed}-speed`}\n            speed={speed}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import SpeedControl from \"./SpeedControl.react\";\n\nexport default SpeedControl;\n","import AppDevTools from \"./AppDevTools.react\";\n\nexport default AppDevTools;\n","import React, { Fragment } from \"react\";\nimport { isDevEnvironment } from \"../../util\";\nimport DevTools from \"mobx-react-devtools\";\n\n/**\n * React component for the tournament application devtools.\n */\nexport default (): JSX.Element | null =>\n  isDevEnvironment ? (\n    <Fragment>\n      <DevTools />\n    </Fragment>\n  ) : null;\n","import { createObserver } from \"../../../util\";\nimport LoserInfo from \"./LoserInfo.react\";\n\nexport default createObserver(LoserInfo);\n","import React, { useEffect } from \"react\";\nimport \"./LoserInfo.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../round/match/participant/card/ParticipantCard\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  getNormalizedSpeed,\n  runOnPredicate,\n  isInRange,\n} from \"../../../util\";\n\n/**\n * Properties of the loser info React component.\n */\nexport interface LoserInfoProps {\n  /** CSS class */\n  className: string;\n  /** The loser details. */\n  loser: Participant;\n  /** Whether to show the entry or not. */\n  show: boolean;\n  /** Action to call when the info has finished showing the list of losers. */\n  onInfoComplete: () => void;\n}\n\n/**\n * React component for the loser info.\n */\nexport default (props: LoserInfoProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(currentState === 2, () =>\n      updateStateDelay(getNormalizedSpeed(1000)),\n    ),\n    [currentState],\n  );\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(200)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__loser--entering`,\n        enterDone: `${props.className}__loser--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__loser--exiting`,\n        exitDone: `${props.className}__loser--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n      onExited={props.onInfoComplete}\n    >\n      <div\n        className={classNames(`${props.className}__loser`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(200)}ms ease-in-out`,\n        }}\n      >\n        <ParticipantCard participant={props.loser} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import { withTranslation } from \"react-i18next\";\nimport LoserOverlayView from \"./LoserOverlayView.react\";\n\nexport default withTranslation()(LoserOverlayView);\n","import React, { useEffect } from \"react\";\nimport \"./LoserOverlayView.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport LoserInfo from \"./LoserInfo\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the loser overlay view React component.\n */\nexport interface LoserOverlayViewProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The losers of a round. */\n  losers: Participant[];\n  /** Action to call when the overlay has finished showing the list of losers. */\n  onViewComplete: () => void;\n}\n\n/**\n * React component for the loser overlay view.\n */\nexport default (props: LoserOverlayViewProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n\n  useEffect(\n    runOnPredicate(currentState === props.losers.length, props.onViewComplete),\n  );\n\n  return (\n    <div className={classNames(props.className)}>\n      <h2>\n        <Trans i18nKey=\"loserOverlay.title\" count={props.losers.length}>\n          Losers\n        </Trans>\n      </h2>\n      {props.losers.map(\n        (loser: Participant, index: number): JSX.Element => (\n          <LoserInfo\n            key={loser.name}\n            className={props.className}\n            show={currentState === index}\n            loser={loser}\n            onInfoComplete={updateState}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import { createObserver } from \"../../util\";\nimport LoserOverlay from \"./LoserOverlay.react\";\n\nexport default createObserver(LoserOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./LoserOverlay.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../store/round/match/participant/Participant\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../util/index\";\nimport LoserOverlayView from \"./_partial/LoserOverlayView\";\n\n/**\n * Properties of the loser overlay React component.\n */\nexport interface LoserOverlayProps {\n  /** The losers of a round. */\n  losers: Participant[];\n  /** Action to call when the overlay has finished showing the list of losers. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the loser overlay.\n */\nexport default (props: LoserOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"loser-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState === 1}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onExited={props.onOverlayComplete}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <LoserOverlayView\n          losers={props.losers}\n          className={className}\n          onViewComplete={updateState}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import LoserOverlayView from \"./LoserOverlayView.react\";\n\nexport default LoserOverlayView;\n","import React from \"react\";\nimport Round from \"../../store/round/Round\";\nimport LoserOverlay from \"../loser-overlay/LoserOverlay\";\n\n/**\n * Properties of the tournament loser overlay view React component.\n */\nexport interface LoserOverlayViewProps {\n  /** The details of the current round. */\n  round: Round;\n  /** Whether to show the loser overlay or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the losers. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the loser overlay view.\n */\nexport default (props: LoserOverlayViewProps): JSX.Element | null => {\n  return props.show ? (\n    <LoserOverlay\n      losers={props.round.losers}\n      onOverlayComplete={props.onOverlayComplete}\n    />\n  ) : null;\n};\n","import React from \"react\";\nimport \"./TournamentTitle.scss\";\nimport {\n  Trans,\n  useTranslation,\n  UseTranslationResponse,\n  WithTranslation,\n} from \"react-i18next\";\nimport Config from \"../../store/config/Config\";\nconst isString = require(\"is-string\");\n\n/**\n * Properties of the tournament title React component.\n */\nexport interface TournamentTitleProps extends WithTranslation {\n  /** @ignore The application config. */\n  config?: Config;\n}\n\n/**\n * React component for the tournament title.\n */\nexport default (props: TournamentTitleProps): JSX.Element => {\n  const { t }: UseTranslationResponse = useTranslation();\n  const translatedTournamentName: string = t(\"tournamentView.name\");\n\n  let tournamentName: string = isString(translatedTournamentName) && !!translatedTournamentName\n    ? translatedTournamentName\n    : props.config!.name;\n\n  return (\n    <h1>\n      <Trans i18nKey=\"tournamentView.title\">\n        {{ tournamentName }} Tournament\n      </Trans>\n    </h1>\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport TournamentTitle from \"./TournamentTitle.react\";\n\n/**\n * React component for the tournament title.\n */\nexport default withTranslation()(inject(\"config\")(TournamentTitle));\n","import { observer, inject } from \"mobx-react\";\nimport LanguageOption from \"./LanguageOption.react\";\n\n/**\n * React component for the language option.\n */\nexport default inject(\"config\")(observer(LanguageOption));\n","import React from \"react\";\nimport \"./LanguageOption.scss\";\nimport classNames from \"classnames\";\nimport Config from \"../../../store/config/Config\";\n\n/**\n * Properties of the language option React component.\n */\nexport interface LanguageOptionProps {\n  /** CSS class */\n  className: string;\n  /** @ignore The application config. */\n  config?: Config;\n  /** The language option value. */\n  language: string;\n}\n\n/**\n * React component for the language option.\n */\nexport default (props: LanguageOptionProps): JSX.Element => (\n  <button\n    key={props.language}\n    className={classNames(`${props.className}__option`, {\n      \"button-primary\": props.language === props.config!.currentLanguage,\n    })}\n    onClick={() => props.config!.setCurrentLanguage(props.language)}\n  >\n    {props.language}\n  </button>\n);\n","import { inject } from \"mobx-react\";\nimport LanguageControl from \"./LanguageControl.react\";\n\n/**\n * React component for the language controller.\n */\nexport default inject(\"config\")(LanguageControl);\n","import React from \"react\";\nimport \"./LanguageControl.scss\";\nimport classNames from \"classnames\";\nimport LanguageOption from \"./_partial/LanguageOption\";\nimport Config from \"../../store/config/Config\";\n\n/**\n * Properties of the language controller React component.\n */\nexport interface LanguageControlProps {\n  /** @ignore The application config. */\n  config?: Config;\n}\n\n/**\n * React component for the language controller.\n */\nexport default (props: LanguageControlProps): JSX.Element => {\n  const className: string = \"language-control\";\n\n  return (\n    <div className={classNames(className)}>\n      {props.config!.languages.map(\n        (language: string): JSX.Element => (\n          <LanguageOption\n            key={`${language}-language`}\n            className={className}\n            language={language}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { WithTranslation } from \"react-i18next\";\nimport ServiceWorkerAlertsConfig from \"../store/config/ServiceWorkerAlertsConfig\";\nconst SweetAlert = require(\"sweetalert2-react\");\n\n/**\n * Properties of the service worker update alert React component.\n */\nexport interface ServiceWorkerUpdateAlertProps extends WithTranslation {\n  /** @ignore The service worker alerts config. */\n  serviceWorkerAlertsConfig?: ServiceWorkerAlertsConfig;\n}\n\n/**\n * React component for the service worker update alert.\n */\nexport default (props: ServiceWorkerUpdateAlertProps): JSX.Element => {\n  const [show, setShow] = useState(true);\n\n  const title: string = props.t(\"serviceWorker.updateMessage.title\");\n  const message: string = props.t(\"serviceWorker.updateMessage.message\");\n\n  return (\n    <SweetAlert.default\n      show={show && props.serviceWorkerAlertsConfig!.updated}\n      type=\"warning\"\n      title={title}\n      text={message}\n      onConfirm={() => {\n        setShow(false);\n        props.serviceWorkerAlertsConfig!.setIsUpdated(false);\n      }}\n    />\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ServiceWorkerUpdateAlert from \"./ServiceWorkerUpdateAlert.react\";\nimport { createObserver } from \"../util\";\n\n/**\n * React component for the service worker add alert.\n */\nexport default withTranslation()(\n  inject(\"serviceWorkerAlertsConfig\")(createObserver(ServiceWorkerUpdateAlert)),\n);\n","import React, { useState } from \"react\";\nimport { WithTranslation } from \"react-i18next\";\nimport ServiceWorkerAlertsConfig from \"../store/config/ServiceWorkerAlertsConfig\";\nconst SweetAlert = require(\"sweetalert2-react\");\n\n/**\n * Properties of the service worker add alert React component.\n */\nexport interface ServiceWorkerAddAlertProps extends WithTranslation {\n  /** @ignore The service worker alerts config. */\n  serviceWorkerAlertsConfig?: ServiceWorkerAlertsConfig;\n}\n\n/**\n * React component for the service worker add alert.\n */\nexport default (props: ServiceWorkerAddAlertProps): JSX.Element => {\n  const [show, setShow] = useState(true);\n\n  const title: string = props.t(\"serviceWorker.offlineMessage.title\");\n  const message: string = props.t(\"serviceWorker.offlineMessage.message\");\n\n  return (\n    <SweetAlert.default\n      show={show && props.serviceWorkerAlertsConfig!.added}\n      type=\"success\"\n      title={title}\n      text={message}\n      onConfirm={() => {\n        setShow(false);\n        props.serviceWorkerAlertsConfig!.setIsAdded(false);\n      }}\n    />\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ServiceWorkerAddAlert from \"./ServiceWorkerAddAlert.react\";\nimport { createObserver } from \"../util\";\n\n/**\n * React component for the service worker add alert.\n */\nexport default withTranslation()(\n  inject(\"serviceWorkerAlertsConfig\")(createObserver(ServiceWorkerAddAlert)),\n);\n","import React, { useState, useEffect } from \"react\";\nimport \"./TournamentView.scss\";\nimport classNames from \"classnames\";\nimport Tournament from \"../store/Tournament\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  ShowOverlayHook,\n  runOnPredicate,\n  getMatchRedirect,\n} from \"../util\";\nimport RoundView from \"./round/RoundView\";\nimport Round from \"../store/round/Round\";\nimport WinnerOverlay from \"./winner-overlay/WinnerOverlay\";\nimport SpeedControl from \"./speed/SpeedControl\";\nimport AppDevTools from \"./_partial/AppDevTools\";\nimport LoserOverlayView from \"./_partial/LoserOverlayView\";\nimport TournamentTitle from \"./_partial/TournamentTitle\";\nimport LanguageControl from \"./language/LanguageControl\";\nimport ServiceWorkerUpdateAlert from \"../service-worker/ServiceWorkerUpdateAlert\";\nimport ServiceWorkerAddAlert from \"../service-worker/ServiceWorkerAddAlert\";\n\n/**\n * Properties of the tournament view React component.\n */\nexport interface TournamentViewProps {\n  /** The ID of the current round. */\n  roundId: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the tournament. */\n  tournament: Tournament;\n}\n\n/**\n * Returns a redirect to the given round and match if required.\n * @param {boolean} required Whether the redirect is required or not.\n * @param {Tournament} tournament The details of the tournament.\n * @param {number} roundIndex The index of the round to redirect to.\n * @param {number} matchIndex The index of the match to redirect to.\n * @return {JSX.Element | null} The redirect if it is required, or null if it is not.\n */\nexport const getRoundRedirectIfRequired = (\n  required: boolean = false,\n  tournament: Tournament,\n  roundIndex: number,\n  matchIndex: number,\n): JSX.Element | null =>\n  required\n    ? getMatchRedirect(\n        tournament.rounds[roundIndex].id,\n        tournament.rounds[roundIndex].matches[matchIndex].id,\n      )\n    : null;\n\n/**\n * React component for the tournament view.\n */\nexport default (props: TournamentViewProps): JSX.Element => {\n  const currentRoundIndex: number = props.tournament.rounds.findIndex(\n    (round: Round): boolean => round.id === props.roundId,\n  );\n  const isLastRound: boolean = props.tournament.lastRound.id === props.roundId;\n\n  const [showOverlay, setShowOverlay]: ShowOverlayHook = useState(\n    false as boolean,\n  );\n\n  const [\n    currentState,\n    updateState,\n    ,\n    setState,\n  ]: AnimationStateHook = useAnimationState();\n  const shouldNextRedirect: boolean =\n    currentState > 0 &&\n    currentRoundIndex + 1 !== currentState &&\n    currentState <= props.tournament.rounds.length;\n\n  useEffect(\n    runOnPredicate(currentState === 0, () => setState(currentRoundIndex + 1)),\n  );\n\n  return (\n    <div\n      key={`round-${currentRoundIndex}`}\n      className={classNames(\"tournament\")}\n    >\n      <TournamentTitle />\n      <RoundView\n        key={`${props.roundId}`}\n        show={currentState === currentRoundIndex + 1}\n        round={props.tournament.rounds[currentRoundIndex]}\n        matchId={props.matchId}\n        onRoundComplete={() => setShowOverlay(true)}\n      />\n      <LoserOverlayView\n        show={showOverlay && !isLastRound}\n        round={props.tournament.rounds[currentRoundIndex]}\n        onOverlayComplete={() => {\n          setShowOverlay(false);\n          updateState();\n        }}\n      />\n      <WinnerOverlay\n        show={showOverlay && isLastRound}\n        winner={props.tournament.winner}\n      />\n      {getRoundRedirectIfRequired(\n        currentRoundIndex === -1,\n        props.tournament,\n        0,\n        0,\n      )}\n      {getRoundRedirectIfRequired(\n        shouldNextRedirect,\n        props.tournament,\n        Math.max(currentRoundIndex, currentState - 1),\n        0,\n      )}\n      <SpeedControl />\n      <LanguageControl />\n      <ServiceWorkerAddAlert />\n      <ServiceWorkerUpdateAlert />\n      <AppDevTools />\n    </div>\n  );\n};\n","import TournamentView from \"./TournamentView.react\";\n\nexport default TournamentView;\n","import React, { Component } from \"react\";\nimport { Switch, Route, RouteComponentProps } from \"react-router\";\nimport { observer } from \"mobx-react\";\nimport Tournament from \"./store/Tournament\";\nimport Round from \"./store/round/Round\";\nimport TournamentView from \"./tournament/TournamentView\";\nimport { getMatchRedirect } from \"./util\";\n\n/**\n * Route related properties of the application redirect React component.\n */\nexport interface AppRedirectProps {\n  /** The ID of the current round. */\n  roundId?: string;\n  /** The ID of the current match. */\n  matchId?: string;\n  /** The ID of the first round of the tournament. */\n  firstRoundId?: string;\n  /** The ID of the first match of the tournament. */\n  firstMatchId?: string;\n}\n\n/**\n * Properties of the application router React component.\n */\nexport interface AppRouterProps extends RouteComponentProps<AppRedirectProps> {\n  /** The details of the tournament. */\n  tournament: Tournament;\n}\n\n/**\n * React component that returns a redirect depending upon what route properties are present.\n */\nconst AppRedirect = (props: AppRedirectProps): JSX.Element =>\n  props.roundId\n    ? getMatchRedirect(props.roundId, props.firstMatchId)\n    : getMatchRedirect(props.firstRoundId, props.firstMatchId);\n\n/**\n * React component for the application router.\n */\n@observer\nexport default class AppRouter extends Component<AppRouterProps> {\n  /**\n   * Returns the route params.\n   * @return {AppRedirectProps} The route params.\n   */\n  private _getParams = (\n    routeProps: RouteComponentProps<AppRedirectProps>,\n  ): AppRedirectProps => routeProps.match.params;\n\n  /**\n   * Returns the route for the application.\n   * @return {JSX.Element} The application route.\n   */\n  private _getApplicationRoute = (): JSX.Element => (\n    <Route\n      exact\n      path=\"/round/:roundId/match/:matchId\"\n      render={this._getTournament}\n    />\n  );\n\n  /**\n   * Returns the main tournament.\n   * @return {JSX.Element} The main tournament.\n   */\n  private _getTournament = (\n    props: RouteComponentProps<AppRedirectProps>,\n  ): JSX.Element => (\n    <TournamentView\n      key={this._getParams(props).roundId as string}\n      tournament={this.props.tournament}\n      roundId={this._getParams(props).roundId as string}\n      matchId={this._getParams(props).matchId as string}\n    />\n  );\n\n  /**\n   * Returns the route for a partial redirect.\n   * @return {JSX.Element} The partial redirect route.\n   */\n  private _getPartialRoute = (): JSX.Element => (\n    <Route exact path=\"/round/:roundId\" render={this._getPartialAppRedirect} />\n  );\n\n  /**\n   * Returns the application redirect for the partial redirect.\n   * @return {JSX.Element} The application redirect.\n   */\n  private _getPartialAppRedirect = (\n    props: RouteComponentProps<AppRedirectProps>,\n  ): JSX.Element =>\n    this._getCurrentRoundDetails(this._getParams(props).roundId as string) ? (\n      <AppRedirect\n        roundId={this._getParams(props).roundId as string}\n        firstMatchId={this._getFirstMatchIdOfCurrentRound(this._getParams(props)\n          .roundId as string)}\n      />\n    ) : (\n      this._getUnknownAppRedirect()\n    );\n\n  /**\n   * Returns the route for an unknown redirect.\n   * @return {JSX.Element} The unknown redirect route.\n   */\n  private _getUnknownRoute = (): JSX.Element => (\n    <Route exact path=\"*\" render={this._getUnknownAppRedirect} />\n  );\n\n  /**\n   * Returns the application redirect for the unknown redirect.\n   * @return {JSX.Element} The application redirect.\n   */\n  private _getUnknownAppRedirect = (): JSX.Element => (\n    <AppRedirect\n      roundId={this._getFirstRoundId()}\n      firstMatchId={this._getFirstMatchIdOfCurrentRound(\n        this._getFirstRoundId(),\n      )}\n    />\n  );\n\n  /**\n   * Returns the ID of the first round.\n   * @return {string} The first round ID.\n   */\n  private _getFirstRoundId = (): string => this.props.tournament.firstRound.id;\n\n  /**\n   * Returns a filter for finding the current round.\n   * @param {string} roundId The ID of the current round.\n   * @return {(round: Round) => boolean} The filter function.\n   */\n  private _getIsCurrentRoundFilter = (\n    roundId: string,\n  ): ((round: Round) => boolean) => (round: Round): boolean =>\n    round.id === roundId;\n\n  /**\n   * Returns the details of the round of the given ID.\n   * @param {string} roundId The ID of the round.\n   * @return {Round} The round details.\n   */\n  private _getCurrentRoundDetails = (roundId: string): Round =>\n    this.props.tournament.rounds.find(\n      this._getIsCurrentRoundFilter(roundId),\n    ) as Round;\n\n  /**\n   * Returns the ID of the first match of the given round.\n   * @param {string} roundId The ID of the round.\n   * @return {string} The first match ID.\n   */\n  private _getFirstMatchIdOfCurrentRound = (roundId: string): string =>\n    this._getCurrentRoundDetails(roundId).firstMatch.id;\n\n  /**\n   * Renders the component.\n   * @return {JSX.Element} The rendered component.\n   */\n  public render = (): JSX.Element => (\n    <Switch>\n      {this._getApplicationRoute()}\n      {this._getPartialRoute()}\n      {this._getUnknownRoute()}\n    </Switch>\n  );\n}\n","import { withRouter } from \"react-router\";\nimport AppRouter from \"./AppRouter.react\";\n\nexport default withRouter(AppRouter);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nlet status = 0;\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        if (status > 0) {\n          return;\n        }\n        ++status;\n\n        const installingWorker =\n          registration.installing || registration.waiting;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (status > 1) {\n            return;\n          }\n          ++status;\n\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n        if (installingWorker.state === \"installed\") {\n          installingWorker.onstatechange(new Event(\"unknown\"));\n        }\n      };\n      if (registration.waiting || registration.installing) {\n        registration.onupdatefound(new Event(\"unknown\"));\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed, action } from \"mobx\";\n\n/**\n * Class representing the basic configuration for the service worker alerts.\n */\nexport default class ServiceWorkerAlertsConfig {\n  /** Whether to show the added message. */\n  @observable private _added: boolean;\n  /** Whether to show the updated message. */\n  @observable private _updated: boolean;\n\n  /** The singleton instance of the class, or null if not yet created. */\n  private static _instance: ServiceWorkerAlertsConfig | null = null;\n\n  private constructor() {\n    this._added = false;\n    this._updated = false;\n  }\n\n  /**\n   * Get an instance of the service worker config, which is a singleton.\n   * @return {ServiceWorkerAlertsConfig} The instance of a service worker config.\n   */\n  public static getInstance(): ServiceWorkerAlertsConfig {\n    return ServiceWorkerAlertsConfig._instance\n      ? ServiceWorkerAlertsConfig._instance\n      : (ServiceWorkerAlertsConfig._instance = new ServiceWorkerAlertsConfig());\n  }\n\n  /**\n   * Get whether the service worker was added.\n   * @return {boolean} Whether the service worker was added or not.\n   */\n  @computed public get added(): boolean {\n    return this._added;\n  }\n\n  /**\n   * Get whether the service worker was updated.\n   * @return {boolean} Whether the service worker was updated or not.\n   */\n  @computed public get updated(): boolean {\n    return this._updated;\n  }\n\n  /**\n   * Set whether the service worker was added.\n   * @param {boolean} value Whether the service worker was added.\n   */\n  @action public setIsAdded(value: boolean): void {\n    this._added = value;\n  }\n\n  /**\n   * Set whether the service worker was updated.\n   * @param {boolean} value Whether the service worker was updated.\n   */\n  @action public setIsUpdated(value: boolean): void {\n    this._updated = value;\n  }\n}\n","import Participant from \"./participant/Participant\";\nimport RandomGenerator from \"../../config/RandomGenerator\";\nimport Config from \"../../config/Config\";\nconst gcd = require(\"gcd\");\n\n/**\n * Class containing details of a match.\n */\nexport default class Match {\n  /** The ID of the match. */\n  private _id: string;\n  /** The ID of the round the match is a part of. */\n  private _roundId: string;\n  /** The list of participants of the match. */\n  private _participants: Participant[];\n  /** The winner of the match. */\n  private _winner: Participant;\n  /** The match conclusion message. */\n  private _message: string;\n  /** The GCD of all participant weights. */\n  private _participantWeightGcd: number;\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: { [k: string]: number } = {};\n\n  /**\n   * Returns the weight of the given participant.\n   * @param {Participant} participant The participant to get the weight of.\n   * @return {number} The participant weight.\n   */\n  private _getParticipantWeight = (participant: Participant): number =>\n    participant.weight;\n\n  /**\n   * Returns the GCD of the weights of all participants of the match.\n   * @return {number} The GCD of the participant weights.\n   */\n  private _getParticipantWeightsGcd = (): number =>\n    this._participants\n      .map(this._getParticipantWeight)\n      .reduce(\n        (prevGcd: number, weight: number): number => gcd(prevGcd, weight),\n      );\n\n  /**\n   * Returns a list of cloned participants whose count is the weight of the participant divided by the GCD of weights of all participants in the list.\n   * @param {Participant} participant The participant to clone.\n   * @return {Participant[]} The list of cloned participants.\n   */\n  private _cloneParticipantByWeight = (\n    participant: Participant,\n  ): Participant[] => {\n    const participants: Participant[] = [];\n    for (let i = 0; i < participant.weight / this._participantWeightGcd; i++) {\n      participants.push(participant);\n    }\n    return participants;\n  };\n\n  /**\n   * Picks and returns a winner of the match from the list of participants at random, with participant weight factored in.\n   * @return {Participant} The participant selected as the winner.\n   */\n  private _getWinner = (): Participant =>\n    RandomGenerator.pick(\n      this._participants.flatMap(this._cloneParticipantByWeight),\n    );\n\n  /**\n   * Returns a random conclusion message for the match.\n   * @return {string} The conclusion message.\n   */\n  private _getMessage = (): string => this._config.getRandomMessage();\n\n  /**\n   * Returns a unique ID for the match based on the round it belongs to.\n   * @param {string} roundId The ID of the round the match belongs to.\n   * @return {string} The unique match ID.\n   */\n  private _getMatchId = (roundId: string): string => {\n    if (!Match.counter[roundId]) {\n      Match.counter[roundId] = 1;\n    }\n    return `${Match.counter[roundId]++}`;\n  };\n\n  public constructor(\n    config: Config,\n    participants: Participant[],\n    roundId: string,\n  ) {\n    this._config = config;\n\n    this._id = `${this._getMatchId(roundId)}`;\n    this._roundId = roundId;\n    this._participants = participants;\n    this._participantWeightGcd = this._getParticipantWeightsGcd();\n    this._winner = this._getWinner();\n    this._message = this._getMessage();\n  }\n\n  /**\n   * Returns whether the participant is the winner of the match or not.\n   * @param  {Participant} participant The participant to check.\n   * @return {boolean} Whether the participant is the winner of the match or not.\n   */\n  private _isNotWinner = (participant: Participant): boolean =>\n    !participant.equals(this._winner);\n\n  /**\n   * Get the match ID.\n   * @return {string} The unique ID of the match within the context of the round it belongs to.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the complete match ID (prepended with round ID).\n   * @return {string} The unique complete ID of the match.\n   */\n  public get fullId(): string {\n    return `${this._roundId}:${this._id}`;\n  }\n\n  /**\n   * Get the list of losers of the match.\n   * @return {Participant[]} The list of losers.\n   */\n  public get losers(): Participant[] {\n    return this._participants.filter(this._isNotWinner);\n  }\n\n  /**\n   * Get the list of participants in the match.\n   * @return {Participant[]} The list of participants.\n   */\n  public get participants(): Participant[] {\n    return this._participants;\n  }\n\n  /**\n   * Get the winner of the match.\n   * @return {Participant} The winner.\n   */\n  public get winner(): Participant {\n    return this._winner;\n  }\n\n  /**\n   * Get the conslusion message of the match.\n   * @return {string} The message.\n   */\n  public get message(): string {\n    return this._message;\n  }\n}\n","import Participant from \"./match/participant/Participant\";\nimport Config from \"../config/Config\";\nimport chunk from \"lodash.chunk\";\nimport Match from \"./match/Match\";\nimport last from \"lodash.last\";\nimport RandomGenerator from \"../config/RandomGenerator\";\n\n/**\n * Class containing the details of a round.\n */\nexport default class Round {\n  /** The ID of the round. */\n  private _id: string;\n  /** The list of matches of the round. */\n  private _matches: Match[];\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: number = 1;\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /**\n   * Returns a shuffled list of the given participants.\n   * @param  {Participant[]} participants The list of participants to shuffle.\n   * @return {Participant[]} The shuffled list.\n   */\n  private _shuffleParticipants = (participants: Participant[]): Participant[] =>\n    RandomGenerator.shuffle(participants);\n\n  /**\n   * Creates a match with the given list of participants\n   * @param  {Participant[]} participants The list of participants to create the match with.\n   * @return {Match} The created match.\n   */\n  private _createMatch = (participants: Participant[]): Match =>\n    new Match(this._config, participants, this._id);\n\n  /**\n   * Returns a list of matches with all the participants of the round.\n   * @param  {Participant[]} participants The list of participants to create the matches with.\n   * @return {Match[]} The list of created matches.\n   */\n  private _getMatches = (participants: Participant[]): Match[] =>\n    chunk(\n      this._shuffleParticipants(participants),\n      this._config.participantsPerMatch,\n    ).map(this._createMatch);\n\n  public constructor(config: Config, participants: Participant[]) {\n    this._config = config;\n\n    this._id = `${Round.counter++}`;\n    this._matches = this._getMatches(participants);\n  }\n\n  /**\n   * Returns the list of participants of a given match.\n   * @param  {Match} match The match whose participants to get.\n   * @return {Participant[]} The list of participants of the match.\n   */\n  private _getMatchParticipants = (match: Match): Participant[] =>\n    match.participants;\n\n  /**\n   * Returns the winner of a given match.\n   * @param  {Match} match The match whose winner to get.\n   * @return {Participant[]} The winner of the match.\n   */\n  private _getMatchWinner = (match: Match): Participant => match.winner;\n\n  /**\n   * Returns the list of losers of a given match.\n   * @param  {Match} match The match whose losers to get.\n   * @return {Participant[]} The list of losers of the match.\n   */\n  private _getMatchLosers = (match: Match): Participant[] => match.losers;\n\n  /**\n   * Get the round ID.\n   * @return {string} The unique ID of the round.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the list of matches in the round.\n   * @return {Match[]} The list of matches.\n   */\n  public get matches(): Match[] {\n    return this._matches;\n  }\n\n  /**\n   * Get the first match of the round.\n   * @return {Match} The first match.\n   */\n  public get firstMatch(): Match {\n    return this._matches[0];\n  }\n\n  /**\n   * Get the last match of the round.\n   * @return {Match} The last match.\n   */\n  public get lastMatch(): Match {\n    return last(this._matches) as Match;\n  }\n\n  /**\n   * Get the list of participants in the round.\n   * @return {Participant[]} The list of participants.\n   */\n  public get participants(): Participant[] {\n    return this._matches.flatMap(this._getMatchParticipants);\n  }\n\n  /**\n   * Get the list of winners in the round.\n   * @return {Participant[]} The list of winners.\n   */\n  public get winners(): Participant[] {\n    return this._matches.map(this._getMatchWinner);\n  }\n\n  /**\n   * Get the list of losers in the round.\n   * @return {Participant[]} The list of losers.\n   */\n  public get losers(): Participant[] {\n    return this._matches.flatMap(this._getMatchLosers);\n  }\n}\n","import Participant from \"./round/match/participant/Participant\";\nimport last from \"lodash.last\";\nimport Config from \"./config/Config\";\nimport Round from \"./round/Round\";\n\n/**\n * Class containing the details of a tournament.\n */\nexport default class Tournament {\n  /** The list of rounds of the tournament. */\n  private _rounds: Round[];\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /**\n   * Creates a round with the given list of participants.\n   * @param  {Participant[]} participants The list of participants to create the round with.\n   * @return {Round} The created round.\n   */\n  private _createRound = (participants: Participant[]): Round =>\n    new Round(this._config, participants);\n\n  /**\n   * Returns a list of rounds with all the participants of the tournament.\n   * @return {Round[]} The list of created rounds.\n   */\n  private _getRounds = (): Round[] => {\n    this._rounds = [this._createRound(this._config.allParticipants)];\n    while (!this._hasWinner) {\n      this._rounds.push(this._createRound(this.lastRound.winners));\n    }\n    return this._rounds;\n  };\n\n  public constructor(config: Config) {\n    this._config = config;\n\n    this._rounds = this._getRounds();\n  }\n\n  /**\n   * Returns whether the tournament has a final winner or not.\n   * @return {boolean} Whether the tournament has a final winner or not.\n   */\n  private get _hasWinner(): boolean {\n    return this.lastRound.winners.length === 1;\n  }\n\n  /**\n   * Get the first round of the tournament.\n   * @return {Round} The first round.\n   */\n  public get firstRound(): Round {\n    return this._rounds[0];\n  }\n\n  /**\n   * Get the last round of the tournament.\n   * @return {Round} The last round.\n   */\n  public get lastRound(): Round {\n    return last(this._rounds) as Round;\n  }\n\n  /**\n   * Gets the list of rounds in the tournament.\n   * @return {Round[]} The rounds in the tournament.\n   */\n  public get rounds(): Round[] {\n    return this._rounds;\n  }\n\n  /**\n   * Gets the final winner of the tournament.\n   * @return {Participant} The final winner, or null if there is none.\n   */\n  public get winner(): Participant {\n    return this.lastRound.winners[0];\n  }\n}\n","import \"./i18n\"\nimport \"./index.scss\"\nimport \"skeleton-css/css/skeleton.css\"\n\nimport { Provider } from \"mobx-react\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { HashRouter } from \"react-router-dom\"\n\nimport AppRouter from \"./AppRouter\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport Config from \"./store/config/Config\"\nimport ServiceWorkerAlertsConfig from \"./store/config/ServiceWorkerAlertsConfig\"\nimport Tournament from \"./store/Tournament\"\n\nconst config: Config = Config.getInstance();\nconst serviceWorkerAlertsConfig: ServiceWorkerAlertsConfig = ServiceWorkerAlertsConfig.getInstance();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.register({\n//   onSuccess: () => serviceWorkerAlertsConfig.setIsAdded(true),\n//   onUpdate: () => serviceWorkerAlertsConfig.setIsUpdated(true),\n// });\nserviceWorker.unregister();\n\n// Create the tournament store\nconst store: Tournament = new Tournament(config);\n\n// Set the webpage title.\ndocument.title = `${config.name} Tournament`;\n\n// Render the application! :D\nReactDOM.render(\n  <HashRouter>\n    <Provider\n      config={config}\n      serviceWorkerAlertsConfig={serviceWorkerAlertsConfig}\n    >\n      <AppRouter tournament={store} />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}