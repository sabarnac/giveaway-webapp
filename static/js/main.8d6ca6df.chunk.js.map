{"version":3,"sources":["serviceWorker.ts","store/config/RandomGenerator.ts","store/round/match/Match.ts","store/round/Round.ts","store/Tournament.ts","util/index.tsx","store/round/match/participant/Avatar.ts","store/round/match/participant/Participant.ts","store/config/i18n.ts","i18n.ts","store/config/AnimationSpeed.ts","store/config/Config.ts","tournament/round/match/participant/common/_partial/ParticipantAvatarView.tsx","tournament/round/match/participant/common/_partial/ParticipantAvatarView.react.tsx","tournament/round/match/participant/common/_partial/ParticipantNameView.tsx","tournament/round/match/participant/common/_partial/ParticipantNameView.react.tsx","tournament/round/match/participant/common/index.tsx","tournament/round/match/participant/common/index.react.tsx","tournament/round/match/participant/entry/ParticipantEntry.tsx","tournament/round/match/_partial/MatchWinnerView.tsx","tournament/round/match/_partial/MatchWinnerView.react.tsx","tournament/round/match/_partial/MatchFinalEntry.tsx","tournament/round/match/_partial/MatchFinalEntry.react.tsx","tournament/round/match/_partial/MatchParticipantList.tsx","tournament/round/match/_partial/MatchParticipantList.react.tsx","tournament/round/match/overlay/_partial/MatchOverlayWinner.tsx","tournament/round/match/overlay/_partial/MatchOverlayWinner.react.tsx","tournament/round/match/overlay/_partial/MatchOverlayInterim.tsx","tournament/round/match/overlay/_partial/MatchOverlayInterim.react.tsx","tournament/round/match/participant/card/ParticipantCard.tsx","tournament/round/match/overlay/_partial/MatchOverlayParticipants.tsx","tournament/round/match/overlay/_partial/MatchOverlayParticipants.react.tsx","tournament/round/match/overlay/MatchOverlay.tsx","tournament/round/match/overlay/MatchOverlay.react.tsx","tournament/round/match/MatchView.tsx","tournament/round/match/MatchView.react.tsx","tournament/round/_partial/RoundMatchListView.tsx","tournament/round/_partial/RoundMatchListView.react.tsx","tournament/round/_partial/RoundTitle.tsx","tournament/round/_partial/RoundTitle.react.tsx","tournament/round/_partial/RoundDetails.tsx","tournament/round/_partial/RoundDetails.react.tsx","tournament/round/RoundView.react.tsx","tournament/round/RoundView.tsx","tournament/winner-overlay/_partial/WinnerInfo.tsx","tournament/winner-overlay/_partial/WinnerInfo.react.tsx","tournament/winner-overlay/_partial/WinnerOverlayView.tsx","tournament/winner-overlay/_partial/WinnerOverlayView.react.tsx","tournament/winner-overlay/WinnerOverlay.tsx","tournament/winner-overlay/WinnerOverlay.react.tsx","tournament/speed/_partial/SpeedOption.tsx","tournament/speed/_partial/SpeedOption.react.tsx","tournament/speed/SpeedControl.react.tsx","tournament/speed/SpeedControl.tsx","tournament/_partial/AppDevTools.tsx","tournament/_partial/AppDevTools.react.tsx","tournament/loser-overlay/_partial/LoserInfo.tsx","tournament/loser-overlay/_partial/LoserInfo.react.tsx","tournament/loser-overlay/_partial/LoserOverlayView.tsx","tournament/loser-overlay/_partial/LoserOverlayView.react.tsx","tournament/loser-overlay/LoserOverlay.tsx","tournament/loser-overlay/LoserOverlay.react.tsx","tournament/_partial/LoserOverlayView.tsx","tournament/_partial/LoserOverlayView.react.tsx","tournament/_partial/TournamentTitle.react.tsx","tournament/_partial/TournamentTitle.tsx","tournament/language/_partial/LanguageOption.tsx","tournament/language/_partial/LanguageOption.react.tsx","tournament/language/LanguageControl.tsx","tournament/language/LanguageControl.react.tsx","service-worker/ServiceWorkerUpdateAlert.react.tsx","service-worker/ServiceWorkerUpdateAlert.tsx","service-worker/ServiceWorkerAddAlert.react.tsx","service-worker/ServiceWorkerAddAlert.tsx","tournament/TournamentView.react.tsx","tournament/TournamentView.tsx","AppRouter.react.tsx","AppRouter.tsx","store/config/ServiceWorkerAlertsConfig.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","status","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","waiting","onstatechange","state","controller","console","log","onUpdate","onSuccess","Event","catch","error","randomEngine","Random","engines","mt19937","seed","configJson","RandomGenerator","gcd","require","Match","participants","roundId","_this","this","Object","classCallCheck","_id","_roundId","_participants","_winner","_message","_participantWeightGcd","_config","_getParticipantWeight","participant","weight","_getParticipantWeightsGcd","map","reduce","prevGcd","_cloneParticipantByWeight","i","push","_getWinner","pick","flatMap","_getMessage","getRandomMessage","_getMatchId","counter","concat","_isNotWinner","equals","filter","Round","_matches","_shuffleParticipants","shuffle","_createMatch","_getMatches","chunk","participantsPerMatch","_getMatchParticipants","_getMatchWinner","winner","_getMatchLosers","losers","last","Tournament","_rounds","_createRound","_getRounds","allParticipants","_hasWinner","lastRound","winners","length","createAvatarImage","identifier","isInRange","num","start","end","runOnDelay","action","delay","delayId","setTimeout","clearTimeout","useAnimationState","arguments","undefined","_useState","useState","_useState2","slicedToArray","currentState","setState","updateState","getNormalizedSpeed","time","Config","getInstance","speed","runOnPredicate","predicate","getMatchRedirect","matchId","react_default","a","createElement","react_router","to","createObserver","Component","props","index_module","Avatar","url","altText","_url","_altText","_isSameUrl","url1","url2","_isSameAltText","altText1","altText2","otherAvatar","inflect","Participant","name","avatar","_name","_avatar","_weight","_getOrCreateAvatar","_isSameName","name1","name2","_isSameAvatar","avatar1","avatar2","otherParticipant","titleize","i18n","resources","en","translation","lng","fallbackLng","debug","process","interpolation","escapeValue","react","wait","configLanguages","ConfigJson","lang","resourceLanguages","keys","i18nConfig","language","indexOf","forEach","Error","use","detector","initReactI18next","init","AnimationSpeed","_SPEED_MAP","Map","get","key","getValues","Array","from","values","getKeys","hasKey","has","hasValue","value","getEntries","entries","_messages","_allParticipants","_participantsPerMatch","_languages","initializerDefineProperty","_descriptor","_descriptor2","_unusedMessages","_getName","_getMessages","messages","_createParticipant","user","_getParticipants","users","_getParticipantsPerMatch","_getlLanguages","_getSpeed","_shouldPrepend","index","participantSize","_prependToLastParticipant","stringToPrepend","_formatLosers","names","join","getFormattedMessage","message","winnerName","loserNames","replace","getMessageIndex","toConsumableArray","_currentLanguage","_speed","splice","changeLanguage","_instance","observable","computed","ParticipantAvatarView","className","classNames","src","alt","ParticipantNameView","properName","ParticipantView","defineProperty","invert","assign","createParticipantView","MatchWinnerView","_useAnimationState","_useAnimationState2","useEffect","react_transition_group","in","timeout","enter","enterActive","enterDone","exit","exitActive","exitDone","mountOnEnter","unmountOnExit","style","transition","entry_ParticipantEntry","MatchFinalEntry","updateStateDelay","isCurrentMatch","isActualMatch","id","onEntered","onExited","_partial_MatchWinnerView","MatchParticipantList","inject","withTranslation","withRouter","document","hidden","setHidden","shouldNotStopOnEnd","URLSearchParams","search","updateHidden","addEventListener","removeEventListener","translatedMessagesList","t","useTranslation","returnObjects","count","currentMatch","matchMessage","messageIndex","isArray","loser","onWinnerComplete","show","dist_es","i18nKey","onInterimComplete","react_spinners","sizeUnit","size","card_ParticipantCard","slice","onOverlayComplete","_partial_MatchOverlayParticipants","_partial_MatchOverlayInterim","_partial_MatchOverlayWinner","onMatchComplete","matchRef","useRef","onEntering","current","scrollIntoView","behavior","block","inline","ref","_partial_MatchParticipantList","_partial_MatchFinalEntry","overlay_MatchOverlay","RoundMatchListView","currentMatchIndex","round","matches","findIndex","_","match_MatchView","fullId","onCurrentMatchComplete","_partial_RoundTitle","_partial_RoundMatchListView","onCurrentComplete","getRoundRedirectIfRequired","required","matchIndex","shouldNextRedirect","onRoundComplete","_partial_RoundDetails","WinnerOverlayView","_partial_WinnerInfo","_partial_WinnerOverlayView","observer","button-primary","onClick","setSpeed","allAnimationValues","SpeedControl","_partial_SpeedOption","AppDevTools","onInfoComplete","onViewComplete","_partial_LoserInfo","_partial_LoserOverlayView","LoserOverlayView","loser_overlay_LoserOverlay","isString","translatedTournamentName","tournamentName","currentLanguage","setCurrentLanguage","languages","_partial_LanguageOption","SweetAlert","setShow","title","default","serviceWorkerAlertsConfig","updated","type","text","onConfirm","setIsUpdated","ServiceWorkerAddAlert_react_SweetAlert","added","setIsAdded","tournament","roundIndex","rounds","TournamentView","currentRoundIndex","isLastRound","showOverlay","setShowOverlay","_partial_TournamentTitle","round_RoundView","tournament_partial_LoserOverlayView","winner_overlay_WinnerOverlay","Math","max","speed_SpeedControl","language_LanguageControl","ServiceWorkerAddAlert","ServiceWorkerUpdateAlert","AppRedirect","firstMatchId","firstRoundId","AppRouter","_getParams","routeProps","params","_getApplicationRoute","exact","path","render","_getTournament","tournament_TournamentView","_getPartialRoute","_getPartialAppRedirect","_getCurrentRoundDetails","AppRouter_react_AppRedirect","_getFirstMatchIdOfCurrentRound","_getUnknownAppRedirect","_getUnknownRoute","_getFirstRoundId","firstRound","_getIsCurrentRoundFilter","find","firstMatch","ServiceWorkerAlertsConfig","ServiceWorkerAlertsConfig_descriptor","ServiceWorkerAlertsConfig_descriptor2","_added","_updated","URL","href","origin","fetch","response","contentType","headers","ready","unregister","reload","checkValidServiceWorker","store","ReactDOM","react_router_dom","src_AppRouter","getElementById"],"mappings":"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","file":"static/js/main.8d6ca6df.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nlet status = 0;\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        if (status > 0) {\n          return;\n        }\n        ++status;\n\n        const installingWorker =\n          registration.installing || registration.waiting;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (status > 1) {\n            return;\n          }\n          ++status;\n\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n        if (installingWorker.state === \"installed\") {\n          installingWorker.onstatechange(new Event(\"unknown\"));\n        }\n      };\n      if (registration.waiting || registration.installing) {\n        registration.onupdatefound(new Event(\"unknown\"));\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Random, { Engine } from \"random-js\";\nimport configJson from \"../../config/config.json\";\n\n// Create a mersenne twister engine.\nconst randomEngine: Engine = Random.engines.mt19937().seed(configJson.seed);\n// Export a randomizer using the created engine.\nexport default new Random(randomEngine);\n","import Participant from \"./participant/Participant\";\nimport RandomGenerator from \"../../config/RandomGenerator\";\nimport Config from \"../../config/Config\";\nconst gcd = require(\"gcd\");\n\n/**\n * Class containing details of a match.\n */\nexport default class Match {\n  /** The ID of the match. */\n  private _id: string;\n  /** The ID of the round the match is a part of. */\n  private _roundId: string;\n  /** The list of participants of the match. */\n  private _participants: Participant[];\n  /** The winner of the match. */\n  private _winner: Participant;\n  /** The match conclusion message. */\n  private _message: string;\n  /** The GCD of all participant weights. */\n  private _participantWeightGcd: number;\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: { [k: string]: number } = {};\n\n  /**\n   * Returns the weight of the given participant.\n   * @param {Participant} participant The participant to get the weight of.\n   * @return {number} The participant weight.\n   */\n  private _getParticipantWeight = (participant: Participant): number =>\n    participant.weight;\n\n  /**\n   * Returns the GCD of the weights of all participants of the match.\n   * @return {number} The GCD of the participant weights.\n   */\n  private _getParticipantWeightsGcd = (): number =>\n    this._participants\n      .map(this._getParticipantWeight)\n      .reduce(\n        (prevGcd: number, weight: number): number => gcd(prevGcd, weight),\n      );\n\n  /**\n   * Returns a list of cloned participants whose count is the weight of the participant divided by the GCD of weights of all participants in the list.\n   * @param {Participant} participant The participant to clone.\n   * @return {Participant[]} The list of cloned participants.\n   */\n  private _cloneParticipantByWeight = (\n    participant: Participant,\n  ): Participant[] => {\n    const participants: Participant[] = [];\n    for (let i = 0; i < participant.weight / this._participantWeightGcd; i++) {\n      participants.push(participant);\n    }\n    return participants;\n  };\n\n  /**\n   * Picks and returns a winner of the match from the list of participants at random, with participant weight factored in.\n   * @return {Participant} The participant selected as the winner.\n   */\n  private _getWinner = (): Participant =>\n    RandomGenerator.pick(\n      this._participants.flatMap(this._cloneParticipantByWeight),\n    );\n\n  /**\n   * Returns a random conclusion message for the match.\n   * @return {string} The conclusion message.\n   */\n  private _getMessage = (): string => this._config.getRandomMessage();\n\n  /**\n   * Returns a unique ID for the match based on the round it belongs to.\n   * @param {string} roundId The ID of the round the match belongs to.\n   * @return {string} The unique match ID.\n   */\n  private _getMatchId = (roundId: string): string => {\n    if (!Match.counter[roundId]) {\n      Match.counter[roundId] = 1;\n    }\n    return `${Match.counter[roundId]++}`;\n  };\n\n  public constructor(\n    config: Config,\n    participants: Participant[],\n    roundId: string,\n  ) {\n    this._config = config;\n\n    this._id = `${this._getMatchId(roundId)}`;\n    this._roundId = roundId;\n    this._participants = participants;\n    this._participantWeightGcd = this._getParticipantWeightsGcd();\n    this._winner = this._getWinner();\n    this._message = this._getMessage();\n  }\n\n  /**\n   * Returns whether the participant is the winner of the match or not.\n   * @param  {Participant} participant The participant to check.\n   * @return {boolean} Whether the participant is the winner of the match or not.\n   */\n  private _isNotWinner = (participant: Participant): boolean =>\n    !participant.equals(this._winner);\n\n  /**\n   * Get the match ID.\n   * @return {string} The unique ID of the match within the context of the round it belongs to.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the complete match ID (prepended with round ID).\n   * @return {string} The unique complete ID of the match.\n   */\n  public get fullId(): string {\n    return `${this._roundId}:${this._id}`;\n  }\n\n  /**\n   * Get the list of losers of the match.\n   * @return {Participant[]} The list of losers.\n   */\n  public get losers(): Participant[] {\n    return this._participants.filter(this._isNotWinner);\n  }\n\n  /**\n   * Get the list of participants in the match.\n   * @return {Participant[]} The list of participants.\n   */\n  public get participants(): Participant[] {\n    return this._participants;\n  }\n\n  /**\n   * Get the winner of the match.\n   * @return {Participant} The winner.\n   */\n  public get winner(): Participant {\n    return this._winner;\n  }\n\n  /**\n   * Get the conslusion message of the match.\n   * @return {string} The message.\n   */\n  public get message(): string {\n    return this._message;\n  }\n}\n","import Participant from \"./match/participant/Participant\";\nimport Config from \"../config/Config\";\nimport chunk from \"lodash.chunk\";\nimport Match from \"./match/Match\";\nimport last from \"lodash.last\";\nimport RandomGenerator from \"../config/RandomGenerator\";\n\n/**\n * Class containing the details of a round.\n */\nexport default class Round {\n  /** The ID of the round. */\n  private _id: string;\n  /** The list of matches of the round. */\n  private _matches: Match[];\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: number = 1;\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /**\n   * Returns a shuffled list of the given participants.\n   * @param  {Participant[]} participants The list of participants to shuffle.\n   * @return {Participant[]} The shuffled list.\n   */\n  private _shuffleParticipants = (participants: Participant[]): Participant[] =>\n    RandomGenerator.shuffle(participants);\n\n  /**\n   * Creates a match with the given list of participants\n   * @param  {Participant[]} participants The list of participants to create the match with.\n   * @return {Match} The created match.\n   */\n  private _createMatch = (participants: Participant[]): Match =>\n    new Match(this._config, participants, this._id);\n\n  /**\n   * Returns a list of matches with all the participants of the round.\n   * @param  {Participant[]} participants The list of participants to create the matches with.\n   * @return {Match[]} The list of created matches.\n   */\n  private _getMatches = (participants: Participant[]): Match[] =>\n    chunk(\n      this._shuffleParticipants(participants),\n      this._config.participantsPerMatch,\n    ).map(this._createMatch);\n\n  public constructor(config: Config, participants: Participant[]) {\n    this._config = config;\n\n    this._id = `${Round.counter++}`;\n    this._matches = this._getMatches(participants);\n  }\n\n  /**\n   * Returns the list of participants of a given match.\n   * @param  {Match} match The match whose participants to get.\n   * @return {Participant[]} The list of participants of the match.\n   */\n  private _getMatchParticipants = (match: Match): Participant[] =>\n    match.participants;\n\n  /**\n   * Returns the winner of a given match.\n   * @param  {Match} match The match whose winner to get.\n   * @return {Participant[]} The winner of the match.\n   */\n  private _getMatchWinner = (match: Match): Participant => match.winner;\n\n  /**\n   * Returns the list of losers of a given match.\n   * @param  {Match} match The match whose losers to get.\n   * @return {Participant[]} The list of losers of the match.\n   */\n  private _getMatchLosers = (match: Match): Participant[] => match.losers;\n\n  /**\n   * Get the round ID.\n   * @return {string} The unique ID of the round.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the list of matches in the round.\n   * @return {Match[]} The list of matches.\n   */\n  public get matches(): Match[] {\n    return this._matches;\n  }\n\n  /**\n   * Get the first match of the round.\n   * @return {Match} The first match.\n   */\n  public get firstMatch(): Match {\n    return this._matches[0];\n  }\n\n  /**\n   * Get the last match of the round.\n   * @return {Match} The last match.\n   */\n  public get lastMatch(): Match {\n    return last(this._matches) as Match;\n  }\n\n  /**\n   * Get the list of participants in the round.\n   * @return {Participant[]} The list of participants.\n   */\n  public get participants(): Participant[] {\n    return this._matches.flatMap(this._getMatchParticipants);\n  }\n\n  /**\n   * Get the list of winners in the round.\n   * @return {Participant[]} The list of winners.\n   */\n  public get winners(): Participant[] {\n    return this._matches.map(this._getMatchWinner);\n  }\n\n  /**\n   * Get the list of losers in the round.\n   * @return {Participant[]} The list of losers.\n   */\n  public get losers(): Participant[] {\n    return this._matches.flatMap(this._getMatchLosers);\n  }\n}\n","import Participant from \"./round/match/participant/Participant\";\nimport last from \"lodash.last\";\nimport Config from \"./config/Config\";\nimport Round from \"./round/Round\";\n\n/**\n * Class containing the details of a tournament.\n */\nexport default class Tournament {\n  /** The list of rounds of the tournament. */\n  private _rounds: Round[];\n\n  /** The config of the application. */\n  private _config: Config;\n\n  /**\n   * Creates a round with the given list of participants.\n   * @param  {Participant[]} participants The list of participants to create the round with.\n   * @return {Round} The created round.\n   */\n  private _createRound = (participants: Participant[]): Round =>\n    new Round(this._config, participants);\n\n  /**\n   * Returns a list of rounds with all the participants of the tournament.\n   * @return {Round[]} The list of created rounds.\n   */\n  private _getRounds = (): Round[] => {\n    this._rounds = [this._createRound(this._config.allParticipants)];\n    while (!this._hasWinner) {\n      this._rounds.push(this._createRound(this.lastRound.winners));\n    }\n    return this._rounds;\n  };\n\n  public constructor(config: Config) {\n    this._config = config;\n\n    this._rounds = this._getRounds();\n  }\n\n  /**\n   * Returns whether the tournament has a final winner or not.\n   * @return {boolean} Whether the tournament has a final winner or not.\n   */\n  private get _hasWinner(): boolean {\n    return this.lastRound.winners.length === 1;\n  }\n\n  /**\n   * Get the first round of the tournament.\n   * @return {Round} The first round.\n   */\n  public get firstRound(): Round {\n    return this._rounds[0];\n  }\n\n  /**\n   * Get the last round of the tournament.\n   * @return {Round} The last round.\n   */\n  public get lastRound(): Round {\n    return last(this._rounds) as Round;\n  }\n\n  /**\n   * Gets the list of rounds in the tournament.\n   * @return {Round[]} The rounds in the tournament.\n   */\n  public get rounds(): Round[] {\n    return this._rounds;\n  }\n\n  /**\n   * Gets the final winner of the tournament.\n   * @return {Participant} The final winner, or null if there is none.\n   */\n  public get winner(): Participant {\n    return this.lastRound.winners[0];\n  }\n}\n","import React, { ComponentType, Dispatch, useState } from \"react\";\nimport Config from \"../store/config/Config\";\nimport { Redirect } from \"react-router\";\nimport { Observer } from \"mobx-react\";\n\n/**\n * Returns if it is currently a dev environment.\n */\nexport const isDevEnvironment: boolean = process.env.NODE_ENV === \"development\";\n\n/**\n * Returns a random avatar image URL.\n * @param {string} identifier The identifier to generate the avatar URL against.\n * @return {string} The avatar URL.\n */\nexport const createAvatarImage = (identifier: string): string => {\n  return `https://api.adorable.io/avatars/480/${identifier}`;\n};\n\n/**\n * Checks if the number is within the range.\n * @param {number} num The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @return {boolean} Whether the number is within the range.\n */\nexport const isInRange = (num: number, start: number, end: number): boolean =>\n  end >= start && num >= start && num <= end;\n\n/**\n * Type for custom animation state hook.\n */\nexport type AnimationStateHook = [\n  number,\n  () => void,\n  Dispatch<number>,\n  Dispatch<number>,\n];\n\n/**\n * Type for show overlay state hook.\n */\nexport type ShowOverlayHook = [boolean, Dispatch<boolean>];\n\n/**\n * Type for void function.\n */\nexport type VoidFunction = () => void;\n\n/**\n * Runs the given action at least after the given delay.\n * @param {Function} action The action to run.\n * @param {number} delay The minimum delay to wait for.\n */\nexport const runOnDelay = (action: Function, delay: number): VoidFunction => {\n  const delayId: number = setTimeout(action, delay);\n  return () => clearTimeout(delayId);\n};\n\n/**\n * Create an animation state hook.\n * @return {AnimationStateHook} The current animation state, a state update method, and a delayed state update method.\n */\nexport const useAnimationState = (start: number = 0): AnimationStateHook => {\n  const [currentState, setState]: [number, Dispatch<number>] = useState(start);\n\n  const updateState = (): void => setState(currentState + 1);\n  const updateStateDelay = (delay: number): VoidFunction =>\n    runOnDelay(updateState, delay);\n\n  return [currentState, updateState, updateStateDelay, setState];\n};\n\n/**\n * Normalize the given animation time by the animation speed multiplier.\n * @param {number} time The animation time to normalize.\n * @return {number} The normalized animation speed\n */\nexport const getNormalizedSpeed = (time: number): number =>\n  time / Config.getInstance().speed;\n\n/**\n * Returns function that runs the given action if the provided predicate is true.\n * @param {boolean} predicate The predicate to check.\n * @param {Function} action The action to run.\n */\nexport const runOnPredicate = (\n  predicate: boolean,\n  action: Function,\n): VoidFunction | (() => VoidFunction) => (): void | VoidFunction =>\n  predicate ? action() : undefined;\n\n/**\n * Returns a redirect component for a given round and match.\n * @param {string} roundId The ID of the round to redirect to.\n * @param {string} matchId The ID of the match to redirect to.\n * @return {JSX.Element} The redirect element.\n */\nexport const getMatchRedirect = (roundId?: string, matchId?: string) => (\n  <Redirect to={`/round/${roundId}/match/${matchId}`} />\n);\n\n/**\n * Returns a HOC with the given component wrapped by a MobX Observer component.\n * @param {ComponentType<T>} Component The component that should be under an observer.\n * @returns {(props: T) => JSX.Element} A HOC that wraps the given component under an observer.\n */\nexport const createObserver = <T extends {}>(\n  Component: ComponentType<T>,\n): ((props: T) => JSX.Element) => (props: T): JSX.Element => (\n  <Observer>{() => <Component {...props} />}</Observer>\n);\n","/**\n * Class containing the details of a participants' avatar.\n */\nexport default class Avatar {\n  /** The URL of the avatar image. */\n  private _url: string;\n  /** The alternate text for the image. */\n  private _altText: string;\n\n  public constructor(url: string, altText: string) {\n    this._url = url;\n    this._altText = altText;\n  }\n\n  /**\n   * Gets the avatar URL.\n   * @return {string} The avatar URL.\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Gets the avatar image alternate text.\n   * @return {string} The avatar image alternate text.\n   */\n  public get altText(): string {\n    return this._altText;\n  }\n\n  /**\n   * Returns whether the two given URLs are equal.\n   * @param {string} url1 The first URL to compare.\n   * @param {string} url2 The second URL to compare.\n   * @return {boolean} Whether the two URLs are equal.\n   */\n  private _isSameUrl = (url1: string, url2: string): boolean => url1 === url2;\n\n  /**\n   * Returns whether the two alternate texts are equal.\n   * @param {string} altText1 The first alternate text to compare.\n   * @param {string} altText2 The second alternate text to compare.\n   * @return {boolean} Whether the two alternate texts are equal.\n   */\n  private _isSameAltText = (altText1: string, altText2: string): boolean =>\n    altText1 === altText2;\n\n  /**\n   * Determines whether another avatar is identical to the current one.\n   * @param  {Avatar} otherAvatar The other avatar to compare against.\n   * @return {boolean} Whether the other avatar is equal to the current one.\n   */\n  public equals = (otherAvatar: Avatar): boolean =>\n    this._isSameUrl(this._url, otherAvatar._url) &&\n    this._isSameAltText(this._altText, otherAvatar._altText);\n}\n","import { createAvatarImage } from \"../../../../util\";\nimport Avatar from \"./Avatar\";\nconst inflect = require(\"i\")();\n\ninterface AvatarJson {\n  url: string;\n  altText: string;\n}\n\n/**\n * Class containing the details of a participant.\n */\nexport default class Participant {\n  /** The ID of the participant. */\n  private _id: string;\n  /** The name of the participant. */\n  private _name: string;\n  /** The avatar of the participant. */\n  private _avatar: Avatar;\n  /** The weight of the participant. */\n  private _weight: number;\n\n  /** A counter for generating a unique ID for the match. */\n  private static counter: number = 1;\n\n  /**\n   * Gets the avatar of the participant if present, or creates a random one,\n   * @param  {string} name The name of the participant.\n   * @param  {AvatarJson} avatar The avatar details of the participant, if available.\n   * @return {Avatar} The generated avatar of the participant.\n   */\n  private _getOrCreateAvatar = (name: string, avatar?: AvatarJson): Avatar => {\n    return avatar\n      ? new Avatar(avatar.url, avatar.altText)\n      : new Avatar(createAvatarImage(name), name);\n  };\n\n  public constructor(name: string, avatar?: AvatarJson, weight: number = 1) {\n    this._id = `${Participant.counter++}`;\n    this._name = name;\n    this._avatar = this._getOrCreateAvatar(name, avatar);\n    this._weight = weight;\n  }\n\n  /**\n   * Get the participant ID.\n   * @return {string} The unique ID of the participant.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Gets the participant name.\n   * @return {string} The participant name.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Gets the capitalized name of the participant.\n   * @return {string} The capitalized name.\n   */\n  public get properName(): string {\n    return inflect.titleize(this._name);\n  }\n\n  /**\n   * Gets the participant avatar, if it exists.\n   * @return {string} The participant avatar.\n   */\n  public get avatar(): Avatar {\n    return this._avatar;\n  }\n\n  /**\n   * Gets the participant weight.\n   * @return {number} The participant weight.\n   */\n  public get weight(): number {\n    return this._weight;\n  }\n\n  /**\n   * Returns whether the two names are equal.\n   * @param {string} name1 The first name to compare.\n   * @param {string} name2 The second name to compare.\n   * @return {boolean} Whether the two names are equal.\n   */\n  private _isSameName = (name1: string, name2: string): boolean =>\n    name1 === name2;\n\n  /**\n   * Returns whether the two avatars are equal.\n   * @param {Avatar} avatar1 The first avatar to compare.\n   * @param {Avatar} avatar2 The second avatar to compare.\n   * @return {boolean} Whether the two avatars are equal.\n   */\n  private _isSameAvatar = (avatar1: Avatar, avatar2: Avatar): boolean =>\n    avatar1.equals(avatar2);\n\n  /**\n   * Determines whether another participant is identical to the current one.\n   * @param  {Participant} otherParticipant The other participant to compare against.\n   * @return {boolean} Whether the other participant is equal to the current one.\n   */\n  public equals = (otherParticipant: Participant): boolean =>\n    this._isSameName(this._name, otherParticipant._name) &&\n    this._isSameAvatar(this._avatar, otherParticipant._avatar);\n}\n","import { isDevEnvironment } from \"../../util\"\nimport i18next from \"i18next\"\nimport EnTranslation from \"../../i18n/en/translation.json\"\n\n// Update this to include all translation resources.\nconst defaultLanguage: string = \"en\"\nconst fallbackLanguage: string = \"en\"\nconst resources: i18next.Resource = {\n  en: {\n    translation: EnTranslation,\n  },\n}\n\n// Don't modify anything from this point\nexport default {\n  resources,\n  lng: defaultLanguage,\n  fallbackLng: fallbackLanguage,\n  debug: isDevEnvironment,\n  interpolation: {\n    escapeValue: false,\n  },\n  react: {\n    wait: true,\n  },\n}\n","import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport ConfigJson from \"./config/config.json\";\nimport i18nConfig from \"./store/config/i18n\";\n\n// No need to modify anything from this point.\nconst configLanguages: string[] = ConfigJson.lang;\nconst resourceLanguages: string[] = Object.keys(i18nConfig.resources);\nresourceLanguages\n  .filter(\n    (language: string): boolean => configLanguages.indexOf(language) === -1,\n  )\n  .forEach(\n    (language: string): void => {\n      throw new Error(`Language \"${language}\" is not added in config.`);\n    },\n  );\nconfigLanguages\n  .filter(\n    (language: string): boolean => resourceLanguages.indexOf(language) === -1,\n  )\n  .forEach(\n    (language: string): void => {\n      throw new Error(`Language \"${language}\" is not added in resources.`);\n    },\n  );\n\ni18n\n  .use(detector)\n  .use(initReactI18next)\n  .init(i18nConfig);\n\nexport default i18n;\n","/**\n * Class the provides possible animation speeds.\n */\nexport default class AnimationSpeed {\n  /** A map of possible speeds, and their multiplier values. */\n  private static _SPEED_MAP: Map<string, number> = new Map([\n    [\"HALF\", 0.5],\n    [\"ONE\", 1],\n    [\"TWO\", 2],\n    // [\"FIVE\", 5],\n    // [\"TEN\", 10],\n  ]);\n\n  /**\n   * Returns the speed multiplier of the given key.\n   * @param  {string} key The key whose speed multiplier to return.\n   * @return {number | undefined} The speed multiplier, or undefined if it doesn't exist.\n   */\n  public static get = (key: string): number | undefined =>\n    AnimationSpeed._SPEED_MAP.get(key);\n\n  /**\n   * Returns the list of possible speed multiplier values.\n   * @return {number[]} The list of speed multiplier values.\n   */\n  public static getValues = (): number[] =>\n    Array.from(AnimationSpeed._SPEED_MAP.values());\n\n  /**\n   * Returns the list of possible speed multiplier keys.\n   * @return {string[]} The list of speed multiplier keys.\n   */\n  public static getKeys = (): string[] =>\n    Array.from(AnimationSpeed._SPEED_MAP.keys());\n\n  /**\n   * Returns whether the speed multiplier key exists.\n   * @param  {string} key The key to check.\n   * @return {boolean} Whether the speed multiplier key exists or not.\n   */\n  public static hasKey = (key: string): boolean =>\n    AnimationSpeed._SPEED_MAP.has(key);\n\n  /**\n   * Returns whether the speed multiplier value exists.\n   * @param  {number} value The value to check.\n   * @return {boolean} Whether the speed multiplier value exists or not.\n   */\n  public static hasValue = (value: number): boolean =>\n    AnimationSpeed.getValues().indexOf(value) !== -1;\n\n  /**\n   * Returns the list of possible speed multiplier keys and values.\n   * @return {[string, number][]} Returns the list of speed multiplier keys and values.\n   */\n  public static getEntries = (): [string, number][] =>\n    Array.from(AnimationSpeed._SPEED_MAP.entries());\n}\n","import Participant from \"../round/match/participant/Participant\";\nimport ConfigJson from \"../../config/config.json\";\nimport i18n from \"../../i18n\";\nimport { observable, computed, action } from \"mobx\";\nimport RandomGenerator from \"./RandomGenerator\";\nimport AnimationSpeed from \"./AnimationSpeed\";\n\n/**\n * Interface for JSON object representing avatar details.\n */\ninterface AvatarJson {\n  /** The URL of the avatar. */\n  url: string;\n  /** The alternate text of the avatar image. */\n  altText: string;\n}\n\n/**\n * Interface for JSON object representing participant details.\n */\ninterface ParticipantJson {\n  /** The name of the participant. */\n  name: string;\n  /** The avatar of the participant (if present). */\n  avatar?: AvatarJson;\n  /** The weight of the participant (if present). */\n  weight?: number;\n}\n\n/**\n * Class representing the basic configuration of the application.\n */\nexport default class Config {\n  /** The name of the tournament. */\n  private _name: string;\n  /** A list of all messages. */\n  private _messages: string[];\n  /** The list of participants in the tournament. */\n  private _allParticipants: Participant[];\n  /** The number of participants per match. */\n  private _participantsPerMatch: number;\n  /** The languages supported by the application. */\n  private _languages: string[];\n  /** The current language. */\n  @observable private _currentLanguage: string;\n  /** The animation speed multiplier. */\n  @observable private _speed: number;\n  /** The list of unused messages. */\n  private _unusedMessages: string[];\n\n  /** The singleton instance of the class, or null if not yet created. */\n  private static _instance: Config | null = null;\n\n  /**\n   * Returns the name of the tournament.\n   * @return {string} The tournament name.\n   */\n  private _getName = (): string => ConfigJson.name;\n\n  /**\n   * Returns the match conclusion messages that can be used for the tournament.\n   * @return {string[]} The tournament match conclusion messages.\n   */\n  private _getMessages = (): string[] => ConfigJson.messages;\n\n  /**\n   * Returns a created participant for the given JSON details.\n   * @param {string | ParticipantJson} user The participants details.\n   * @return {Participant} The created participant.\n   */\n  private _createParticipant = (user: string | ParticipantJson): Participant =>\n    typeof user === \"string\"\n      ? new Participant(user)\n      : new Participant(\n          (user as ParticipantJson).name,\n          (user as ParticipantJson).avatar,\n          (user as ParticipantJson).weight,\n        );\n\n  /**\n   * Returns a created list of participants using the given participant details.\n   * @return {Participant[]} The created participants list.\n   */\n  private _getParticipants = (): Participant[] =>\n    ConfigJson.users.map(this._createParticipant);\n\n  /**\n   * Returns the max. number of participants that are to be present per match in the tournament.\n   * @return {number} The max. number of participants per match.\n   */\n  private _getParticipantsPerMatch = (): number =>\n    ConfigJson.participantsPerMatch;\n\n  /**\n   * Returns the list of languages supported by the application.\n   * @return {string[]} The list of languages.\n   */\n  private _getlLanguages = (): string[] => ConfigJson.lang;\n\n  /**\n   * Returns the animation speed multiplier of the application.\n   * @return {number} The animation speed multiplier.\n   */\n  private _getSpeed = (): number => AnimationSpeed.get(\"ONE\") as number;\n\n  /**\n   * Returns whether a string should be prepended to a participants' name.\n   * @param {number} index The index of the participant.\n   * @param {number} participantSize The total number of participants.\n   * @return {boolean} Whether the string should be prepended.\n   */\n  private _shouldPrepend = (index: number, participantSize: number): boolean =>\n    index === participantSize - 1 && participantSize > 1;\n\n  /**\n   * Returns a function that can returns the participant name prepended with a string if it's the last participant, or just the name.\n   * @param {number} participantSize The total number of participants.\n   * @param {string} stringToPrepend The string to prepend.\n   * @return {(name: string, index: number) => string} The function that will return the participants' name\n   */\n  private _prependToLastParticipant = (\n    participantSize: number,\n    stringToPrepend: string,\n  ): ((name: string, index: number) => string) => (\n    name: string,\n    index: number,\n  ): string =>\n    this._shouldPrepend(index, participantSize)\n      ? `${stringToPrepend} ${name}`\n      : name;\n\n  /**\n   * Returns a formatted losers list.\n   * @param {string[]} names The list of loser names.\n   * @return {string} The formatted string.\n   */\n  private _formatLosers = (names: string[]): string =>\n    names.map(this._prependToLastParticipant(names.length, \"and\")).join(\", \");\n\n  private constructor() {\n    this._name = this._getName();\n    this._messages = this._getMessages();\n    this._unusedMessages = RandomGenerator.shuffle([...this._messages]);\n    this._allParticipants = this._getParticipants();\n    this._participantsPerMatch = this._getParticipantsPerMatch();\n    this._languages = this._getlLanguages();\n    this._currentLanguage = \"en\";\n    this._speed = this._getSpeed();\n  }\n\n  /**\n   * Get an instance of the config, which is a singleton.\n   * @return {Config} The instance of a config.\n   */\n  public static getInstance(): Config {\n    return Config._instance\n      ? Config._instance\n      : (Config._instance = new Config());\n  }\n\n  /**\n   * Get the name of the tournament.\n   * @return {string} The tournament name.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the list of winner/loser messages.\n   * @return {string[]} The list of mesasges.\n   */\n  public get messages(): string[] {\n    return [...this._messages];\n  }\n\n  /**\n   * Returns the formatted version of the given message.\n   * @param {string} message The message to format.\n   * @param {string} winnerName The name of the winner.\n   * @param {string[]} loserNames The names of the losers.\n   * @return {string} The formatted message.\n   */\n  public getFormattedMessage = (\n    message: string,\n    winnerName: string,\n    loserNames: string[],\n  ): string =>\n    message\n      .replace(\"#winner\", winnerName)\n      .replace(\"#loser\", this._formatLosers(loserNames));\n\n  /**\n   * Gets a random message with the winner and loser.\n   * @return {string} The formatted message.\n   */\n  public getRandomMessage(): string {\n    if (this._unusedMessages.length === 0) {\n      this._unusedMessages = RandomGenerator.shuffle([...this._messages]);\n    }\n    const message = RandomGenerator.pick(this._unusedMessages);\n    this._unusedMessages.splice(this._unusedMessages.indexOf(message), 1);\n    return message;\n  }\n\n  /**\n   * Gets the index of the given message.\n   * @param {string} message The message.\n   * @return {number} The index of the message.\n   */\n  public getMessageIndex = (message: string): number =>\n    this._messages.indexOf(message);\n\n  /**\n   * Get the list of all participants in the tournament.\n   * @return {Participant[]} The list of all participants.\n   */\n  public get allParticipants(): Participant[] {\n    return this._allParticipants;\n  }\n\n  /**\n   * Get the number of participants per match.\n   * @return {number} The number of participants per match.\n   */\n  public get participantsPerMatch(): number {\n    return this._participantsPerMatch;\n  }\n\n  /**\n   * Get the list of languages supported by the application.\n   * @return {string[]} The list of languages.\n   */\n  public get languages(): string[] {\n    return this._languages;\n  }\n\n  /**\n   * Get the current application language.\n   * @return {string} The current language.\n   */\n  @computed public get currentLanguage(): string {\n    return this._currentLanguage;\n  }\n\n  /**\n   * Set the current language of the application.\n   * @param {string} value The new current language.\n   */\n  @action public setCurrentLanguage(value: string): void {\n    if (this._languages.indexOf(value) !== -1) {\n      this._currentLanguage = value;\n      i18n.changeLanguage(value);\n    } else {\n      console.error(`Illegal value '${value}' for current language.`);\n    }\n  }\n\n  /**\n   * Get the speed multiplier for animations.\n   * @return {number} The speed multiplier value.\n   */\n  @computed public get speed(): number {\n    return this._speed;\n  }\n\n  /**\n   * Set the speed multiplier for animations.\n   * @param {number} value The new speed multiplier value.\n   */\n  @action public setSpeed(value: number): void {\n    if (AnimationSpeed.hasValue(value)) {\n      this._speed = value;\n    } else {\n      console.error(`Illegal value '${value}' for speed.`);\n    }\n  }\n}\n","import ParticipantAvatarView from \"./ParticipantAvatarView.react\";\n\nexport default ParticipantAvatarView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the participant avatar React component.\n */\nexport interface ParticipantAvatarViewProps {\n  /** CSS class */\n  className: string;\n  /** The participant details. */\n  participant: Participant;\n}\n\n/**\n * Function that returns a React component for the participant avatar.\n */\nexport default (props: ParticipantAvatarViewProps): JSX.Element | null => {\n  if (props.participant.avatar === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(`${props.className}__avatar`)}>\n      <img\n        src={props.participant.avatar.url}\n        alt={props.participant.avatar.altText}\n      />\n    </div>\n  );\n};\n","import ParticipantNameView from \"./ParticipantNameView.react\";\n\nexport default ParticipantNameView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the participant name React component.\n */\nexport interface ParticipantNameViewProps {\n  /** CSS class */\n  className: string;\n  /** The participant details. */\n  participant: Participant;\n}\n\n/**\n * Function that returns a React component for the participant name.\n */\nexport default (props: ParticipantNameViewProps): JSX.Element => (\n  <div className={classNames(`${props.className}__name`)}>\n    <strong>{props.participant.properName}</strong>\n  </div>\n);\n","import ParticipantView from \"./index.react\";\n\nexport default ParticipantView;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\nimport ParticipantAvatarView from \"./_partial/ParticipantAvatarView\";\nimport ParticipantNameView from \"./_partial/ParticipantNameView\";\n\n/**\n * Properties of the participant view React component.\n */\nexport interface ParticipantViewProps {\n  /** The participant details. */\n  participant: Participant;\n  /** Whether to invert the color of the participant view or not. */\n  invert?: boolean;\n}\n\n/**\n * Function that returns a React component for the participant view.\n */\nexport default (className: string) => (\n  props: ParticipantViewProps,\n): JSX.Element => {\n  const rootClassName: string = \"participant\";\n\n  return (\n    <div\n      className={classNames(rootClassName, className, {\n        [`${rootClassName}--invert`]: props.invert,\n      })}\n    >\n      <ParticipantAvatarView className={className} {...props} />\n      <ParticipantNameView className={className} {...props} />\n    </div>\n  );\n};\n","import \"./ParticipantEntry.scss\";\nimport createParticipantView from \"../common\";\n\n/**\n * A entry-style participant view React component\n */\nexport default createParticipantView(\"participant-entry\");\n","import MatchWinnerView from \"./MatchWinnerView.react\";\n\nexport default MatchWinnerView;\n","import React, { useEffect } from \"react\";\nimport \"./MatchWinnerView.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\nimport { getNormalizedSpeed } from \"../../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../../../util\";\n\n/**\n * Properties of the match winner view React component.\n */\nexport interface MatchWinnerViewProps {\n  /** CSS class */\n  className: string;\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** The details of the match winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the match winner view.\n */\nexport default (props: MatchWinnerViewProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0}\n      timeout={getNormalizedSpeed(200)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__winner--entering`,\n        enterDone: `${props.className}__winner--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__winner--exiting`,\n        exitDone: `${props.className}__winner--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(`${props.className}__winner`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(200)}ms ease-in-out`,\n        }}\n      >\n        <ParticipantEntry participant={props.winner} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import MatchFinalEntry from \"./MatchFinalEntry.react\";\n\n/**\n * React component for the match final entry.\n */\nexport default MatchFinalEntry;\n","import React, { useEffect, Fragment } from \"react\";\nimport \"./MatchFinalEntry.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\nimport { getNormalizedSpeed, isInRange } from \"../../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../../../util\";\nimport Match from \"../../../../store/round/match/Match\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport MatchWinnerView from \"./MatchWinnerView\";\n\n/**\n * Properties of the match final entry React component.\n */\nexport interface MatchFinalEntryProps {\n  /** CSS class */\n  className: string;\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** Whether it is an actual match. */\n  isActualMatch: boolean;\n  /** The details of the current match. */\n  match: Match;\n}\n\n/**\n * React component for the match final entry.\n */\nexport default (props: MatchFinalEntryProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n    setState,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate((currentState + 1) % 3 === 0, () =>\n      updateStateDelay(getNormalizedSpeed(200)),\n    ),\n  );\n  useEffect(\n    runOnPredicate(\n      currentState === props.match.participants.length * 3 + 1,\n      () => setState(1),\n    ),\n  );\n\n  return (\n    <Fragment>\n      {props.isCurrentMatch && props.isActualMatch ? (\n        props.match.participants.map(\n          (participant: Participant, index: number): JSX.Element => (\n            <CSSTransition\n              key={participant.id}\n              in={isInRange(currentState, index * 3 + 1, index * 3 + 2)}\n              timeout={getNormalizedSpeed(200)}\n              classNames={{\n                enter: \"\",\n                enterActive: `${props.className}__interim--entering`,\n                enterDone: `${props.className}__interim--entered`,\n                exit: \"\",\n                exitActive: `${props.className}__interim--exiting`,\n                exitDone: `${props.className}__interim--exited`,\n              }}\n              mountOnEnter={true}\n              unmountOnExit={true}\n              onEntered={updateState}\n              onExited={updateState}\n            >\n              <div\n                className={classNames(`${props.className}__interim`)}\n                style={{\n                  transition: `opacity ${getNormalizedSpeed(\n                    200,\n                  )}ms ease-in-out`,\n                }}\n              >\n                <ParticipantEntry participant={participant} />\n              </div>\n            </CSSTransition>\n          ),\n        )\n      ) : (\n        <MatchWinnerView\n          className={props.className}\n          isCurrentMatch={props.isCurrentMatch}\n          winner={props.match.winner}\n        />\n      )}\n    </Fragment>\n  );\n};\n","import MatchParticipantList from \"./MatchParticipantList.react\";\n\n/**\n * React component for the match participant list.\n */\nexport default MatchParticipantList;\n","import React from \"react\";\nimport \"./MatchParticipantList.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../store/round/match/Match\";\nimport Participant from \"../../../../store/round/match/participant/Participant\";\nimport ParticipantEntry from \"../participant/entry/ParticipantEntry\";\n\n/**\n * Properties of the match participant list React component.\n */\nexport interface MatchParticipantListProps {\n  /** CSS class */\n  className: string;\n  /** The details of the current match. */\n  match: Match;\n}\n\n/**\n * React component for the match participant list.\n */\nexport default (props: MatchParticipantListProps): JSX.Element => (\n  <div className={classNames(`${props.className}__list`)}>\n    {props.match.participants.map(\n      (participant: Participant): JSX.Element => (\n        <ParticipantEntry key={participant.id} participant={participant} />\n      ),\n    )}\n  </div>\n);\n","import { inject } from \"mobx-react\";\nimport { withRouter } from \"react-router\";\nimport { withTranslation } from \"react-i18next\";\nimport MatchOverlayWinner from \"./MatchOverlayWinner.react\";\nimport { createObserver } from \"../../../../../util\";\n\n/**\n * React component for the match overlay winner.\n */\nexport default inject(\"config\")(\n  withTranslation()(withRouter(createObserver(MatchOverlayWinner))),\n);\n","import React, { useEffect, useState } from \"react\";\nimport \"./MatchOverlayWinner.scss\";\nimport classNames from \"classnames\";\nimport ParticipantEntry from \"../../participant/entry/ParticipantEntry\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  runOnDelay,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  isInRange,\n} from \"../../../../../util/index\";\nimport { RouteComponentProps } from \"react-router\";\nimport Match from \"../../../../../store/round/match/Match\";\nimport {\n  Trans,\n  useTranslation,\n  UseTranslationResponse,\n  WithTranslation,\n} from \"react-i18next\";\nimport Config from \"../../../../../store/config/Config\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\n\n/**\n * Properties of the match overlay winner React component.\n */\nexport interface MatchOverlayWinnerProps\n  extends RouteComponentProps,\n    WithTranslation {\n  /** @ignore The application config. */\n  config?: Config;\n  /** CSS class */\n  className: string;\n  /** The current match details. */\n  currentMatch: Match;\n  /** Whether to show the winner or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the winner. */\n  onWinnerComplete: () => void;\n}\n\nconst STOP_QUERY_FLAG: string = \"stop\";\n\n/**\n * React component for the match overlay winner.\n */\nexport default (props: MatchOverlayWinnerProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const [hidden, setHidden]: [boolean, (hidden: boolean) => void] = useState(\n    document.hidden,\n  );\n  const shouldNotStopOnEnd: boolean = !new URLSearchParams(\n    props.location.search,\n  ).has(STOP_QUERY_FLAG);\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  useEffect(() => {\n    console.log(document.hidden);\n    const updateHidden = () => {\n      console.log(document.hidden);\n      setHidden(document.hidden);\n    };\n    document.addEventListener(\"visibilitychange\", updateHidden);\n    return () => document.removeEventListener(\"visibilitychange\", updateHidden);\n  });\n\n  const { t }: UseTranslationResponse = useTranslation();\n  const translatedMessagesList: string = t(\"matchOverlay.messages\", {\n    returnObjects: true,\n    count: props.currentMatch.losers.length,\n  });\n  let matchMessage: string = props.currentMatch.message;\n\n  const messageIndex: number = props.config!.getMessageIndex(\n    props.currentMatch.message,\n  );\n  if (\n    messageIndex !== -1 &&\n    Array.isArray(translatedMessagesList) &&\n    isInRange(messageIndex, 0, translatedMessagesList.length - 1)\n  ) {\n    matchMessage = translatedMessagesList[messageIndex];\n  }\n\n  const winnerName: string = props.currentMatch.winner.properName;\n  const loserNames: string[] = props.currentMatch.losers.map(\n    (loser: Participant): string => loser.properName,\n  );\n\n  useEffect(\n    runOnPredicate(currentState === 2 && shouldNotStopOnEnd && !hidden, () =>\n      runOnDelay(() => {\n        props.onWinnerComplete();\n      }, getNormalizedSpeed(4000)),\n    ),\n  );\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__winner--entering`,\n        enterDone: `${props.className}__winner--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__winner--exiting`,\n        exitDone: `${props.className}__winner--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n    >\n      <div\n        className={classNames(`${props.className}__winner`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <Trans i18nKey=\"matchOverlay.winnerTitle\">\n          <ParticipantEntry participant={props.currentMatch.winner} />\n          <h3>Won The Match!</h3>\n        </Trans>\n        <h5>\n          <strong>\n            <em>\n              {props.config!.getFormattedMessage(\n                matchMessage,\n                winnerName,\n                loserNames,\n              )}\n            </em>\n          </strong>\n        </h5>\n      </div>\n    </CSSTransition>\n  );\n};\n","import MatchOverlayInterim from \"./MatchOverlayInterim.react\";\nimport { withTranslation } from \"react-i18next\";\nimport { createObserver } from \"../../../../../util\";\n\n/**\n * React component for the match overlay interim.\n */\nexport default withTranslation()(createObserver(MatchOverlayInterim));\n","import React, { useEffect } from \"react\";\nimport \"./MatchOverlayInterim.scss\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  isInRange,\n} from \"../../../../../util/index\";\nimport { ClipLoader } from \"react-spinners\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the match overlay interim React component.\n */\nexport interface MatchOverlayInterimProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** Whether to show the interim text or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the interim text. */\n  onInterimComplete: () => void;\n}\n\n/**\n * React component for the match overlay interim.\n */\nexport default (props: MatchOverlayInterimProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(currentState === 2, () =>\n      updateStateDelay(getNormalizedSpeed(4000)),\n    ),\n    [currentState],\n  );\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__interim--entering`,\n        enterDone: `${props.className}__interim--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__interim--exiting`,\n        exitDone: `${props.className}__interim--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n      onExited={props.onInterimComplete}\n    >\n      <div\n        className={classNames(`${props.className}__interim`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <h3>\n          <Trans i18nKey=\"matchOverlay.interimText\">Selecting Winner</Trans>\n        </h3>\n        <ClipLoader sizeUnit={\"rem\"} size={3} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import \"./ParticipantCard.scss\";\nimport createParticipantView from \"../common\";\n\n/**\n * A card-style participant view React component\n */\nexport default createParticipantView(\"participant-card\");\n","import { withTranslation } from \"react-i18next\";\nimport MatchOverlayParticipants from \"./MatchOverlayParticipants.react\";\n\n/**\n * React component for the match overlay participants.\n */\nexport default withTranslation()(MatchOverlayParticipants);\n","import React from \"react\";\nimport \"./MatchOverlayParticipants.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../../store/round/match/Match\";\nimport Participant from \"../../../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../participant/card/ParticipantCard\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the match overlay participants React component.\n */\nexport interface MatchOverlayParticipantsProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The current match details. */\n  currentMatch: Match;\n}\n\n/**\n * React component for the match overlay participants.\n */\nexport default (props: MatchOverlayParticipantsProps): JSX.Element => (\n  <div className={classNames(`${props.className}__list`)}>\n    {props.currentMatch.participants\n      .flatMap(\n        (participant: Participant): [JSX.Element, JSX.Element] => [\n          <div key={participant.id}>\n            <ParticipantCard invert={true} participant={participant} />\n          </div>,\n          <h3\n            className={classNames(\"versus-text\")}\n            key={`${participant.id} versus`}\n          >\n            <Trans\n              i18nKey=\"matchOverlay.versus\"\n              count={props.currentMatch.participants.length}\n            >\n              VS\n            </Trans>\n          </h3>,\n        ],\n      )\n      .slice(0, -1)}\n  </div>\n);\n","import MatchOverlay from \"./MatchOverlay.react\";\nimport { createObserver } from \"../../../../util\";\n\n/**\n * React component for the match overlay.\n */\nexport default createObserver(MatchOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./MatchOverlay.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../../store/round/match/Match\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  isInRange,\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../../util/index\";\nimport MatchOverlayWinner from \"./_partial/MatchOverlayWinner\";\nimport MatchOverlayInterim from \"./_partial/MatchOverlayInterim\";\nimport MatchOverlayParticipants from \"./_partial/MatchOverlayParticipants\";\n\n/**\n * Properties of the match overlay React component.\n */\nexport interface MatchOverlayProps {\n  /** The match details. */\n  currentMatch: Match;\n  /** Whether to show the match overlay or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the match. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the match overlay.\n */\nexport default (props: MatchOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"match-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0 && props.show, updateState));\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onExited={props.onOverlayComplete}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <div className={classNames(className)}>\n          <MatchOverlayParticipants\n            className={className}\n            currentMatch={props.currentMatch}\n          />\n          <MatchOverlayInterim\n            className={className}\n            show={currentState === 1}\n            onInterimComplete={updateState}\n          />\n          <MatchOverlayWinner\n            currentMatch={props.currentMatch}\n            className={className}\n            show={currentState === 2}\n            onWinnerComplete={updateState}\n          />\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n","import { createObserver } from \"../../../util\";\nimport MatchView from \"./MatchView.react\";\n\nexport default createObserver(MatchView);\n","import React, { useEffect, useRef, MutableRefObject } from \"react\";\nimport \"./MatchView.scss\";\nimport classNames from \"classnames\";\nimport Match from \"../../../store/round/match/Match\";\nimport {\n  getNormalizedSpeed,\n  runOnDelay,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport { CSSTransition } from \"react-transition-group\";\nimport MatchFinalEntry from \"./_partial/MatchFinalEntry\";\nimport MatchParticipantList from \"./_partial/MatchParticipantList\";\nimport MatchOverlay from \"./overlay/MatchOverlay\";\n\n/**\n * Properties of the match view React component.\n */\nexport interface MatchViewProps {\n  /** Whether it is the currently ongoing match. */\n  isCurrentMatch: boolean;\n  /** The details of the current match. */\n  match: Match;\n  /** Action to call when the view has finished showing the match. */\n  onMatchComplete: () => void;\n}\n\n/**\n * React component for the match view.\n */\nexport default (props: MatchViewProps): JSX.Element | null => {\n  if (props.match === undefined) {\n    return null;\n  }\n\n  const className: string = \"match\";\n  const isActualMatch: boolean = props.match.participants.length > 1;\n\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n    setState,\n  ]: AnimationStateHook = useAnimationState(props.isCurrentMatch ? 0 : 3);\n\n  const onMatchComplete = () => {\n    setState(3);\n    runOnPredicate(props.isCurrentMatch, () =>\n      runOnDelay(() => props.onMatchComplete(), getNormalizedSpeed(1000)),\n    )();\n  };\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(\n      currentState === 1 && isActualMatch && props.isCurrentMatch,\n      () => updateStateDelay(getNormalizedSpeed(200)),\n    ),\n  );\n  useEffect(\n    runOnPredicate(currentState === 1 && !isActualMatch, onMatchComplete),\n  );\n\n  const matchRef: MutableRefObject<HTMLDivElement> = useRef(null as any);\n\n  return (\n    <CSSTransition\n      in={currentState > 0}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}--entering`,\n        enterDone: `${className}--entered`,\n        exit: \"\",\n        exitActive: `${className}--exiting`,\n        exitDone: `${className}--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntering={() =>\n        matchRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"nearest\",\n          inline: \"center\",\n        })\n      }\n      onExited={props.onMatchComplete}\n    >\n      <div\n        ref={matchRef}\n        className={classNames(className, {\n          [`${className}--completed`]: !props.isCurrentMatch,\n        })}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <MatchParticipantList className={className} match={props.match} />\n        <MatchFinalEntry\n          className={className}\n          isCurrentMatch={props.isCurrentMatch && currentState < 3}\n          isActualMatch={isActualMatch}\n          match={props.match}\n        />\n        <MatchOverlay\n          currentMatch={props.match}\n          show={currentState === 2 && props.isCurrentMatch}\n          onOverlayComplete={onMatchComplete}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import RoundMatchListView from \"./RoundMatchListView.react\";\n\nexport default RoundMatchListView;\n","import React from \"react\";\nimport { Observer } from \"mobx-react\";\nimport \"./RoundMatchListView.scss\";\nimport classNames from \"classnames\";\nimport Round from \"../../../store/round/Round\";\nimport Match from \"../../../store/round/match/Match\";\nimport MatchView from \"../match/MatchView\";\n\n/**\n * Properties of the round match list view React component.\n */\nexport interface RoundMatchListViewProps {\n  /** CSS class */\n  className: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round;\n  /** Action to call when the current match is completed. */\n  onCurrentMatchComplete: () => void;\n}\n\n/**\n * React component for the round match list view.\n */\nexport default (props: RoundMatchListViewProps): JSX.Element => {\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n\n  return (\n    <Observer>\n      {() => (\n        <div className={classNames(`${props.className}__list`)}>\n          {props.round.matches\n            .filter(\n              (_: Match, index: number): boolean => index <= currentMatchIndex,\n            )\n            .map(\n              (match: Match): JSX.Element => (\n                <MatchView\n                  key={match.fullId}\n                  match={match}\n                  isCurrentMatch={match.id === props.matchId}\n                  onMatchComplete={props.onCurrentMatchComplete}\n                />\n              ),\n            )}\n        </div>\n      )}\n    </Observer>\n  );\n};\n","import { withTranslation } from \"react-i18next\";\nimport RoundTitle from \"./RoundTitle.react\";\n/**\n * React component for the round title.\n */\nexport default withTranslation()(RoundTitle);\n","import React from \"react\";\nimport \"./RoundTitle.scss\";\nimport Round from \"../../../store/round/Round\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the round title React component.\n */\nexport interface RoundTitleProps extends WithTranslation {\n  /** The details of the current round. */\n  round: Round;\n}\n\n/**\n * React component for the round title.\n */\nexport default (props: RoundTitleProps): JSX.Element => {\n  const roundId: string = props.round.id;\n  return (\n    <h2>\n      <Trans i18nKey=\"roundView.title\">Round {{ roundId }}</Trans>\n    </h2>\n  );\n};\n","import { createObserver } from \"../../../util\";\nimport RoundDetails from \"./RoundDetails.react\";\n\nexport default createObserver(RoundDetails);\n","import React, { useEffect } from \"react\";\nimport \"./RoundDetails.scss\";\nimport classNames from \"classnames\";\nimport Round from \"../../../store/round/Round\";\nimport Match from \"../../../store/round/match/Match\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport RoundMatchListView from \"./RoundMatchListView\";\nimport RoundTitle from \"./RoundTitle\";\n\n/**\n * Properties of the round details React component.\n */\nexport interface RoundDetailsProps {\n  /** CSS class */\n  className: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round;\n  /** Whether to show the round details or not. */\n  show: boolean;\n  /** Action to call when the current match is completed. */\n  onCurrentComplete: () => void;\n}\n\n/**\n * React component for the round details.\n */\nexport default (props: RoundDetailsProps): JSX.Element => {\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n  const [currentState, updateState]: AnimationStateHook = useAnimationState(\n    currentMatchIndex,\n  );\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && currentMatchIndex !== -1 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}--entering`,\n        enterDone: `${props.className}--entered`,\n        exit: \"\",\n        exitActive: `${props.className}--exiting`,\n        exitDone: `${props.className}--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(props.className)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <RoundTitle round={props.round} />\n        <RoundMatchListView\n          key={`${props.round.id}:${props.matchId}`}\n          className={props.className}\n          round={props.round}\n          matchId={props.matchId}\n          onCurrentMatchComplete={props.onCurrentComplete}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import React, { useEffect, Fragment } from \"react\";\nimport \"./RoundView.scss\";\nimport Round from \"../../store/round/Round\";\nimport Match from \"../../store/round/match/Match\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n  runOnDelay,\n  getNormalizedSpeed,\n  getMatchRedirect,\n} from \"../../util/index\";\nimport RoundDetails from \"./_partial/RoundDetails\";\nimport { CSSTransition } from \"react-transition-group\";\n\n/**\n * Properties of the round view React component.\n */\nexport interface RoundViewProps {\n  /** Whether to show the round or not. */\n  show: boolean;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the current round. */\n  round: Round | undefined;\n  /** Action to call when the view has finished showing the round. */\n  onRoundComplete: () => void;\n}\n\n/**\n * Returns a redirect to the given round and match if required.\n * @param {boolean} required Whether the redirect is required or not.\n * @param {Round} round The details of the round.\n * @param {number} matchIndex The index of the match to redirect to.\n * @return {JSX.Element | null} The redirect if it is required, or null if it is not.\n */\nexport const getRoundRedirectIfRequired = (\n  required: boolean = false,\n  round: Round,\n  matchIndex: number,\n): JSX.Element | null =>\n  required ? getMatchRedirect(round.id, round.matches[matchIndex].id) : null;\n\n/**\n * React component for the round view.\n */\nexport default (props: RoundViewProps): JSX.Element | null => {\n  if (props.round === undefined) {\n    return null;\n  }\n\n  const currentMatchIndex: number = props.round.matches.findIndex(\n    (match: Match): boolean => match.id === props.matchId,\n  );\n  const className: string = \"round\";\n\n  const [\n    currentState,\n    updateState,\n    ,\n    setState,\n  ]: AnimationStateHook = useAnimationState(currentMatchIndex);\n  const shouldNextRedirect: boolean =\n    currentState > 0 &&\n    currentMatchIndex !== currentState &&\n    currentMatchIndex !== -1 &&\n    currentState < props.round.matches.length;\n\n  useEffect(\n    runOnPredicate(currentState === props.round.matches.length, () =>\n      runOnDelay(props.onRoundComplete, getNormalizedSpeed(500)),\n    ),\n    [currentState],\n  );\n\n  useEffect(() => setState(currentMatchIndex), [currentMatchIndex, props.matchId, setState]);\n\n  return (\n    <CSSTransition\n      in={props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: \"round--entering\",\n        enterDone: \"round--entered\",\n        exit: \"\",\n        exitActive: \"round--exiting\",\n        exitDone: \"round--exited\",\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <Fragment>\n        <RoundDetails\n          className={className}\n          round={props.round}\n          show={currentState !== props.round.matches.length}\n          matchId={props.matchId}\n          onCurrentComplete={updateState}\n        />\n        {getRoundRedirectIfRequired(currentMatchIndex === -1, props.round, 0)}\n        {getRoundRedirectIfRequired(\n          shouldNextRedirect,\n          props.round,\n          currentState,\n        )}\n      </Fragment>\n    </CSSTransition>\n  );\n};\n","import { createObserver } from \"../../util\";\nimport RoundView from \"./RoundView.react\";\n\nexport default createObserver(RoundView);\n","import { withTranslation } from \"react-i18next\";\nimport WinnerInfo from \"./WinnerInfo.react\";\n\nexport default withTranslation()(WinnerInfo);\n","import React from \"react\";\nimport \"./WinnerInfo.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../round/match/participant/card/ParticipantCard\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the winner info React component.\n */\nexport interface WinnerInfoProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner info.\n */\nexport default (props: WinnerInfoProps): JSX.Element => (\n  <div className={classNames(`${props.className}__winner`)}>\n    <Trans i18nKey=\"winnerOverlay.message\">\n      <ParticipantCard participant={props.winner} />\n      <h3>Won The Tournament!</h3>\n    </Trans>\n  </div>\n);\n","import WinnerOverlayView from \"./WinnerOverlayView.react\";\n\nexport default WinnerOverlayView;\n","import React from \"react\";\nimport \"./WinnerOverlayView.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport WinnerInfo from \"./WinnerInfo\";\n\n/**\n * Properties of the winner overlay main view React component.\n */\nexport interface WinnerOverlayViewProps {\n  /** CSS class */\n  className: string;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner overlay main view wrapper.\n */\nexport default (props: WinnerOverlayViewProps): JSX.Element => (\n  <div className={classNames(props.className)}>\n    <WinnerInfo {...props} />\n  </div>\n);\n","import WinnerOverlay from \"./WinnerOverlay.react\";\nimport { createObserver } from \"../../util\";\n\nexport default createObserver(WinnerOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./WinnerOverlay.scss\";\nimport Participant from \"../../store/round/match/participant/Participant\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  useAnimationState,\n  AnimationStateHook,\n  getNormalizedSpeed,\n  runOnPredicate,\n} from \"../../util\";\nimport WinnerOverlayView from \"./_partial/WinnerOverlayView\";\n\n/**\n * Properties of the winner overlay React component.\n */\nexport interface WinnerOverlayProps {\n  /** Whether to show the overlay or not. */\n  show: boolean;\n  /** The tournament winner. */\n  winner: Participant;\n}\n\n/**\n * React component for the winner overlay.\n */\nexport default (props: WinnerOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"winner-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState > 0 && props.show}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <WinnerOverlayView className={className} winner={props.winner} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import { observer, inject } from \"mobx-react\";\nimport SpeedOption from \"./SpeedOption.react\";\n\n/**\n * React component for the animation speed option.\n */\nexport default inject(\"config\")(observer(SpeedOption));\n","import React from \"react\";\nimport \"./SpeedOption.scss\";\nimport classNames from \"classnames\";\nimport Config from \"../../../store/config/Config\";\n\n/**\n * Properties of the animation speed option React component.\n */\nexport interface SpeedOptionProps {\n  /** CSS class */\n  className: string;\n  /** @ignore The application config. */\n  config?: Config;\n  /** The animation speed option value. */\n  speed: number;\n}\n\n/**\n * React component for the animation speed option.\n */\nexport default (props: SpeedOptionProps): JSX.Element => (\n  <button\n    key={props.speed}\n    className={classNames(`${props.className}__option`, {\n      \"button-primary\": props.speed === props.config!.speed,\n    })}\n    onClick={() => props.config!.setSpeed(props.speed)}\n  >\n    {`${props.speed}x`}\n  </button>\n);\n","import React from \"react\";\nimport \"./SpeedControl.scss\";\nimport classNames from \"classnames\";\nimport AnimationSpeed from \"../../store/config/AnimationSpeed\";\nimport SpeedOption from \"./_partial/SpeedOption\";\n\nconst allAnimationValues = AnimationSpeed.getValues();\n\n/**\n * React component for the animation speed controller.\n */\nexport default (props: {}): JSX.Element => {\n  const className: string = \"speed-control\";\n\n  return (\n    <div className={classNames(className)}>\n      {allAnimationValues.map(\n        (speed: number): JSX.Element => (\n          <SpeedOption\n            className={className}\n            key={`${speed}-speed`}\n            speed={speed}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import SpeedControl from \"./SpeedControl.react\";\n\nexport default SpeedControl;\n","import AppDevTools from \"./AppDevTools.react\";\n\nexport default AppDevTools;\n","import React, { Fragment } from \"react\";\nimport { isDevEnvironment } from \"../../util\";\nimport DevTools from \"mobx-react-devtools\";\n\n/**\n * React component for the tournament application devtools.\n */\nexport default (): JSX.Element | null =>\n  isDevEnvironment ? (\n    <Fragment>\n      <DevTools />\n    </Fragment>\n  ) : null;\n","import { createObserver } from \"../../../util\";\nimport LoserInfo from \"./LoserInfo.react\";\n\nexport default createObserver(LoserInfo);\n","import React, { useEffect } from \"react\";\nimport \"./LoserInfo.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport ParticipantCard from \"../../round/match/participant/card/ParticipantCard\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  getNormalizedSpeed,\n  runOnPredicate,\n  isInRange,\n} from \"../../../util\";\n\n/**\n * Properties of the loser info React component.\n */\nexport interface LoserInfoProps {\n  /** CSS class */\n  className: string;\n  /** The loser details. */\n  loser: Participant;\n  /** Whether to show the entry or not. */\n  show: boolean;\n  /** Action to call when the info has finished showing the list of losers. */\n  onInfoComplete: () => void;\n}\n\n/**\n * React component for the loser info.\n */\nexport default (props: LoserInfoProps): JSX.Element => {\n  const [\n    currentState,\n    updateState,\n    updateStateDelay,\n  ]: AnimationStateHook = useAnimationState();\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n  useEffect(\n    runOnPredicate(currentState === 2, () =>\n      updateStateDelay(getNormalizedSpeed(1000)),\n    ),\n    [currentState],\n  );\n\n  return (\n    <CSSTransition\n      in={isInRange(currentState, 1, 2) && props.show}\n      timeout={getNormalizedSpeed(200)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${props.className}__loser--entering`,\n        enterDone: `${props.className}__loser--entered`,\n        exit: \"\",\n        exitActive: `${props.className}__loser--exiting`,\n        exitDone: `${props.className}__loser--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onEntered={updateState}\n      onExited={props.onInfoComplete}\n    >\n      <div\n        className={classNames(`${props.className}__loser`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(200)}ms ease-in-out`,\n        }}\n      >\n        <ParticipantCard participant={props.loser} />\n      </div>\n    </CSSTransition>\n  );\n};\n","import { withTranslation } from \"react-i18next\";\nimport LoserOverlayView from \"./LoserOverlayView.react\";\n\nexport default withTranslation()(LoserOverlayView);\n","import React, { useEffect } from \"react\";\nimport \"./LoserOverlayView.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../../store/round/match/participant/Participant\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  runOnPredicate,\n} from \"../../../util/index\";\nimport LoserInfo from \"./LoserInfo\";\nimport { Trans, WithTranslation } from \"react-i18next\";\n\n/**\n * Properties of the loser overlay view React component.\n */\nexport interface LoserOverlayViewProps extends WithTranslation {\n  /** CSS class */\n  className: string;\n  /** The losers of a round. */\n  losers: Participant[];\n  /** Action to call when the overlay has finished showing the list of losers. */\n  onViewComplete: () => void;\n}\n\n/**\n * React component for the loser overlay view.\n */\nexport default (props: LoserOverlayViewProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n\n  useEffect(\n    runOnPredicate(currentState === props.losers.length, props.onViewComplete),\n  );\n\n  return (\n    <div className={classNames(props.className)}>\n      <h2>\n        <Trans i18nKey=\"loserOverlay.title\" count={props.losers.length}>\n          Losers\n        </Trans>\n      </h2>\n      {props.losers.map(\n        (loser: Participant, index: number): JSX.Element => (\n          <LoserInfo\n            key={loser.name}\n            className={props.className}\n            show={currentState === index}\n            loser={loser}\n            onInfoComplete={updateState}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import { createObserver } from \"../../util\";\nimport LoserOverlay from \"./LoserOverlay.react\";\n\nexport default createObserver(LoserOverlay);\n","import React, { useEffect } from \"react\";\nimport \"./LoserOverlay.scss\";\nimport classNames from \"classnames\";\nimport Participant from \"../../store/round/match/participant/Participant\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  getNormalizedSpeed,\n  useAnimationState,\n  AnimationStateHook,\n  runOnPredicate,\n} from \"../../util/index\";\nimport LoserOverlayView from \"./_partial/LoserOverlayView\";\n\n/**\n * Properties of the loser overlay React component.\n */\nexport interface LoserOverlayProps {\n  /** The losers of a round. */\n  losers: Participant[];\n  /** Action to call when the overlay has finished showing the list of losers. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the loser overlay.\n */\nexport default (props: LoserOverlayProps): JSX.Element => {\n  const [currentState, updateState]: AnimationStateHook = useAnimationState();\n  const className: string = \"loser-overlay\";\n\n  useEffect(runOnPredicate(currentState === 0, updateState));\n\n  return (\n    <CSSTransition\n      in={currentState === 1}\n      timeout={getNormalizedSpeed(500)}\n      classNames={{\n        enter: \"\",\n        enterActive: `${className}-wrapper--entering`,\n        enterDone: `${className}-wrapper--entered`,\n        exit: \"\",\n        exitActive: `${className}-wrapper--exiting`,\n        exitDone: `${className}-wrapper--exited`,\n      }}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      onExited={props.onOverlayComplete}\n    >\n      <div\n        className={classNames(`${className}-wrapper`)}\n        style={{\n          transition: `opacity ${getNormalizedSpeed(500)}ms ease-in-out`,\n        }}\n      >\n        <LoserOverlayView\n          losers={props.losers}\n          className={className}\n          onViewComplete={updateState}\n        />\n      </div>\n    </CSSTransition>\n  );\n};\n","import LoserOverlayView from \"./LoserOverlayView.react\";\n\nexport default LoserOverlayView;\n","import React from \"react\";\nimport Round from \"../../store/round/Round\";\nimport LoserOverlay from \"../loser-overlay/LoserOverlay\";\n\n/**\n * Properties of the tournament loser overlay view React component.\n */\nexport interface LoserOverlayViewProps {\n  /** The details of the current round. */\n  round: Round;\n  /** Whether to show the loser overlay or not. */\n  show: boolean;\n  /** Action to call when the view has finished showing the losers. */\n  onOverlayComplete: () => void;\n}\n\n/**\n * React component for the loser overlay view.\n */\nexport default (props: LoserOverlayViewProps): JSX.Element | null => {\n  return props.show ? (\n    <LoserOverlay\n      losers={props.round.losers}\n      onOverlayComplete={props.onOverlayComplete}\n    />\n  ) : null;\n};\n","import React from \"react\";\nimport \"./TournamentTitle.scss\";\nimport {\n  Trans,\n  useTranslation,\n  UseTranslationResponse,\n  WithTranslation,\n} from \"react-i18next\";\nimport Config from \"../../store/config/Config\";\nconst isString = require(\"is-string\");\n\n/**\n * Properties of the tournament title React component.\n */\nexport interface TournamentTitleProps extends WithTranslation {\n  /** @ignore The application config. */\n  config?: Config;\n}\n\n/**\n * React component for the tournament title.\n */\nexport default (props: TournamentTitleProps): JSX.Element => {\n  const { t }: UseTranslationResponse = useTranslation();\n  const translatedTournamentName: string = t(\"tournamentView.name\");\n\n  let tournamentName: string = isString(translatedTournamentName) && !!translatedTournamentName\n    ? translatedTournamentName\n    : props.config!.name;\n\n  return (\n    <h1>\n      <Trans i18nKey=\"tournamentView.title\">\n        {{ tournamentName }} Tournament\n      </Trans>\n    </h1>\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport TournamentTitle from \"./TournamentTitle.react\";\n\n/**\n * React component for the tournament title.\n */\nexport default withTranslation()(inject(\"config\")(TournamentTitle));\n","import { observer, inject } from \"mobx-react\";\nimport LanguageOption from \"./LanguageOption.react\";\n\n/**\n * React component for the language option.\n */\nexport default inject(\"config\")(observer(LanguageOption));\n","import React from \"react\";\nimport \"./LanguageOption.scss\";\nimport classNames from \"classnames\";\nimport Config from \"../../../store/config/Config\";\n\n/**\n * Properties of the language option React component.\n */\nexport interface LanguageOptionProps {\n  /** CSS class */\n  className: string;\n  /** @ignore The application config. */\n  config?: Config;\n  /** The language option value. */\n  language: string;\n}\n\n/**\n * React component for the language option.\n */\nexport default (props: LanguageOptionProps): JSX.Element => (\n  <button\n    key={props.language}\n    className={classNames(`${props.className}__option`, {\n      \"button-primary\": props.language === props.config!.currentLanguage,\n    })}\n    onClick={() => props.config!.setCurrentLanguage(props.language)}\n  >\n    {props.language}\n  </button>\n);\n","import { inject } from \"mobx-react\";\nimport LanguageControl from \"./LanguageControl.react\";\n\n/**\n * React component for the language controller.\n */\nexport default inject(\"config\")(LanguageControl);\n","import React from \"react\";\nimport \"./LanguageControl.scss\";\nimport classNames from \"classnames\";\nimport LanguageOption from \"./_partial/LanguageOption\";\nimport Config from \"../../store/config/Config\";\n\n/**\n * Properties of the language controller React component.\n */\nexport interface LanguageControlProps {\n  /** @ignore The application config. */\n  config?: Config;\n}\n\n/**\n * React component for the language controller.\n */\nexport default (props: LanguageControlProps): JSX.Element => {\n  const className: string = \"language-control\";\n\n  return (\n    <div className={classNames(className)}>\n      {props.config!.languages.map(\n        (language: string): JSX.Element => (\n          <LanguageOption\n            key={`${language}-language`}\n            className={className}\n            language={language}\n          />\n        ),\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { WithTranslation } from \"react-i18next\";\nimport ServiceWorkerAlertsConfig from \"../store/config/ServiceWorkerAlertsConfig\";\nconst SweetAlert = require(\"sweetalert2-react\");\n\n/**\n * Properties of the service worker update alert React component.\n */\nexport interface ServiceWorkerUpdateAlertProps extends WithTranslation {\n  /** @ignore The service worker alerts config. */\n  serviceWorkerAlertsConfig?: ServiceWorkerAlertsConfig;\n}\n\n/**\n * React component for the service worker update alert.\n */\nexport default (props: ServiceWorkerUpdateAlertProps): JSX.Element => {\n  const [show, setShow] = useState(true);\n\n  const title: string = props.t(\"serviceWorker.updateMessage.title\");\n  const message: string = props.t(\"serviceWorker.updateMessage.message\");\n\n  return (\n    <SweetAlert.default\n      show={show && props.serviceWorkerAlertsConfig!.updated}\n      type=\"warning\"\n      title={title}\n      text={message}\n      onConfirm={() => {\n        setShow(false);\n        props.serviceWorkerAlertsConfig!.setIsUpdated(false);\n      }}\n    />\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ServiceWorkerUpdateAlert from \"./ServiceWorkerUpdateAlert.react\";\nimport { createObserver } from \"../util\";\n\n/**\n * React component for the service worker add alert.\n */\nexport default withTranslation()(\n  inject(\"serviceWorkerAlertsConfig\")(createObserver(ServiceWorkerUpdateAlert)),\n);\n","import React, { useState } from \"react\";\nimport { WithTranslation } from \"react-i18next\";\nimport ServiceWorkerAlertsConfig from \"../store/config/ServiceWorkerAlertsConfig\";\nconst SweetAlert = require(\"sweetalert2-react\");\n\n/**\n * Properties of the service worker add alert React component.\n */\nexport interface ServiceWorkerAddAlertProps extends WithTranslation {\n  /** @ignore The service worker alerts config. */\n  serviceWorkerAlertsConfig?: ServiceWorkerAlertsConfig;\n}\n\n/**\n * React component for the service worker add alert.\n */\nexport default (props: ServiceWorkerAddAlertProps): JSX.Element => {\n  const [show, setShow] = useState(true);\n\n  const title: string = props.t(\"serviceWorker.offlineMessage.title\");\n  const message: string = props.t(\"serviceWorker.offlineMessage.message\");\n\n  return (\n    <SweetAlert.default\n      show={show && props.serviceWorkerAlertsConfig!.added}\n      type=\"success\"\n      title={title}\n      text={message}\n      onConfirm={() => {\n        setShow(false);\n        props.serviceWorkerAlertsConfig!.setIsAdded(false);\n      }}\n    />\n  );\n};\n","import { inject } from \"mobx-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ServiceWorkerAddAlert from \"./ServiceWorkerAddAlert.react\";\nimport { createObserver } from \"../util\";\n\n/**\n * React component for the service worker add alert.\n */\nexport default withTranslation()(\n  inject(\"serviceWorkerAlertsConfig\")(createObserver(ServiceWorkerAddAlert)),\n);\n","import React, { useState, useEffect } from \"react\";\nimport \"./TournamentView.scss\";\nimport classNames from \"classnames\";\nimport Tournament from \"../store/Tournament\";\nimport {\n  AnimationStateHook,\n  useAnimationState,\n  ShowOverlayHook,\n  runOnPredicate,\n  getMatchRedirect,\n} from \"../util\";\nimport RoundView from \"./round/RoundView\";\nimport Round from \"../store/round/Round\";\nimport WinnerOverlay from \"./winner-overlay/WinnerOverlay\";\nimport SpeedControl from \"./speed/SpeedControl\";\nimport AppDevTools from \"./_partial/AppDevTools\";\nimport LoserOverlayView from \"./_partial/LoserOverlayView\";\nimport TournamentTitle from \"./_partial/TournamentTitle\";\nimport LanguageControl from \"./language/LanguageControl\";\nimport ServiceWorkerUpdateAlert from \"../service-worker/ServiceWorkerUpdateAlert\";\nimport ServiceWorkerAddAlert from \"../service-worker/ServiceWorkerAddAlert\";\n\n/**\n * Properties of the tournament view React component.\n */\nexport interface TournamentViewProps {\n  /** The ID of the current round. */\n  roundId: string;\n  /** The ID of the current match. */\n  matchId: string;\n  /** The details of the tournament. */\n  tournament: Tournament;\n}\n\n/**\n * Returns a redirect to the given round and match if required.\n * @param {boolean} required Whether the redirect is required or not.\n * @param {Tournament} tournament The details of the tournament.\n * @param {number} roundIndex The index of the round to redirect to.\n * @param {number} matchIndex The index of the match to redirect to.\n * @return {JSX.Element | null} The redirect if it is required, or null if it is not.\n */\nexport const getRoundRedirectIfRequired = (\n  required: boolean = false,\n  tournament: Tournament,\n  roundIndex: number,\n  matchIndex: number,\n): JSX.Element | null =>\n  required\n    ? getMatchRedirect(\n        tournament.rounds[roundIndex].id,\n        tournament.rounds[roundIndex].matches[matchIndex].id,\n      )\n    : null;\n\n/**\n * React component for the tournament view.\n */\nexport default (props: TournamentViewProps): JSX.Element => {\n  const currentRoundIndex: number = props.tournament.rounds.findIndex(\n    (round: Round): boolean => round.id === props.roundId,\n  );\n  const isLastRound: boolean = props.tournament.lastRound.id === props.roundId;\n\n  const [showOverlay, setShowOverlay]: ShowOverlayHook = useState(\n    false as boolean,\n  );\n\n  const [\n    currentState,\n    updateState,\n    ,\n    setState,\n  ]: AnimationStateHook = useAnimationState();\n  const shouldNextRedirect: boolean =\n    currentState > 0 &&\n    currentRoundIndex + 1 !== currentState &&\n    currentState <= props.tournament.rounds.length;\n\n  useEffect(\n    runOnPredicate(currentState === 0, () => setState(currentRoundIndex + 1)),\n  );\n\n  return (\n    <div\n      key={`round-${currentRoundIndex}`}\n      className={classNames(\"tournament\")}\n    >\n      <TournamentTitle />\n      <RoundView\n        key={`${props.roundId}`}\n        show={currentState === currentRoundIndex + 1}\n        round={props.tournament.rounds[currentRoundIndex]}\n        matchId={props.matchId}\n        onRoundComplete={() => setShowOverlay(true)}\n      />\n      <LoserOverlayView\n        show={showOverlay && !isLastRound}\n        round={props.tournament.rounds[currentRoundIndex]}\n        onOverlayComplete={() => {\n          setShowOverlay(false);\n          updateState();\n        }}\n      />\n      <WinnerOverlay\n        show={showOverlay && isLastRound}\n        winner={props.tournament.winner}\n      />\n      {getRoundRedirectIfRequired(\n        currentRoundIndex === -1,\n        props.tournament,\n        0,\n        0,\n      )}\n      {getRoundRedirectIfRequired(\n        shouldNextRedirect,\n        props.tournament,\n        Math.max(currentRoundIndex, currentState - 1),\n        0,\n      )}\n      <SpeedControl />\n      <LanguageControl />\n      <ServiceWorkerAddAlert />\n      <ServiceWorkerUpdateAlert />\n      <AppDevTools />\n    </div>\n  );\n};\n","import TournamentView from \"./TournamentView.react\";\n\nexport default TournamentView;\n","import React, { Component } from \"react\";\nimport { Switch, Route, RouteComponentProps } from \"react-router\";\nimport { observer } from \"mobx-react\";\nimport Tournament from \"./store/Tournament\";\nimport Round from \"./store/round/Round\";\nimport TournamentView from \"./tournament/TournamentView\";\nimport { getMatchRedirect } from \"./util\";\n\n/**\n * Route related properties of the application redirect React component.\n */\nexport interface AppRedirectProps {\n  /** The ID of the current round. */\n  roundId?: string;\n  /** The ID of the current match. */\n  matchId?: string;\n  /** The ID of the first round of the tournament. */\n  firstRoundId?: string;\n  /** The ID of the first match of the tournament. */\n  firstMatchId?: string;\n}\n\n/**\n * Properties of the application router React component.\n */\nexport interface AppRouterProps extends RouteComponentProps<AppRedirectProps> {\n  /** The details of the tournament. */\n  tournament: Tournament;\n}\n\n/**\n * React component that returns a redirect depending upon what route properties are present.\n */\nconst AppRedirect = (props: AppRedirectProps): JSX.Element =>\n  props.roundId\n    ? getMatchRedirect(props.roundId, props.firstMatchId)\n    : getMatchRedirect(props.firstRoundId, props.firstMatchId);\n\n/**\n * React component for the application router.\n */\n@observer\nexport default class AppRouter extends Component<AppRouterProps> {\n  /**\n   * Returns the route params.\n   * @return {AppRedirectProps} The route params.\n   */\n  private _getParams = (\n    routeProps: RouteComponentProps<AppRedirectProps>,\n  ): AppRedirectProps => routeProps.match.params;\n\n  /**\n   * Returns the route for the application.\n   * @return {JSX.Element} The application route.\n   */\n  private _getApplicationRoute = (): JSX.Element => (\n    <Route\n      exact\n      path=\"/round/:roundId/match/:matchId\"\n      render={this._getTournament}\n    />\n  );\n\n  /**\n   * Returns the main tournament.\n   * @return {JSX.Element} The main tournament.\n   */\n  private _getTournament = (\n    props: RouteComponentProps<AppRedirectProps>,\n  ): JSX.Element => (\n    <TournamentView\n      key={this._getParams(props).roundId as string}\n      tournament={this.props.tournament}\n      roundId={this._getParams(props).roundId as string}\n      matchId={this._getParams(props).matchId as string}\n    />\n  );\n\n  /**\n   * Returns the route for a partial redirect.\n   * @return {JSX.Element} The partial redirect route.\n   */\n  private _getPartialRoute = (): JSX.Element => (\n    <Route exact path=\"/round/:roundId\" render={this._getPartialAppRedirect} />\n  );\n\n  /**\n   * Returns the application redirect for the partial redirect.\n   * @return {JSX.Element} The application redirect.\n   */\n  private _getPartialAppRedirect = (\n    props: RouteComponentProps<AppRedirectProps>,\n  ): JSX.Element =>\n    this._getCurrentRoundDetails(this._getParams(props).roundId as string) ? (\n      <AppRedirect\n        roundId={this._getParams(props).roundId as string}\n        firstMatchId={this._getFirstMatchIdOfCurrentRound(this._getParams(props)\n          .roundId as string)}\n      />\n    ) : (\n      this._getUnknownAppRedirect()\n    );\n\n  /**\n   * Returns the route for an unknown redirect.\n   * @return {JSX.Element} The unknown redirect route.\n   */\n  private _getUnknownRoute = (): JSX.Element => (\n    <Route exact path=\"*\" render={this._getUnknownAppRedirect} />\n  );\n\n  /**\n   * Returns the application redirect for the unknown redirect.\n   * @return {JSX.Element} The application redirect.\n   */\n  private _getUnknownAppRedirect = (): JSX.Element => (\n    <AppRedirect\n      roundId={this._getFirstRoundId()}\n      firstMatchId={this._getFirstMatchIdOfCurrentRound(\n        this._getFirstRoundId(),\n      )}\n    />\n  );\n\n  /**\n   * Returns the ID of the first round.\n   * @return {string} The first round ID.\n   */\n  private _getFirstRoundId = (): string => this.props.tournament.firstRound.id;\n\n  /**\n   * Returns a filter for finding the current round.\n   * @param {string} roundId The ID of the current round.\n   * @return {(round: Round) => boolean} The filter function.\n   */\n  private _getIsCurrentRoundFilter = (\n    roundId: string,\n  ): ((round: Round) => boolean) => (round: Round): boolean =>\n    round.id === roundId;\n\n  /**\n   * Returns the details of the round of the given ID.\n   * @param {string} roundId The ID of the round.\n   * @return {Round} The round details.\n   */\n  private _getCurrentRoundDetails = (roundId: string): Round =>\n    this.props.tournament.rounds.find(\n      this._getIsCurrentRoundFilter(roundId),\n    ) as Round;\n\n  /**\n   * Returns the ID of the first match of the given round.\n   * @param {string} roundId The ID of the round.\n   * @return {string} The first match ID.\n   */\n  private _getFirstMatchIdOfCurrentRound = (roundId: string): string =>\n    this._getCurrentRoundDetails(roundId).firstMatch.id;\n\n  /**\n   * Renders the component.\n   * @return {JSX.Element} The rendered component.\n   */\n  public render = (): JSX.Element => (\n    <Switch>\n      {this._getApplicationRoute()}\n      {this._getPartialRoute()}\n      {this._getUnknownRoute()}\n    </Switch>\n  );\n}\n","import { withRouter } from \"react-router\";\nimport AppRouter from \"./AppRouter.react\";\n\nexport default withRouter(AppRouter);\n","import { observable, computed, action } from \"mobx\";\n\n/**\n * Class representing the basic configuration for the service worker alerts.\n */\nexport default class ServiceWorkerAlertsConfig {\n  /** Whether to show the added message. */\n  @observable private _added: boolean;\n  /** Whether to show the updated message. */\n  @observable private _updated: boolean;\n\n  /** The singleton instance of the class, or null if not yet created. */\n  private static _instance: ServiceWorkerAlertsConfig | null = null;\n\n  private constructor() {\n    this._added = false;\n    this._updated = false;\n  }\n\n  /**\n   * Get an instance of the service worker config, which is a singleton.\n   * @return {ServiceWorkerAlertsConfig} The instance of a service worker config.\n   */\n  public static getInstance(): ServiceWorkerAlertsConfig {\n    return ServiceWorkerAlertsConfig._instance\n      ? ServiceWorkerAlertsConfig._instance\n      : (ServiceWorkerAlertsConfig._instance = new ServiceWorkerAlertsConfig());\n  }\n\n  /**\n   * Get whether the service worker was added.\n   * @return {boolean} Whether the service worker was added or not.\n   */\n  @computed public get added(): boolean {\n    return this._added;\n  }\n\n  /**\n   * Get whether the service worker was updated.\n   * @return {boolean} Whether the service worker was updated or not.\n   */\n  @computed public get updated(): boolean {\n    return this._updated;\n  }\n\n  /**\n   * Set whether the service worker was added.\n   * @param {boolean} value Whether the service worker was added.\n   */\n  @action public setIsAdded(value: boolean): void {\n    this._added = value;\n  }\n\n  /**\n   * Set whether the service worker was updated.\n   * @param {boolean} value Whether the service worker was updated.\n   */\n  @action public setIsUpdated(value: boolean): void {\n    this._updated = value;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Tournament from \"./store/Tournament\";\nimport Config from \"./store/config/Config\";\nimport { HashRouter } from \"react-router-dom\";\nimport AppRouter from \"./AppRouter\";\nimport { Provider } from \"mobx-react\";\nimport \"skeleton-css/css/skeleton.css\";\nimport \"./i18n\";\nimport ServiceWorkerAlertsConfig from \"./store/config/ServiceWorkerAlertsConfig\";\n\nconst config: Config = Config.getInstance();\nconst serviceWorkerAlertsConfig: ServiceWorkerAlertsConfig = ServiceWorkerAlertsConfig.getInstance();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess: () => serviceWorkerAlertsConfig.setIsAdded(true),\n  onUpdate: () => serviceWorkerAlertsConfig.setIsUpdated(true),\n});\n\n// Create the tournament store\nconst store: Tournament = new Tournament(config);\n\n// Set the webpage title.\ndocument.title = `${config.name} Tournament`;\n\n// Render the application! :D\nReactDOM.render(\n  <HashRouter>\n    <Provider\n      config={config}\n      serviceWorkerAlertsConfig={serviceWorkerAlertsConfig}\n    >\n      <AppRouter tournament={store} />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}